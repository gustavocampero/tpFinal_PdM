
tpFinal_PdM_PCSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065ec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  080067bc  080067bc  000077bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a60  08006a60  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006a60  08006a60  00007a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a68  08006a68  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a68  08006a68  00007a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a6c  08006a6c  00007a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006a70  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000053c  2000006c  08006adc  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  08006adc  000085a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f655  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b2b  00000000  00000000  000176f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  0001a220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b2d  00000000  00000000  0001b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023ae5  00000000  00000000  0001bbd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144a1  00000000  00000000  0003f6ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf072  00000000  00000000  00053b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122bcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004518  00000000  00000000  00122c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00127128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080067a4 	.word	0x080067a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	080067a4 	.word	0x080067a4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <setState>:
/**
 * @brief Cambia el estado actual de la máquina de estados.
 * @param new_state Nuevo estado al cual se cambiará.
 */
static void setState(debounceState_t new_state)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
	current_state = new_state;
 80005f6:	4a04      	ldr	r2, [pc, #16]	@ (8000608 <setState+0x1c>)
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	7013      	strb	r3, [r2, #0]
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	20000088 	.word	0x20000088

0800060c <readButton>:
/**
 * @brief Lee el estado actual del botón desde el puerto GPIO configurado.
 * @return Estado actual del pin GPIO (GPIO_PIN_SET o GPIO_PIN_RESET).
 */
static GPIO_PinState readButton()
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(buttonPort, buttonPin);
 8000610:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <readButton+0x1c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a05      	ldr	r2, [pc, #20]	@ (800062c <readButton+0x20>)
 8000616:	8812      	ldrh	r2, [r2, #0]
 8000618:	4611      	mov	r1, r2
 800061a:	4618      	mov	r0, r3
 800061c:	f001 fb58 	bl	8001cd0 <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
}
 8000622:	4618      	mov	r0, r3
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200000a8 	.word	0x200000a8
 800062c:	200000ac 	.word	0x200000ac

08000630 <buttonPressed>:

/**
 * @brief Acción a realizar cuando el botón es presionado.
 */
static void buttonPressed()
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	if(verb>0) uartSendString((uint8_t *)"BUTTON PRESSED\n\r");
 8000634:	2300      	movs	r3, #0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d002      	beq.n	8000640 <buttonPressed+0x10>
 800063a:	4802      	ldr	r0, [pc, #8]	@ (8000644 <buttonPressed+0x14>)
 800063c:	f000 fac4 	bl	8000bc8 <uartSendString>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	080067bc 	.word	0x080067bc

08000648 <buttonReleased>:
 * @brief Acción a realizar cuando el botón es liberado.
 * @note  Setea key dependiendo si se libera desde un single press o un long press
 * @param long_pressed: bool que indica si se libera luego de un long press
 */
static void buttonReleased(bool_t long_pressed)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	if(long_pressed)
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d009      	beq.n	800066c <buttonReleased+0x24>
	{
		if(verb>0) uartSendString((uint8_t *)"LIBERADO DESPUES DE LONG PRESSED\n\r");
 8000658:	2300      	movs	r3, #0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d002      	beq.n	8000664 <buttonReleased+0x1c>
 800065e:	480c      	ldr	r0, [pc, #48]	@ (8000690 <buttonReleased+0x48>)
 8000660:	f000 fab2 	bl	8000bc8 <uartSendString>
		key = KEY_LONG_PRESS;
 8000664:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <buttonReleased+0x4c>)
 8000666:	2202      	movs	r2, #2
 8000668:	701a      	strb	r2, [r3, #0]
	else
	{
		if(verb>0) uartSendString((uint8_t *)"LIBERADO DESPUES DE SINGLE PRESSED\n\r");
		if(key != KEY_LONG_PRESS) key = KEY_SINGLE_PRESS; // no sobreescribir
	}
}
 800066a:	e00c      	b.n	8000686 <buttonReleased+0x3e>
		if(verb>0) uartSendString((uint8_t *)"LIBERADO DESPUES DE SINGLE PRESSED\n\r");
 800066c:	2300      	movs	r3, #0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d002      	beq.n	8000678 <buttonReleased+0x30>
 8000672:	4809      	ldr	r0, [pc, #36]	@ (8000698 <buttonReleased+0x50>)
 8000674:	f000 faa8 	bl	8000bc8 <uartSendString>
		if(key != KEY_LONG_PRESS) key = KEY_SINGLE_PRESS; // no sobreescribir
 8000678:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <buttonReleased+0x4c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b02      	cmp	r3, #2
 800067e:	d002      	beq.n	8000686 <buttonReleased+0x3e>
 8000680:	4b04      	ldr	r3, [pc, #16]	@ (8000694 <buttonReleased+0x4c>)
 8000682:	2201      	movs	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	080067d0 	.word	0x080067d0
 8000694:	200000a4 	.word	0x200000a4
 8000698:	080067f4 	.word	0x080067f4

0800069c <debounceFSM_init>:
 * @brief Inicializa la máquina de estados para el debounce del botón.
 * @param GPIOx Puerto GPIO del botón.
 * @param GPIO_Pin Pin GPIO del botón.
 */
void debounceFSM_init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	807b      	strh	r3, [r7, #2]
	buttonPort = GPIOx;
 80006a8:	4a0a      	ldr	r2, [pc, #40]	@ (80006d4 <debounceFSM_init+0x38>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	6013      	str	r3, [r2, #0]
	buttonPin = GPIO_Pin;
 80006ae:	4a0a      	ldr	r2, [pc, #40]	@ (80006d8 <debounceFSM_init+0x3c>)
 80006b0:	887b      	ldrh	r3, [r7, #2]
 80006b2:	8013      	strh	r3, [r2, #0]
	current_state = BUTTON_UP;
 80006b4:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <debounceFSM_init+0x40>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
	delayInit(&delay_debounce, DEBOUNCE_DELAY);
 80006ba:	2128      	movs	r1, #40	@ 0x28
 80006bc:	4808      	ldr	r0, [pc, #32]	@ (80006e0 <debounceFSM_init+0x44>)
 80006be:	f000 f8b7 	bl	8000830 <delayInit>
	delayInit(&timer_pressed, LONG_PRESSED_DELAY);
 80006c2:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80006c6:	4807      	ldr	r0, [pc, #28]	@ (80006e4 <debounceFSM_init+0x48>)
 80006c8:	f000 f8b2 	bl	8000830 <delayInit>
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200000a8 	.word	0x200000a8
 80006d8:	200000ac 	.word	0x200000ac
 80006dc:	20000088 	.word	0x20000088
 80006e0:	2000008c 	.word	0x2000008c
 80006e4:	20000098 	.word	0x20000098

080006e8 <debounceFSM_update>:

/**
 * @brief Actualiza la máquina de estados para el debounce. Debe llamarse periódicamente.
 */
void debounceFSM_update()
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	static bool_t long_pressed = false;
	switch(current_state)
 80006ec:	4b41      	ldr	r3, [pc, #260]	@ (80007f4 <debounceFSM_update+0x10c>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b04      	cmp	r3, #4
 80006f2:	d87c      	bhi.n	80007ee <debounceFSM_update+0x106>
 80006f4:	a201      	add	r2, pc, #4	@ (adr r2, 80006fc <debounceFSM_update+0x14>)
 80006f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fa:	bf00      	nop
 80006fc:	08000711 	.word	0x08000711
 8000700:	08000729 	.word	0x08000729
 8000704:	08000759 	.word	0x08000759
 8000708:	08000783 	.word	0x08000783
 800070c:	080007a1 	.word	0x080007a1
	{
		case BUTTON_UP:
		{
			if(readButton() == GPIO_PIN_RESET)
 8000710:	f7ff ff7c 	bl	800060c <readButton>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d160      	bne.n	80007dc <debounceFSM_update+0xf4>
			{
				setState(BUTTON_FALLING);
 800071a:	2001      	movs	r0, #1
 800071c:	f7ff ff66 	bl	80005ec <setState>
				delayRead(&delay_debounce);
 8000720:	4835      	ldr	r0, [pc, #212]	@ (80007f8 <debounceFSM_update+0x110>)
 8000722:	f000 f8a3 	bl	800086c <delayRead>
			}
			break;
 8000726:	e059      	b.n	80007dc <debounceFSM_update+0xf4>
		}

		case BUTTON_FALLING:
		{
			if(delayRead(&delay_debounce))
 8000728:	4833      	ldr	r0, [pc, #204]	@ (80007f8 <debounceFSM_update+0x110>)
 800072a:	f000 f89f 	bl	800086c <delayRead>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d055      	beq.n	80007e0 <debounceFSM_update+0xf8>
			{
				if(readButton() == GPIO_PIN_RESET)
 8000734:	f7ff ff6a 	bl	800060c <readButton>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d108      	bne.n	8000750 <debounceFSM_update+0x68>
				{
					setState(BUTTON_DOWN);
 800073e:	2002      	movs	r0, #2
 8000740:	f7ff ff54 	bl	80005ec <setState>
					buttonPressed();
 8000744:	f7ff ff74 	bl	8000630 <buttonPressed>
					delayRead(&timer_pressed); // reset
 8000748:	482c      	ldr	r0, [pc, #176]	@ (80007fc <debounceFSM_update+0x114>)
 800074a:	f000 f88f 	bl	800086c <delayRead>
				else
				{
					setState(BUTTON_UP);
				}
			}
			break;
 800074e:	e047      	b.n	80007e0 <debounceFSM_update+0xf8>
					setState(BUTTON_UP);
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff ff4b 	bl	80005ec <setState>
			break;
 8000756:	e043      	b.n	80007e0 <debounceFSM_update+0xf8>
		}

		case BUTTON_DOWN:
		{
			if(delayRead(&timer_pressed))
 8000758:	4828      	ldr	r0, [pc, #160]	@ (80007fc <debounceFSM_update+0x114>)
 800075a:	f000 f887 	bl	800086c <delayRead>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <debounceFSM_update+0x82>
			{
				setState(BUTTON_TOO_DOWN);
 8000764:	2003      	movs	r0, #3
 8000766:	f7ff ff41 	bl	80005ec <setState>
			}

			if(readButton() == GPIO_PIN_SET)
 800076a:	f7ff ff4f 	bl	800060c <readButton>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d137      	bne.n	80007e4 <debounceFSM_update+0xfc>
			{
				setState(BUTTON_RAISING);
 8000774:	2004      	movs	r0, #4
 8000776:	f7ff ff39 	bl	80005ec <setState>
				delayRead(&delay_debounce);
 800077a:	481f      	ldr	r0, [pc, #124]	@ (80007f8 <debounceFSM_update+0x110>)
 800077c:	f000 f876 	bl	800086c <delayRead>
			}
			break;
 8000780:	e030      	b.n	80007e4 <debounceFSM_update+0xfc>
		}

		case BUTTON_TOO_DOWN:
		{
			if(readButton() == GPIO_PIN_SET)
 8000782:	f7ff ff43 	bl	800060c <readButton>
 8000786:	4603      	mov	r3, r0
 8000788:	2b01      	cmp	r3, #1
 800078a:	d12d      	bne.n	80007e8 <debounceFSM_update+0x100>
			{
				long_pressed = true;
 800078c:	4b1c      	ldr	r3, [pc, #112]	@ (8000800 <debounceFSM_update+0x118>)
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]
				setState(BUTTON_RAISING);
 8000792:	2004      	movs	r0, #4
 8000794:	f7ff ff2a 	bl	80005ec <setState>
				delayRead(&delay_debounce);
 8000798:	4817      	ldr	r0, [pc, #92]	@ (80007f8 <debounceFSM_update+0x110>)
 800079a:	f000 f867 	bl	800086c <delayRead>
			}
			break;
 800079e:	e023      	b.n	80007e8 <debounceFSM_update+0x100>
		}

		case BUTTON_RAISING:
		{
			if(delayRead(&delay_debounce))
 80007a0:	4815      	ldr	r0, [pc, #84]	@ (80007f8 <debounceFSM_update+0x110>)
 80007a2:	f000 f863 	bl	800086c <delayRead>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d01f      	beq.n	80007ec <debounceFSM_update+0x104>
			{
				if(readButton() == GPIO_PIN_SET)
 80007ac:	f7ff ff2e 	bl	800060c <readButton>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d10e      	bne.n	80007d4 <debounceFSM_update+0xec>
				{
					setState(BUTTON_UP);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f7ff ff18 	bl	80005ec <setState>

					buttonReleased(long_pressed);
 80007bc:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <debounceFSM_update+0x118>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff41 	bl	8000648 <buttonReleased>
					long_pressed = false;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <debounceFSM_update+0x118>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]

					delayRead(&timer_pressed);
 80007cc:	480b      	ldr	r0, [pc, #44]	@ (80007fc <debounceFSM_update+0x114>)
 80007ce:	f000 f84d 	bl	800086c <delayRead>
				else
				{
					setState(BUTTON_DOWN);
				}
			}
			break;
 80007d2:	e00b      	b.n	80007ec <debounceFSM_update+0x104>
					setState(BUTTON_DOWN);
 80007d4:	2002      	movs	r0, #2
 80007d6:	f7ff ff09 	bl	80005ec <setState>
			break;
 80007da:	e007      	b.n	80007ec <debounceFSM_update+0x104>
			break;
 80007dc:	bf00      	nop
 80007de:	e006      	b.n	80007ee <debounceFSM_update+0x106>
			break;
 80007e0:	bf00      	nop
 80007e2:	e004      	b.n	80007ee <debounceFSM_update+0x106>
			break;
 80007e4:	bf00      	nop
 80007e6:	e002      	b.n	80007ee <debounceFSM_update+0x106>
			break;
 80007e8:	bf00      	nop
 80007ea:	e000      	b.n	80007ee <debounceFSM_update+0x106>
			break;
 80007ec:	bf00      	nop
		}
	}
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000088 	.word	0x20000088
 80007f8:	2000008c 	.word	0x2000008c
 80007fc:	20000098 	.word	0x20000098
 8000800:	200000ae 	.word	0x200000ae

08000804 <readKey>:
 * @brief Lee el valor del flag que indica si el botón fue presionado una vez o durante un tiempo.
 *        Luego de leer, restablece el flag.
 * @return key state.
 */
keyState_t readKey()
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
	keyState_t ret = key;
 800080a:	4b08      	ldr	r3, [pc, #32]	@ (800082c <readKey+0x28>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	71fb      	strb	r3, [r7, #7]
	if(key != KEY_NO_PRESS) key = KEY_NO_PRESS;
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <readKey+0x28>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d002      	beq.n	800081e <readKey+0x1a>
 8000818:	4b04      	ldr	r3, [pc, #16]	@ (800082c <readKey+0x28>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]

	return ret;
 800081e:	79fb      	ldrb	r3, [r7, #7]
}
 8000820:	4618      	mov	r0, r3
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	200000a4 	.word	0x200000a4

08000830 <delayInit>:
  * @param duration Valor en ms que representa la duración del delay.
  *
  * @retval void
  */
void delayInit( delay_t * delay, tick_t duration )
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
	assert(delay);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d105      	bne.n	800084c <delayInit+0x1c>
 8000840:	4b07      	ldr	r3, [pc, #28]	@ (8000860 <delayInit+0x30>)
 8000842:	4a08      	ldr	r2, [pc, #32]	@ (8000864 <delayInit+0x34>)
 8000844:	2116      	movs	r1, #22
 8000846:	4808      	ldr	r0, [pc, #32]	@ (8000868 <delayInit+0x38>)
 8000848:	f004 fe3e 	bl	80054c8 <__assert_func>
	delay->duration = duration;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	683a      	ldr	r2, [r7, #0]
 8000850:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	721a      	strb	r2, [r3, #8]
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	0800681c 	.word	0x0800681c
 8000864:	080069b0 	.word	0x080069b0
 8000868:	08006824 	.word	0x08006824

0800086c <delayRead>:
  * @param delay Puntero a la estructura delay_t que contiene la configuración del delay.
  *
  * @retval bool_t Verdadero si se cumplió la duración del delay, falso en caso contrario.
  */
bool_t delayRead( delay_t * delay )
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	assert(delay);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d105      	bne.n	8000886 <delayRead+0x1a>
 800087a:	4b1b      	ldr	r3, [pc, #108]	@ (80008e8 <delayRead+0x7c>)
 800087c:	4a1b      	ldr	r2, [pc, #108]	@ (80008ec <delayRead+0x80>)
 800087e:	2129      	movs	r1, #41	@ 0x29
 8000880:	481b      	ldr	r0, [pc, #108]	@ (80008f0 <delayRead+0x84>)
 8000882:	f004 fe21 	bl	80054c8 <__assert_func>
	bool_t ret = false;
 8000886:	2300      	movs	r3, #0
 8000888:	73fb      	strb	r3, [r7, #15]
	uint32_t currentTime = HAL_GetTick();
 800088a:	f000 ff77 	bl	800177c <HAL_GetTick>
 800088e:	60b8      	str	r0, [r7, #8]
	if(delay->running == false)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	7a1b      	ldrb	r3, [r3, #8]
 8000894:	f083 0301 	eor.w	r3, r3, #1
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d006      	beq.n	80008ac <delayRead+0x40>
	{
		delay->startTime = currentTime;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	68ba      	ldr	r2, [r7, #8]
 80008a2:	601a      	str	r2, [r3, #0]
		delay->running = true;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2201      	movs	r2, #1
 80008a8:	721a      	strb	r2, [r3, #8]
 80008aa:	e018      	b.n	80008de <delayRead+0x72>
	}
	else
	{
		ret = ((currentTime - delay->startTime) >= delay->duration);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	68ba      	ldr	r2, [r7, #8]
 80008b2:	1ad2      	subs	r2, r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	bf2c      	ite	cs
 80008bc:	2301      	movcs	r3, #1
 80008be:	2300      	movcc	r3, #0
 80008c0:	73fb      	strb	r3, [r7, #15]
		delay->running = !ret; // ret = false -> still running -> running = true :: ret = true -> completed -> running = false
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	bf14      	ite	ne
 80008c8:	2301      	movne	r3, #1
 80008ca:	2300      	moveq	r3, #0
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	f083 0301 	eor.w	r3, r3, #1
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	721a      	strb	r2, [r3, #8]
	}

	return ret;
 80008de:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	0800681c 	.word	0x0800681c
 80008ec:	080069bc 	.word	0x080069bc
 80008f0:	08006824 	.word	0x08006824

080008f4 <delayWrite>:
  * @param duration Nueva duración en ticks para el delay.
  *
  * @retval void
  */
void delayWrite( delay_t * delay, tick_t duration )
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
	assert(delay);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d105      	bne.n	8000910 <delayWrite+0x1c>
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <delayWrite+0x2c>)
 8000906:	4a07      	ldr	r2, [pc, #28]	@ (8000924 <delayWrite+0x30>)
 8000908:	2147      	movs	r1, #71	@ 0x47
 800090a:	4807      	ldr	r0, [pc, #28]	@ (8000928 <delayWrite+0x34>)
 800090c:	f004 fddc 	bl	80054c8 <__assert_func>
	delay->duration = duration;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	683a      	ldr	r2, [r7, #0]
 8000914:	605a      	str	r2, [r3, #4]
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	0800681c 	.word	0x0800681c
 8000924:	080069c8 	.word	0x080069c8
 8000928:	08006824 	.word	0x08006824

0800092c <setState>:
/**
  * @brief  Funcion para cambiar el valor de current_state
  * @param	ledState_t nuevo estado
  */
static void setState(ledState_t state)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
	current_state = state;
 8000936:	4a04      	ldr	r2, [pc, #16]	@ (8000948 <setState+0x1c>)
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	7013      	strb	r3, [r2, #0]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	200000c6 	.word	0x200000c6

0800094c <led_On>:

/**
  * @brief  led_On Activa el Led.
  */
void led_On(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_ledPort, _ledPin, GPIO_PIN_SET);
 8000950:	4b04      	ldr	r3, [pc, #16]	@ (8000964 <led_On+0x18>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a04      	ldr	r2, [pc, #16]	@ (8000968 <led_On+0x1c>)
 8000956:	8811      	ldrh	r1, [r2, #0]
 8000958:	2201      	movs	r2, #1
 800095a:	4618      	mov	r0, r3
 800095c:	f001 f9d0 	bl	8001d00 <HAL_GPIO_WritePin>
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200000b0 	.word	0x200000b0
 8000968:	200000b4 	.word	0x200000b4

0800096c <led_Off>:

/**
  * @brief  led_On Desactiva el Led.
  */
void led_Off(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_ledPort, _ledPin, GPIO_PIN_RESET);
 8000970:	4b04      	ldr	r3, [pc, #16]	@ (8000984 <led_Off+0x18>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a04      	ldr	r2, [pc, #16]	@ (8000988 <led_Off+0x1c>)
 8000976:	8811      	ldrh	r1, [r2, #0]
 8000978:	2200      	movs	r2, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f001 f9c0 	bl	8001d00 <HAL_GPIO_WritePin>
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200000b0 	.word	0x200000b0
 8000988:	200000b4 	.word	0x200000b4

0800098c <ledInit>:
  * @param	offTimeLong: tiempo en estado off largo
  * @param	offTimeShort: tiempo en estado off corto
  * @param	cantBlink: cantidad de veces que blinkea en un combo
  */
void ledInit(GPIO_TypeDef* ledPort, uint16_t ledPin, tick_t onTime, tick_t offTimeLong, tick_t offTimeShort, uint8_t cantBlink)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	607a      	str	r2, [r7, #4]
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	460b      	mov	r3, r1
 800099a:	817b      	strh	r3, [r7, #10]
	_ledPort = ledPort;
 800099c:	4a11      	ldr	r2, [pc, #68]	@ (80009e4 <ledInit+0x58>)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	6013      	str	r3, [r2, #0]
	_ledPin = ledPin;
 80009a2:	4a11      	ldr	r2, [pc, #68]	@ (80009e8 <ledInit+0x5c>)
 80009a4:	897b      	ldrh	r3, [r7, #10]
 80009a6:	8013      	strh	r3, [r2, #0]
	_onTime = onTime;
 80009a8:	4a10      	ldr	r2, [pc, #64]	@ (80009ec <ledInit+0x60>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6013      	str	r3, [r2, #0]
	_offTimeLong = offTimeLong;
 80009ae:	4a10      	ldr	r2, [pc, #64]	@ (80009f0 <ledInit+0x64>)
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	6013      	str	r3, [r2, #0]
	_offTimeShort = offTimeShort;
 80009b4:	4a0f      	ldr	r2, [pc, #60]	@ (80009f4 <ledInit+0x68>)
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	6013      	str	r3, [r2, #0]
	_cantBlink = cantBlink;
 80009ba:	4a0f      	ldr	r2, [pc, #60]	@ (80009f8 <ledInit+0x6c>)
 80009bc:	7f3b      	ldrb	r3, [r7, #28]
 80009be:	7013      	strb	r3, [r2, #0]

	_running = LED_STOP;
 80009c0:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <ledInit+0x70>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	701a      	strb	r2, [r3, #0]
	current_state = LED_OFF;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a00 <ledInit+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
	delayInit(&delay_led, _onTime);
 80009cc:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <ledInit+0x60>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4619      	mov	r1, r3
 80009d2:	480c      	ldr	r0, [pc, #48]	@ (8000a04 <ledInit+0x78>)
 80009d4:	f7ff ff2c 	bl	8000830 <delayInit>
	led_Off();
 80009d8:	f7ff ffc8 	bl	800096c <led_Off>
}
 80009dc:	bf00      	nop
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200000b0 	.word	0x200000b0
 80009e8:	200000b4 	.word	0x200000b4
 80009ec:	200000b8 	.word	0x200000b8
 80009f0:	200000bc 	.word	0x200000bc
 80009f4:	200000c0 	.word	0x200000c0
 80009f8:	200000c4 	.word	0x200000c4
 80009fc:	200000c5 	.word	0x200000c5
 8000a00:	200000c6 	.word	0x200000c6
 8000a04:	200000c8 	.word	0x200000c8

08000a08 <ledFSM_update>:

/**
  * @brief  led FSM
  */
void ledFSM_update()
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	static uint8_t aux_cantBlink;
	switch(current_state)
 8000a0c:	4b46      	ldr	r3, [pc, #280]	@ (8000b28 <ledFSM_update+0x120>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b03      	cmp	r3, #3
 8000a12:	f200 8086 	bhi.w	8000b22 <ledFSM_update+0x11a>
 8000a16:	a201      	add	r2, pc, #4	@ (adr r2, 8000a1c <ledFSM_update+0x14>)
 8000a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a1c:	08000a2d 	.word	0x08000a2d
 8000a20:	08000a5b 	.word	0x08000a5b
 8000a24:	08000acd 	.word	0x08000acd
 8000a28:	08000af1 	.word	0x08000af1
	{
		case LED_OFF:
		{
			if(_running > LED_STOP)
 8000a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8000b2c <ledFSM_update+0x124>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d06f      	beq.n	8000b14 <ledFSM_update+0x10c>
			{
				aux_cantBlink = _cantBlink;
 8000a34:	4b3e      	ldr	r3, [pc, #248]	@ (8000b30 <ledFSM_update+0x128>)
 8000a36:	781a      	ldrb	r2, [r3, #0]
 8000a38:	4b3e      	ldr	r3, [pc, #248]	@ (8000b34 <ledFSM_update+0x12c>)
 8000a3a:	701a      	strb	r2, [r3, #0]
				delayWrite(&delay_led, _onTime);
 8000a3c:	4b3e      	ldr	r3, [pc, #248]	@ (8000b38 <ledFSM_update+0x130>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	483e      	ldr	r0, [pc, #248]	@ (8000b3c <ledFSM_update+0x134>)
 8000a44:	f7ff ff56 	bl	80008f4 <delayWrite>
				delayRead(&delay_led);
 8000a48:	483c      	ldr	r0, [pc, #240]	@ (8000b3c <ledFSM_update+0x134>)
 8000a4a:	f7ff ff0f 	bl	800086c <delayRead>

				led_On();
 8000a4e:	f7ff ff7d 	bl	800094c <led_On>
				setState(LED_ON);
 8000a52:	2001      	movs	r0, #1
 8000a54:	f7ff ff6a 	bl	800092c <setState>
			}
			break;
 8000a58:	e05c      	b.n	8000b14 <ledFSM_update+0x10c>
		}

		case LED_ON:
		{
			if(delayRead(&delay_led))
 8000a5a:	4838      	ldr	r0, [pc, #224]	@ (8000b3c <ledFSM_update+0x134>)
 8000a5c:	f7ff ff06 	bl	800086c <delayRead>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d058      	beq.n	8000b18 <ledFSM_update+0x110>
			{
				aux_cantBlink--;
 8000a66:	4b33      	ldr	r3, [pc, #204]	@ (8000b34 <ledFSM_update+0x12c>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b31      	ldr	r3, [pc, #196]	@ (8000b34 <ledFSM_update+0x12c>)
 8000a70:	701a      	strb	r2, [r3, #0]
				if(aux_cantBlink > 0)
 8000a72:	4b30      	ldr	r3, [pc, #192]	@ (8000b34 <ledFSM_update+0x12c>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d00b      	beq.n	8000a92 <ledFSM_update+0x8a>
				{
					delayWrite(&delay_led, _offTimeShort);
 8000a7a:	4b31      	ldr	r3, [pc, #196]	@ (8000b40 <ledFSM_update+0x138>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4619      	mov	r1, r3
 8000a80:	482e      	ldr	r0, [pc, #184]	@ (8000b3c <ledFSM_update+0x134>)
 8000a82:	f7ff ff37 	bl	80008f4 <delayWrite>
					led_Off();
 8000a86:	f7ff ff71 	bl	800096c <led_Off>
					setState(LED_OFF_SHORT);
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f7ff ff4e 	bl	800092c <setState>
						led_Off();
						setState(LED_OFF);
					}
				}
			}
			break;
 8000a90:	e042      	b.n	8000b18 <ledFSM_update+0x110>
					aux_cantBlink = _cantBlink;
 8000a92:	4b27      	ldr	r3, [pc, #156]	@ (8000b30 <ledFSM_update+0x128>)
 8000a94:	781a      	ldrb	r2, [r3, #0]
 8000a96:	4b27      	ldr	r3, [pc, #156]	@ (8000b34 <ledFSM_update+0x12c>)
 8000a98:	701a      	strb	r2, [r3, #0]
					if(_running == LED_BLINK_FOREVER)
 8000a9a:	4b24      	ldr	r3, [pc, #144]	@ (8000b2c <ledFSM_update+0x124>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d10b      	bne.n	8000aba <ledFSM_update+0xb2>
						delayWrite(&delay_led, _offTimeLong);
 8000aa2:	4b28      	ldr	r3, [pc, #160]	@ (8000b44 <ledFSM_update+0x13c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4824      	ldr	r0, [pc, #144]	@ (8000b3c <ledFSM_update+0x134>)
 8000aaa:	f7ff ff23 	bl	80008f4 <delayWrite>
						led_Off();
 8000aae:	f7ff ff5d 	bl	800096c <led_Off>
						setState(LED_OFF_LONG);
 8000ab2:	2003      	movs	r0, #3
 8000ab4:	f7ff ff3a 	bl	800092c <setState>
			break;
 8000ab8:	e02e      	b.n	8000b18 <ledFSM_update+0x110>
						_running = LED_STOP;
 8000aba:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <ledFSM_update+0x124>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
						led_Off();
 8000ac0:	f7ff ff54 	bl	800096c <led_Off>
						setState(LED_OFF);
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f7ff ff31 	bl	800092c <setState>
			break;
 8000aca:	e025      	b.n	8000b18 <ledFSM_update+0x110>
		}

		case LED_OFF_SHORT:
		{
			if(delayRead(&delay_led))
 8000acc:	481b      	ldr	r0, [pc, #108]	@ (8000b3c <ledFSM_update+0x134>)
 8000ace:	f7ff fecd 	bl	800086c <delayRead>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d021      	beq.n	8000b1c <ledFSM_update+0x114>
			{
				delayWrite(&delay_led, _onTime);
 8000ad8:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <ledFSM_update+0x130>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4619      	mov	r1, r3
 8000ade:	4817      	ldr	r0, [pc, #92]	@ (8000b3c <ledFSM_update+0x134>)
 8000ae0:	f7ff ff08 	bl	80008f4 <delayWrite>
				led_On();
 8000ae4:	f7ff ff32 	bl	800094c <led_On>
				setState(LED_ON);
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f7ff ff1f 	bl	800092c <setState>
			}
			break;
 8000aee:	e015      	b.n	8000b1c <ledFSM_update+0x114>
		}

		case LED_OFF_LONG:
		{
			if(delayRead(&delay_led))
 8000af0:	4812      	ldr	r0, [pc, #72]	@ (8000b3c <ledFSM_update+0x134>)
 8000af2:	f7ff febb 	bl	800086c <delayRead>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d011      	beq.n	8000b20 <ledFSM_update+0x118>
			{
				delayWrite(&delay_led, _onTime);
 8000afc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <ledFSM_update+0x130>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4619      	mov	r1, r3
 8000b02:	480e      	ldr	r0, [pc, #56]	@ (8000b3c <ledFSM_update+0x134>)
 8000b04:	f7ff fef6 	bl	80008f4 <delayWrite>
				led_On();
 8000b08:	f7ff ff20 	bl	800094c <led_On>
				setState(LED_ON);
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f7ff ff0d 	bl	800092c <setState>
			}
			break;
 8000b12:	e005      	b.n	8000b20 <ledFSM_update+0x118>
			break;
 8000b14:	bf00      	nop
 8000b16:	e004      	b.n	8000b22 <ledFSM_update+0x11a>
			break;
 8000b18:	bf00      	nop
 8000b1a:	e002      	b.n	8000b22 <ledFSM_update+0x11a>
			break;
 8000b1c:	bf00      	nop
 8000b1e:	e000      	b.n	8000b22 <ledFSM_update+0x11a>
			break;
 8000b20:	bf00      	nop
		}
	}
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000c6 	.word	0x200000c6
 8000b2c:	200000c5 	.word	0x200000c5
 8000b30:	200000c4 	.word	0x200000c4
 8000b34:	200000d4 	.word	0x200000d4
 8000b38:	200000b8 	.word	0x200000b8
 8000b3c:	200000c8 	.word	0x200000c8
 8000b40:	200000c0 	.word	0x200000c0
 8000b44:	200000bc 	.word	0x200000bc

08000b48 <ledStart>:
/**
  * @brief  Start led
  * @param	running: tipo de blinkeo que se quiere activar
  */
void ledStart(running_t running)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
	_running = running;
 8000b52:	4a04      	ldr	r2, [pc, #16]	@ (8000b64 <ledStart+0x1c>)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	7013      	strb	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	200000c5 	.word	0x200000c5

08000b68 <uartInit>:
 * paridad, control de flujo y modo de operación.
 *
 * @return true si la inicialización fue exitosa, false en caso contrario.
 */
bool_t uartInit()
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef uartRet;

	uartHandler.Instance = USART2;
 8000b6e:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <uartInit+0x58>)
 8000b70:	4a14      	ldr	r2, [pc, #80]	@ (8000bc4 <uartInit+0x5c>)
 8000b72:	601a      	str	r2, [r3, #0]
	uartHandler.Init.BaudRate = 115200;
 8000b74:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <uartInit+0x58>)
 8000b76:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b7a:	605a      	str	r2, [r3, #4]
	uartHandler.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7c:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <uartInit+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
	uartHandler.Init.StopBits = UART_STOPBITS_1;
 8000b82:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <uartInit+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
	uartHandler.Init.Parity = UART_PARITY_NONE;
 8000b88:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc0 <uartInit+0x58>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
	uartHandler.Init.Mode = UART_MODE_TX_RX;
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <uartInit+0x58>)
 8000b90:	220c      	movs	r2, #12
 8000b92:	615a      	str	r2, [r3, #20]
	uartHandler.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b94:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc0 <uartInit+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
	uartHandler.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9a:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <uartInit+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	61da      	str	r2, [r3, #28]

	uartRet = HAL_UART_Init(&uartHandler);
 8000ba0:	4807      	ldr	r0, [pc, #28]	@ (8000bc0 <uartInit+0x58>)
 8000ba2:	f003 fc7b 	bl	800449c <HAL_UART_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]

	if(uartRet == HAL_OK) return true;
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d101      	bne.n	8000bb4 <uartInit+0x4c>
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e000      	b.n	8000bb6 <uartInit+0x4e>
	else return false;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200000d8 	.word	0x200000d8
 8000bc4:	40004400 	.word	0x40004400

08000bc8 <uartSendString>:
 *
 * @param pstring Puntero a la cadena de caracteres a enviar.
 * @return true si la transmisión fue exitosa, false si falló o si el puntero es NULL.
 */
bool_t uartSendString(uint8_t * pstring)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	if(pstring == NULL)	return false;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d101      	bne.n	8000bda <uartSendString+0x12>
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e012      	b.n	8000c00 <uartSendString+0x38>
	HAL_StatusTypeDef uartRet = HAL_UART_Transmit(&uartHandler, pstring, strlen((const char *)pstring), UART_TIMEOUT);
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff fb18 	bl	8000210 <strlen>
 8000be0:	4603      	mov	r3, r0
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000be8:	6879      	ldr	r1, [r7, #4]
 8000bea:	4807      	ldr	r0, [pc, #28]	@ (8000c08 <uartSendString+0x40>)
 8000bec:	f003 fca6 	bl	800453c <HAL_UART_Transmit>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	73fb      	strb	r3, [r7, #15]
	if(uartRet == HAL_OK) return true;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d101      	bne.n	8000bfe <uartSendString+0x36>
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e000      	b.n	8000c00 <uartSendString+0x38>
	else return false;
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200000d8 	.word	0x200000d8

08000c0c <setMainState>:
/**
  * @brief  Funcion para cambiar el estado de main FSM
  * @param	state: nuevo estado
  */
static void setMainState(mainState_t state)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
	current_state = state;
 8000c16:	4a04      	ldr	r2, [pc, #16]	@ (8000c28 <setMainState+0x1c>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	7013      	strb	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	200003d8 	.word	0x200003d8

08000c2c <mainFSM_init>:

/**
  * @brief  main FSM init
  */
void mainFSM_init()
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af02      	add	r7, sp, #8
	ledInit(LD2_GPIO_Port, LD2_Pin, LED_ON_TIME, LED_OFF_LONG_TIME, LED_OFF_SHORT_TIME, LED_CANT_BLINK);
 8000c32:	2302      	movs	r3, #2
 8000c34:	9301      	str	r3, [sp, #4]
 8000c36:	23c8      	movs	r3, #200	@ 0xc8
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000c3e:	22c8      	movs	r2, #200	@ 0xc8
 8000c40:	2120      	movs	r1, #32
 8000c42:	481e      	ldr	r0, [pc, #120]	@ (8000cbc <mainFSM_init+0x90>)
 8000c44:	f7ff fea2 	bl	800098c <ledInit>
	uartInit();
 8000c48:	f7ff ff8e 	bl	8000b68 <uartInit>
	debounceFSM_init(B1_GPIO_Port, B1_Pin);
 8000c4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c50:	481b      	ldr	r0, [pc, #108]	@ (8000cc0 <mainFSM_init+0x94>)
 8000c52:	f7ff fd23 	bl	800069c <debounceFSM_init>
	uartSendString((uint8_t*)"SHT30 | Iniciando SHT30 driver...\n\r");
 8000c56:	481b      	ldr	r0, [pc, #108]	@ (8000cc4 <mainFSM_init+0x98>)
 8000c58:	f7ff ffb6 	bl	8000bc8 <uartSendString>

	SHT30_init(SHT30_CLOCK_STREACHING, SHT30_REPEATABILITY_HIGH);
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f004 fae3 	bl	800522a <SHT30_init>
	uartSendString((uint8_t*)"SHT30 | Iniciado\n\r");
 8000c64:	4818      	ldr	r0, [pc, #96]	@ (8000cc8 <mainFSM_init+0x9c>)
 8000c66:	f7ff ffaf 	bl	8000bc8 <uartSendString>

	uartSendString((uint8_t*)"SDCard | Iniciando SDCard driver...\n\r");
 8000c6a:	4818      	ldr	r0, [pc, #96]	@ (8000ccc <mainFSM_init+0xa0>)
 8000c6c:	f7ff ffac 	bl	8000bc8 <uartSendString>
	if (SD_init() != SD_OK)
 8000c70:	f004 f884 	bl	8004d7c <SD_init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d002      	beq.n	8000c80 <mainFSM_init+0x54>
	{
		uartSendString((uint8_t*)"SDCard | ERROR: Fallo inicio de SDCard driver!\n\r");
 8000c7a:	4815      	ldr	r0, [pc, #84]	@ (8000cd0 <mainFSM_init+0xa4>)
 8000c7c:	f7ff ffa4 	bl	8000bc8 <uartSendString>
	}

	if (SD_read(SD_SAVE_DIRECTION, sd_rwbuffer) == SD_OK)
 8000c80:	4914      	ldr	r1, [pc, #80]	@ (8000cd4 <mainFSM_init+0xa8>)
 8000c82:	2000      	movs	r0, #0
 8000c84:	f004 f898 	bl	8004db8 <SD_read>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d107      	bne.n	8000c9e <mainFSM_init+0x72>
	{
		memcpy(&data, sd_rwbuffer, sizeof(Temp_data));
 8000c8e:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <mainFSM_init+0xac>)
 8000c90:	4a10      	ldr	r2, [pc, #64]	@ (8000cd4 <mainFSM_init+0xa8>)
 8000c92:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		uartSendString((uint8_t*)"SDCard | Lectura OK!\n\r");
 8000c98:	4810      	ldr	r0, [pc, #64]	@ (8000cdc <mainFSM_init+0xb0>)
 8000c9a:	f7ff ff95 	bl	8000bc8 <uartSendString>
	}

	delayInit(&delay_measure, DELAY_MEASURE);
 8000c9e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000ca2:	480f      	ldr	r0, [pc, #60]	@ (8000ce0 <mainFSM_init+0xb4>)
 8000ca4:	f7ff fdc4 	bl	8000830 <delayInit>
	delayRead(&delay_measure);
 8000ca8:	480d      	ldr	r0, [pc, #52]	@ (8000ce0 <mainFSM_init+0xb4>)
 8000caa:	f7ff fddf 	bl	800086c <delayRead>
	current_state = IDLE;
 8000cae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce4 <mainFSM_init+0xb8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40020000 	.word	0x40020000
 8000cc0:	40020800 	.word	0x40020800
 8000cc4:	0800683c 	.word	0x0800683c
 8000cc8:	08006860 	.word	0x08006860
 8000ccc:	08006874 	.word	0x08006874
 8000cd0:	0800689c 	.word	0x0800689c
 8000cd4:	200001cc 	.word	0x200001cc
 8000cd8:	200003cc 	.word	0x200003cc
 8000cdc:	080068d0 	.word	0x080068d0
 8000ce0:	200003dc 	.word	0x200003dc
 8000ce4:	200003d8 	.word	0x200003d8

08000ce8 <mainFSM_update>:
/**
  * @brief  main FSM update
  * @param	button: Estado de la key del boton leido con readKey()
  */
void mainFSM_update(keyState_t button)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af02      	add	r7, sp, #8
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
	static float lastTemp, lastHum;
	switch(current_state)
 8000cf2:	4b87      	ldr	r3, [pc, #540]	@ (8000f10 <mainFSM_update+0x228>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	f000 80ec 	beq.w	8000ed4 <mainFSM_update+0x1ec>
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	f300 8102 	bgt.w	8000f06 <mainFSM_update+0x21e>
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d003      	beq.n	8000d0e <mainFSM_update+0x26>
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	f000 8084 	beq.w	8000e14 <mainFSM_update+0x12c>
			delayRead(&delay_measure); // reset delay
			setMainState(IDLE);
			break;
		}
	}
}
 8000d0c:	e0fb      	b.n	8000f06 <mainFSM_update+0x21e>
			if(delayRead(&delay_measure))
 8000d0e:	4881      	ldr	r0, [pc, #516]	@ (8000f14 <mainFSM_update+0x22c>)
 8000d10:	f7ff fdac 	bl	800086c <delayRead>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d067      	beq.n	8000dea <mainFSM_update+0x102>
				ledStart(LED_BLINK_ONCE);
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f7ff ff14 	bl	8000b48 <ledStart>
				SHT30_readTemperatureAndHumidity(&lastTemp, &lastHum);
 8000d20:	497d      	ldr	r1, [pc, #500]	@ (8000f18 <mainFSM_update+0x230>)
 8000d22:	487e      	ldr	r0, [pc, #504]	@ (8000f1c <mainFSM_update+0x234>)
 8000d24:	f004 fab2 	bl	800528c <SHT30_readTemperatureAndHumidity>
				sprintf(to_print, "SHT30 | Leido:   Temp = %d,%d °C   Hum = %d %%\n\r", (int)lastTemp, (int)((lastTemp - (int)lastTemp) * 10) % 10, (int)lastHum);
 8000d28:	4b7c      	ldr	r3, [pc, #496]	@ (8000f1c <mainFSM_update+0x234>)
 8000d2a:	edd3 7a00 	vldr	s15, [r3]
 8000d2e:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8000d32:	4b7a      	ldr	r3, [pc, #488]	@ (8000f1c <mainFSM_update+0x234>)
 8000d34:	ed93 7a00 	vldr	s14, [r3]
 8000d38:	4b78      	ldr	r3, [pc, #480]	@ (8000f1c <mainFSM_update+0x234>)
 8000d3a:	edd3 7a00 	vldr	s15, [r3]
 8000d3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d4a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000d4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d56:	ee17 1a90 	vmov	r1, s15
 8000d5a:	4b71      	ldr	r3, [pc, #452]	@ (8000f20 <mainFSM_update+0x238>)
 8000d5c:	fb83 2301 	smull	r2, r3, r3, r1
 8000d60:	109a      	asrs	r2, r3, #2
 8000d62:	17cb      	asrs	r3, r1, #31
 8000d64:	1ad2      	subs	r2, r2, r3
 8000d66:	4613      	mov	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4413      	add	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	1aca      	subs	r2, r1, r3
 8000d70:	4b69      	ldr	r3, [pc, #420]	@ (8000f18 <mainFSM_update+0x230>)
 8000d72:	edd3 7a00 	vldr	s15, [r3]
 8000d76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d7a:	ee17 3a90 	vmov	r3, s15
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	4613      	mov	r3, r2
 8000d82:	ee16 2a90 	vmov	r2, s13
 8000d86:	4967      	ldr	r1, [pc, #412]	@ (8000f24 <mainFSM_update+0x23c>)
 8000d88:	4867      	ldr	r0, [pc, #412]	@ (8000f28 <mainFSM_update+0x240>)
 8000d8a:	f004 fc8f 	bl	80056ac <siprintf>
				uartSendString((uint8_t*)to_print);
 8000d8e:	4866      	ldr	r0, [pc, #408]	@ (8000f28 <mainFSM_update+0x240>)
 8000d90:	f7ff ff1a 	bl	8000bc8 <uartSendString>
				data.sum_T+=lastTemp;
 8000d94:	4b65      	ldr	r3, [pc, #404]	@ (8000f2c <mainFSM_update+0x244>)
 8000d96:	ed93 7a00 	vldr	s14, [r3]
 8000d9a:	4b60      	ldr	r3, [pc, #384]	@ (8000f1c <mainFSM_update+0x234>)
 8000d9c:	edd3 7a00 	vldr	s15, [r3]
 8000da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000da4:	4b61      	ldr	r3, [pc, #388]	@ (8000f2c <mainFSM_update+0x244>)
 8000da6:	edc3 7a00 	vstr	s15, [r3]
				data.sum_H+=lastHum;
 8000daa:	4b60      	ldr	r3, [pc, #384]	@ (8000f2c <mainFSM_update+0x244>)
 8000dac:	ed93 7a01 	vldr	s14, [r3, #4]
 8000db0:	4b59      	ldr	r3, [pc, #356]	@ (8000f18 <mainFSM_update+0x230>)
 8000db2:	edd3 7a00 	vldr	s15, [r3]
 8000db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dba:	4b5c      	ldr	r3, [pc, #368]	@ (8000f2c <mainFSM_update+0x244>)
 8000dbc:	edc3 7a01 	vstr	s15, [r3, #4]
				data.cont++;
 8000dc0:	4b5a      	ldr	r3, [pc, #360]	@ (8000f2c <mainFSM_update+0x244>)
 8000dc2:	891b      	ldrh	r3, [r3, #8]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b58      	ldr	r3, [pc, #352]	@ (8000f2c <mainFSM_update+0x244>)
 8000dca:	811a      	strh	r2, [r3, #8]
				memset(sd_rwbuffer, 0xFF, sizeof(sd_rwbuffer));
 8000dcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dd0:	21ff      	movs	r1, #255	@ 0xff
 8000dd2:	4857      	ldr	r0, [pc, #348]	@ (8000f30 <mainFSM_update+0x248>)
 8000dd4:	f004 fccf 	bl	8005776 <memset>
				memcpy(sd_rwbuffer, &data, sizeof(Temp_data));
 8000dd8:	4b55      	ldr	r3, [pc, #340]	@ (8000f30 <mainFSM_update+0x248>)
 8000dda:	4a54      	ldr	r2, [pc, #336]	@ (8000f2c <mainFSM_update+0x244>)
 8000ddc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				SD_write(SD_SAVE_DIRECTION, sd_rwbuffer);
 8000de2:	4953      	ldr	r1, [pc, #332]	@ (8000f30 <mainFSM_update+0x248>)
 8000de4:	2000      	movs	r0, #0
 8000de6:	f004 f839 	bl	8004e5c <SD_write>
			switch(button)
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d00b      	beq.n	8000e08 <mainFSM_update+0x120>
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	f300 8087 	bgt.w	8000f04 <mainFSM_update+0x21c>
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d00a      	beq.n	8000e10 <mainFSM_update+0x128>
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d000      	beq.n	8000e00 <mainFSM_update+0x118>
			break;
 8000dfe:	e081      	b.n	8000f04 <mainFSM_update+0x21c>
				case KEY_SINGLE_PRESS: setMainState(SHOW_DATA); break;
 8000e00:	2001      	movs	r0, #1
 8000e02:	f7ff ff03 	bl	8000c0c <setMainState>
 8000e06:	e004      	b.n	8000e12 <mainFSM_update+0x12a>
				case KEY_LONG_PRESS: setMainState(RESET_DATA); break;
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f7ff feff 	bl	8000c0c <setMainState>
 8000e0e:	e000      	b.n	8000e12 <mainFSM_update+0x12a>
				case KEY_NO_PRESS: break;
 8000e10:	bf00      	nop
			break;
 8000e12:	e077      	b.n	8000f04 <mainFSM_update+0x21c>
			float promTemp = data.sum_T/data.cont;
 8000e14:	4b45      	ldr	r3, [pc, #276]	@ (8000f2c <mainFSM_update+0x244>)
 8000e16:	edd3 6a00 	vldr	s13, [r3]
 8000e1a:	4b44      	ldr	r3, [pc, #272]	@ (8000f2c <mainFSM_update+0x244>)
 8000e1c:	891b      	ldrh	r3, [r3, #8]
 8000e1e:	ee07 3a90 	vmov	s15, r3
 8000e22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e2a:	edc7 7a03 	vstr	s15, [r7, #12]
			float promHum = data.sum_H/data.cont;
 8000e2e:	4b3f      	ldr	r3, [pc, #252]	@ (8000f2c <mainFSM_update+0x244>)
 8000e30:	edd3 6a01 	vldr	s13, [r3, #4]
 8000e34:	4b3d      	ldr	r3, [pc, #244]	@ (8000f2c <mainFSM_update+0x244>)
 8000e36:	891b      	ldrh	r3, [r3, #8]
 8000e38:	ee07 3a90 	vmov	s15, r3
 8000e3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e44:	edc7 7a02 	vstr	s15, [r7, #8]
			uartSendString((uint8_t*)"=============================\n\r");
 8000e48:	483a      	ldr	r0, [pc, #232]	@ (8000f34 <mainFSM_update+0x24c>)
 8000e4a:	f7ff febd 	bl	8000bc8 <uartSendString>
			sprintf(to_print, "SHT30 | Valor promedio (%d muestras):\n\r",data.cont);
 8000e4e:	4b37      	ldr	r3, [pc, #220]	@ (8000f2c <mainFSM_update+0x244>)
 8000e50:	891b      	ldrh	r3, [r3, #8]
 8000e52:	461a      	mov	r2, r3
 8000e54:	4938      	ldr	r1, [pc, #224]	@ (8000f38 <mainFSM_update+0x250>)
 8000e56:	4834      	ldr	r0, [pc, #208]	@ (8000f28 <mainFSM_update+0x240>)
 8000e58:	f004 fc28 	bl	80056ac <siprintf>
			uartSendString((uint8_t*)to_print);
 8000e5c:	4832      	ldr	r0, [pc, #200]	@ (8000f28 <mainFSM_update+0x240>)
 8000e5e:	f7ff feb3 	bl	8000bc8 <uartSendString>
			sprintf(to_print, "SHT30 | Temperatura = %d,%d °C\n\rSHT30 | Humedad = %d %%\n\r", (int)promTemp, (int)((promTemp - (int)promTemp) * 10) % 10, (int)promHum);
 8000e62:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e66:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8000e6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e76:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e7e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000e82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e8a:	ee17 1a90 	vmov	r1, s15
 8000e8e:	4b24      	ldr	r3, [pc, #144]	@ (8000f20 <mainFSM_update+0x238>)
 8000e90:	fb83 2301 	smull	r2, r3, r3, r1
 8000e94:	109a      	asrs	r2, r3, #2
 8000e96:	17cb      	asrs	r3, r1, #31
 8000e98:	1ad2      	subs	r2, r2, r3
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	4413      	add	r3, r2
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	1aca      	subs	r2, r1, r3
 8000ea4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eac:	ee17 3a90 	vmov	r3, s15
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	ee16 2a90 	vmov	r2, s13
 8000eb8:	4920      	ldr	r1, [pc, #128]	@ (8000f3c <mainFSM_update+0x254>)
 8000eba:	481b      	ldr	r0, [pc, #108]	@ (8000f28 <mainFSM_update+0x240>)
 8000ebc:	f004 fbf6 	bl	80056ac <siprintf>
			uartSendString((uint8_t*)to_print);
 8000ec0:	4819      	ldr	r0, [pc, #100]	@ (8000f28 <mainFSM_update+0x240>)
 8000ec2:	f7ff fe81 	bl	8000bc8 <uartSendString>
			uartSendString((uint8_t*)"=============================\n\r");
 8000ec6:	481b      	ldr	r0, [pc, #108]	@ (8000f34 <mainFSM_update+0x24c>)
 8000ec8:	f7ff fe7e 	bl	8000bc8 <uartSendString>
			setMainState(IDLE);
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff fe9d 	bl	8000c0c <setMainState>
			break;
 8000ed2:	e018      	b.n	8000f06 <mainFSM_update+0x21e>
			uartSendString((uint8_t*)"DATA RESET\n\r");
 8000ed4:	481a      	ldr	r0, [pc, #104]	@ (8000f40 <mainFSM_update+0x258>)
 8000ed6:	f7ff fe77 	bl	8000bc8 <uartSendString>
			data.sum_T = 0;
 8000eda:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <mainFSM_update+0x244>)
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
			data.sum_H = 0;
 8000ee2:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <mainFSM_update+0x244>)
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	605a      	str	r2, [r3, #4]
			data.cont = 0;
 8000eea:	4b10      	ldr	r3, [pc, #64]	@ (8000f2c <mainFSM_update+0x244>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	811a      	strh	r2, [r3, #8]
			SD_erase(SD_SAVE_DIRECTION);
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f004 f801 	bl	8004ef8 <SD_erase>
			delayRead(&delay_measure); // reset delay
 8000ef6:	4807      	ldr	r0, [pc, #28]	@ (8000f14 <mainFSM_update+0x22c>)
 8000ef8:	f7ff fcb8 	bl	800086c <delayRead>
			setMainState(IDLE);
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff fe85 	bl	8000c0c <setMainState>
			break;
 8000f02:	e000      	b.n	8000f06 <mainFSM_update+0x21e>
			break;
 8000f04:	bf00      	nop
}
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200003d8 	.word	0x200003d8
 8000f14:	200003dc 	.word	0x200003dc
 8000f18:	20000450 	.word	0x20000450
 8000f1c:	2000044c 	.word	0x2000044c
 8000f20:	66666667 	.word	0x66666667
 8000f24:	080068e8 	.word	0x080068e8
 8000f28:	200003e8 	.word	0x200003e8
 8000f2c:	200003cc 	.word	0x200003cc
 8000f30:	200001cc 	.word	0x200001cc
 8000f34:	0800691c 	.word	0x0800691c
 8000f38:	0800693c 	.word	0x0800693c
 8000f3c:	08006964 	.word	0x08006964
 8000f40:	080069a0 	.word	0x080069a0

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f48:	f000 fbb2 	bl	80016b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4c:	f000 f820 	bl	8000f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f50:	f000 f8f0 	bl	8001134 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f54:	f000 f88a 	bl	800106c <MX_I2C1_Init>
  MX_SPI2_Init();
 8000f58:	f000 f8b6 	bl	80010c8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f62:	480a      	ldr	r0, [pc, #40]	@ (8000f8c <main+0x48>)
 8000f64:	f000 fecc 	bl	8001d00 <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 8000f68:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f6c:	f000 fc12 	bl	8001794 <HAL_Delay>

  mainFSM_init();
 8000f70:	f7ff fe5c 	bl	8000c2c <mainFSM_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ledFSM_update();
 8000f74:	f7ff fd48 	bl	8000a08 <ledFSM_update>
	  debounceFSM_update();
 8000f78:	f7ff fbb6 	bl	80006e8 <debounceFSM_update>
	  mainFSM_update(readKey());
 8000f7c:	f7ff fc42 	bl	8000804 <readKey>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff feb0 	bl	8000ce8 <mainFSM_update>
	  ledFSM_update();
 8000f88:	bf00      	nop
 8000f8a:	e7f3      	b.n	8000f74 <main+0x30>
 8000f8c:	40020400 	.word	0x40020400

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b094      	sub	sp, #80	@ 0x50
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	2234      	movs	r2, #52	@ 0x34
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f004 fbe9 	bl	8005776 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	4b2a      	ldr	r3, [pc, #168]	@ (8001064 <SystemClock_Config+0xd4>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbc:	4a29      	ldr	r2, [pc, #164]	@ (8001064 <SystemClock_Config+0xd4>)
 8000fbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc4:	4b27      	ldr	r3, [pc, #156]	@ (8001064 <SystemClock_Config+0xd4>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	603b      	str	r3, [r7, #0]
 8000fd4:	4b24      	ldr	r3, [pc, #144]	@ (8001068 <SystemClock_Config+0xd8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fdc:	4a22      	ldr	r2, [pc, #136]	@ (8001068 <SystemClock_Config+0xd8>)
 8000fde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	4b20      	ldr	r3, [pc, #128]	@ (8001068 <SystemClock_Config+0xd8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff8:	2310      	movs	r3, #16
 8000ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001000:	2300      	movs	r3, #0
 8001002:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001004:	2310      	movs	r3, #16
 8001006:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001008:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800100c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800100e:	2304      	movs	r3, #4
 8001010:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001012:	2302      	movs	r3, #2
 8001014:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001016:	2302      	movs	r3, #2
 8001018:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4618      	mov	r0, r3
 8001020:	f002 f9cc 	bl	80033bc <HAL_RCC_OscConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800102a:	f000 f909 	bl	8001240 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102e:	230f      	movs	r3, #15
 8001030:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001032:	2302      	movs	r3, #2
 8001034:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800103a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800103e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001044:	f107 0308 	add.w	r3, r7, #8
 8001048:	2102      	movs	r1, #2
 800104a:	4618      	mov	r0, r3
 800104c:	f001 fe6c 	bl	8002d28 <HAL_RCC_ClockConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001056:	f000 f8f3 	bl	8001240 <Error_Handler>
  }
}
 800105a:	bf00      	nop
 800105c:	3750      	adds	r7, #80	@ 0x50
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800
 8001068:	40007000 	.word	0x40007000

0800106c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001070:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <MX_I2C1_Init+0x50>)
 8001072:	4a13      	ldr	r2, [pc, #76]	@ (80010c0 <MX_I2C1_Init+0x54>)
 8001074:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001076:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <MX_I2C1_Init+0x50>)
 8001078:	4a12      	ldr	r2, [pc, #72]	@ (80010c4 <MX_I2C1_Init+0x58>)
 800107a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800107c:	4b0f      	ldr	r3, [pc, #60]	@ (80010bc <MX_I2C1_Init+0x50>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001082:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <MX_I2C1_Init+0x50>)
 8001084:	2200      	movs	r2, #0
 8001086:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001088:	4b0c      	ldr	r3, [pc, #48]	@ (80010bc <MX_I2C1_Init+0x50>)
 800108a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800108e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001090:	4b0a      	ldr	r3, [pc, #40]	@ (80010bc <MX_I2C1_Init+0x50>)
 8001092:	2200      	movs	r2, #0
 8001094:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001096:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <MX_I2C1_Init+0x50>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800109c:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <MX_I2C1_Init+0x50>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010a2:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <MX_I2C1_Init+0x50>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010a8:	4804      	ldr	r0, [pc, #16]	@ (80010bc <MX_I2C1_Init+0x50>)
 80010aa:	f000 fe43 	bl	8001d34 <HAL_I2C_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010b4:	f000 f8c4 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000120 	.word	0x20000120
 80010c0:	40005400 	.word	0x40005400
 80010c4:	000186a0 	.word	0x000186a0

080010c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010cc:	4b17      	ldr	r3, [pc, #92]	@ (800112c <MX_SPI2_Init+0x64>)
 80010ce:	4a18      	ldr	r2, [pc, #96]	@ (8001130 <MX_SPI2_Init+0x68>)
 80010d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010d2:	4b16      	ldr	r3, [pc, #88]	@ (800112c <MX_SPI2_Init+0x64>)
 80010d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010da:	4b14      	ldr	r3, [pc, #80]	@ (800112c <MX_SPI2_Init+0x64>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <MX_SPI2_Init+0x64>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <MX_SPI2_Init+0x64>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <MX_SPI2_Init+0x64>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <MX_SPI2_Init+0x64>)
 80010f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80010fa:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <MX_SPI2_Init+0x64>)
 80010fc:	2228      	movs	r2, #40	@ 0x28
 80010fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001100:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <MX_SPI2_Init+0x64>)
 8001102:	2200      	movs	r2, #0
 8001104:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001106:	4b09      	ldr	r3, [pc, #36]	@ (800112c <MX_SPI2_Init+0x64>)
 8001108:	2200      	movs	r2, #0
 800110a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800110c:	4b07      	ldr	r3, [pc, #28]	@ (800112c <MX_SPI2_Init+0x64>)
 800110e:	2200      	movs	r2, #0
 8001110:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <MX_SPI2_Init+0x64>)
 8001114:	220a      	movs	r2, #10
 8001116:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001118:	4804      	ldr	r0, [pc, #16]	@ (800112c <MX_SPI2_Init+0x64>)
 800111a:	f002 fbed 	bl	80038f8 <HAL_SPI_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001124:	f000 f88c 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000174 	.word	0x20000174
 8001130:	40003800 	.word	0x40003800

08001134 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	@ 0x28
 8001138:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	4b38      	ldr	r3, [pc, #224]	@ (8001230 <MX_GPIO_Init+0xfc>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a37      	ldr	r2, [pc, #220]	@ (8001230 <MX_GPIO_Init+0xfc>)
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b35      	ldr	r3, [pc, #212]	@ (8001230 <MX_GPIO_Init+0xfc>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b31      	ldr	r3, [pc, #196]	@ (8001230 <MX_GPIO_Init+0xfc>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a30      	ldr	r2, [pc, #192]	@ (8001230 <MX_GPIO_Init+0xfc>)
 8001170:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b2e      	ldr	r3, [pc, #184]	@ (8001230 <MX_GPIO_Init+0xfc>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	4b2a      	ldr	r3, [pc, #168]	@ (8001230 <MX_GPIO_Init+0xfc>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a29      	ldr	r2, [pc, #164]	@ (8001230 <MX_GPIO_Init+0xfc>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b27      	ldr	r3, [pc, #156]	@ (8001230 <MX_GPIO_Init+0xfc>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	4b23      	ldr	r3, [pc, #140]	@ (8001230 <MX_GPIO_Init+0xfc>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a22      	ldr	r2, [pc, #136]	@ (8001230 <MX_GPIO_Init+0xfc>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b20      	ldr	r3, [pc, #128]	@ (8001230 <MX_GPIO_Init+0xfc>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2120      	movs	r1, #32
 80011be:	481d      	ldr	r0, [pc, #116]	@ (8001234 <MX_GPIO_Init+0x100>)
 80011c0:	f000 fd9e 	bl	8001d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011ca:	481b      	ldr	r0, [pc, #108]	@ (8001238 <MX_GPIO_Init+0x104>)
 80011cc:	f000 fd98 	bl	8001d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011d6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	4815      	ldr	r0, [pc, #84]	@ (800123c <MX_GPIO_Init+0x108>)
 80011e8:	f000 fbde 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011ec:	2320      	movs	r3, #32
 80011ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	480c      	ldr	r0, [pc, #48]	@ (8001234 <MX_GPIO_Init+0x100>)
 8001204:	f000 fbd0 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001208:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120e:	2301      	movs	r3, #1
 8001210:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	4805      	ldr	r0, [pc, #20]	@ (8001238 <MX_GPIO_Init+0x104>)
 8001222:	f000 fbc1 	bl	80019a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001226:	bf00      	nop
 8001228:	3728      	adds	r7, #40	@ 0x28
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800
 8001234:	40020000 	.word	0x40020000
 8001238:	40020400 	.word	0x40020400
 800123c:	40020800 	.word	0x40020800

08001240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001244:	b672      	cpsid	i
}
 8001246:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <Error_Handler+0x8>

0800124c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <HAL_MspInit+0x4c>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125a:	4a0f      	ldr	r2, [pc, #60]	@ (8001298 <HAL_MspInit+0x4c>)
 800125c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001260:	6453      	str	r3, [r2, #68]	@ 0x44
 8001262:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <HAL_MspInit+0x4c>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001266:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <HAL_MspInit+0x4c>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001276:	4a08      	ldr	r2, [pc, #32]	@ (8001298 <HAL_MspInit+0x4c>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800127c:	6413      	str	r3, [r2, #64]	@ 0x40
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_MspInit+0x4c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800128a:	2007      	movs	r0, #7
 800128c:	f000 fb58 	bl	8001940 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40023800 	.word	0x40023800

0800129c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	@ 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a19      	ldr	r2, [pc, #100]	@ (8001320 <HAL_I2C_MspInit+0x84>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d12c      	bne.n	8001318 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <HAL_I2C_MspInit+0x88>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a17      	ldr	r2, [pc, #92]	@ (8001324 <HAL_I2C_MspInit+0x88>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <HAL_I2C_MspInit+0x88>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012da:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e0:	2312      	movs	r3, #18
 80012e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ec:	2304      	movs	r3, #4
 80012ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	480c      	ldr	r0, [pc, #48]	@ (8001328 <HAL_I2C_MspInit+0x8c>)
 80012f8:	f000 fb56 	bl	80019a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <HAL_I2C_MspInit+0x88>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001304:	4a07      	ldr	r2, [pc, #28]	@ (8001324 <HAL_I2C_MspInit+0x88>)
 8001306:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800130a:	6413      	str	r3, [r2, #64]	@ 0x40
 800130c:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <HAL_I2C_MspInit+0x88>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001318:	bf00      	nop
 800131a:	3728      	adds	r7, #40	@ 0x28
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40005400 	.word	0x40005400
 8001324:	40023800 	.word	0x40023800
 8001328:	40020400 	.word	0x40020400

0800132c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	@ 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a19      	ldr	r2, [pc, #100]	@ (80013b0 <HAL_SPI_MspInit+0x84>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d12c      	bne.n	80013a8 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	4b18      	ldr	r3, [pc, #96]	@ (80013b4 <HAL_SPI_MspInit+0x88>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	4a17      	ldr	r2, [pc, #92]	@ (80013b4 <HAL_SPI_MspInit+0x88>)
 8001358:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800135c:	6413      	str	r3, [r2, #64]	@ 0x40
 800135e:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <HAL_SPI_MspInit+0x88>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <HAL_SPI_MspInit+0x88>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	4a10      	ldr	r2, [pc, #64]	@ (80013b4 <HAL_SPI_MspInit+0x88>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	6313      	str	r3, [r2, #48]	@ 0x30
 800137a:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <HAL_SPI_MspInit+0x88>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001386:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800138a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001398:	2305      	movs	r3, #5
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4619      	mov	r1, r3
 80013a2:	4805      	ldr	r0, [pc, #20]	@ (80013b8 <HAL_SPI_MspInit+0x8c>)
 80013a4:	f000 fb00 	bl	80019a8 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80013a8:	bf00      	nop
 80013aa:	3728      	adds	r7, #40	@ 0x28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40003800 	.word	0x40003800
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020400 	.word	0x40020400

080013bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	@ 0x28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a19      	ldr	r2, [pc, #100]	@ (8001440 <HAL_UART_MspInit+0x84>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d12b      	bne.n	8001436 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	4b18      	ldr	r3, [pc, #96]	@ (8001444 <HAL_UART_MspInit+0x88>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	4a17      	ldr	r2, [pc, #92]	@ (8001444 <HAL_UART_MspInit+0x88>)
 80013e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ee:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <HAL_UART_MspInit+0x88>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <HAL_UART_MspInit+0x88>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	4a10      	ldr	r2, [pc, #64]	@ (8001444 <HAL_UART_MspInit+0x88>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6313      	str	r3, [r2, #48]	@ 0x30
 800140a:	4b0e      	ldr	r3, [pc, #56]	@ (8001444 <HAL_UART_MspInit+0x88>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001416:	230c      	movs	r3, #12
 8001418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001426:	2307      	movs	r3, #7
 8001428:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4619      	mov	r1, r3
 8001430:	4805      	ldr	r0, [pc, #20]	@ (8001448 <HAL_UART_MspInit+0x8c>)
 8001432:	f000 fab9 	bl	80019a8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001436:	bf00      	nop
 8001438:	3728      	adds	r7, #40	@ 0x28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40004400 	.word	0x40004400
 8001444:	40023800 	.word	0x40023800
 8001448:	40020000 	.word	0x40020000

0800144c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <NMI_Handler+0x4>

08001454 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <HardFault_Handler+0x4>

0800145c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <MemManage_Handler+0x4>

08001464 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <BusFault_Handler+0x4>

0800146c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <UsageFault_Handler+0x4>

08001474 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a2:	f000 f957 	bl	8001754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}

080014aa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  return 1;
 80014ae:	2301      	movs	r3, #1
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <_kill>:

int _kill(int pid, int sig)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014c4:	f004 f9a6 	bl	8005814 <__errno>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2216      	movs	r2, #22
 80014cc:	601a      	str	r2, [r3, #0]
  return -1;
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <_exit>:

void _exit (int status)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014e2:	f04f 31ff 	mov.w	r1, #4294967295
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ffe7 	bl	80014ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <_exit+0x12>

080014f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	e00a      	b.n	8001518 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001502:	f3af 8000 	nop.w
 8001506:	4601      	mov	r1, r0
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	60ba      	str	r2, [r7, #8]
 800150e:	b2ca      	uxtb	r2, r1
 8001510:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3301      	adds	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	429a      	cmp	r2, r3
 800151e:	dbf0      	blt.n	8001502 <_read+0x12>
  }

  return len;
 8001520:	687b      	ldr	r3, [r7, #4]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	e009      	b.n	8001550 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	60ba      	str	r2, [r7, #8]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	3301      	adds	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	429a      	cmp	r2, r3
 8001556:	dbf1      	blt.n	800153c <_write+0x12>
  }
  return len;
 8001558:	687b      	ldr	r3, [r7, #4]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <_close>:

int _close(int file)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800158a:	605a      	str	r2, [r3, #4]
  return 0;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <_isatty>:

int _isatty(int file)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d4:	4a14      	ldr	r2, [pc, #80]	@ (8001628 <_sbrk+0x5c>)
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <_sbrk+0x60>)
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e0:	4b13      	ldr	r3, [pc, #76]	@ (8001630 <_sbrk+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d102      	bne.n	80015ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e8:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <_sbrk+0x64>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	@ (8001634 <_sbrk+0x68>)
 80015ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ee:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d207      	bcs.n	800160c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015fc:	f004 f90a 	bl	8005814 <__errno>
 8001600:	4603      	mov	r3, r0
 8001602:	220c      	movs	r2, #12
 8001604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
 800160a:	e009      	b.n	8001620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800160c:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001612:	4b07      	ldr	r3, [pc, #28]	@ (8001630 <_sbrk+0x64>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	4a05      	ldr	r2, [pc, #20]	@ (8001630 <_sbrk+0x64>)
 800161c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161e:	68fb      	ldr	r3, [r7, #12]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20020000 	.word	0x20020000
 800162c:	00000400 	.word	0x00000400
 8001630:	20000454 	.word	0x20000454
 8001634:	200005a8 	.word	0x200005a8

08001638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <SystemInit+0x20>)
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001642:	4a05      	ldr	r2, [pc, #20]	@ (8001658 <SystemInit+0x20>)
 8001644:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001648:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800165c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001694 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001660:	f7ff ffea 	bl	8001638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001664:	480c      	ldr	r0, [pc, #48]	@ (8001698 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001666:	490d      	ldr	r1, [pc, #52]	@ (800169c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001668:	4a0d      	ldr	r2, [pc, #52]	@ (80016a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800166c:	e002      	b.n	8001674 <LoopCopyDataInit>

0800166e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001672:	3304      	adds	r3, #4

08001674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001678:	d3f9      	bcc.n	800166e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167a:	4a0a      	ldr	r2, [pc, #40]	@ (80016a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800167c:	4c0a      	ldr	r4, [pc, #40]	@ (80016a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001680:	e001      	b.n	8001686 <LoopFillZerobss>

08001682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001684:	3204      	adds	r2, #4

08001686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001688:	d3fb      	bcc.n	8001682 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800168a:	f004 f8c9 	bl	8005820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800168e:	f7ff fc59 	bl	8000f44 <main>
  bx  lr    
 8001692:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001694:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800169c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80016a0:	08006a70 	.word	0x08006a70
  ldr r2, =_sbss
 80016a4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80016a8:	200005a8 	.word	0x200005a8

080016ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC_IRQHandler>
	...

080016b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b4:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <HAL_Init+0x40>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0d      	ldr	r2, [pc, #52]	@ (80016f0 <HAL_Init+0x40>)
 80016ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016c0:	4b0b      	ldr	r3, [pc, #44]	@ (80016f0 <HAL_Init+0x40>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0a      	ldr	r2, [pc, #40]	@ (80016f0 <HAL_Init+0x40>)
 80016c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016cc:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <HAL_Init+0x40>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a07      	ldr	r2, [pc, #28]	@ (80016f0 <HAL_Init+0x40>)
 80016d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d8:	2003      	movs	r0, #3
 80016da:	f000 f931 	bl	8001940 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 f808 	bl	80016f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e4:	f7ff fdb2 	bl	800124c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023c00 	.word	0x40023c00

080016f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016fc:	4b12      	ldr	r3, [pc, #72]	@ (8001748 <HAL_InitTick+0x54>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b12      	ldr	r3, [pc, #72]	@ (800174c <HAL_InitTick+0x58>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800170a:	fbb3 f3f1 	udiv	r3, r3, r1
 800170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f93b 	bl	800198e <HAL_SYSTICK_Config>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e00e      	b.n	8001740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b0f      	cmp	r3, #15
 8001726:	d80a      	bhi.n	800173e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001728:	2200      	movs	r2, #0
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f000 f911 	bl	8001956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001734:	4a06      	ldr	r2, [pc, #24]	@ (8001750 <HAL_InitTick+0x5c>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	e000      	b.n	8001740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000000 	.word	0x20000000
 800174c:	20000008 	.word	0x20000008
 8001750:	20000004 	.word	0x20000004

08001754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <HAL_IncTick+0x20>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <HAL_IncTick+0x24>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
 8001764:	4a04      	ldr	r2, [pc, #16]	@ (8001778 <HAL_IncTick+0x24>)
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000008 	.word	0x20000008
 8001778:	20000458 	.word	0x20000458

0800177c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return uwTick;
 8001780:	4b03      	ldr	r3, [pc, #12]	@ (8001790 <HAL_GetTick+0x14>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20000458 	.word	0x20000458

08001794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff ffee 	bl	800177c <HAL_GetTick>
 80017a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ac:	d005      	beq.n	80017ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ae:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <HAL_Delay+0x44>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ba:	bf00      	nop
 80017bc:	f7ff ffde 	bl	800177c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d8f7      	bhi.n	80017bc <HAL_Delay+0x28>
  {
  }
}
 80017cc:	bf00      	nop
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000008 	.word	0x20000008

080017dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017f8:	4013      	ands	r3, r2
 80017fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001804:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800180c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180e:	4a04      	ldr	r2, [pc, #16]	@ (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	60d3      	str	r3, [r2, #12]
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001828:	4b04      	ldr	r3, [pc, #16]	@ (800183c <__NVIC_GetPriorityGrouping+0x18>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	f003 0307 	and.w	r3, r3, #7
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	@ (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	@ (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	@ 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
         );
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	@ 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800190c:	d301      	bcc.n	8001912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190e:	2301      	movs	r3, #1
 8001910:	e00f      	b.n	8001932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001912:	4a0a      	ldr	r2, [pc, #40]	@ (800193c <SysTick_Config+0x40>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191a:	210f      	movs	r1, #15
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	f7ff ff8e 	bl	8001840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001924:	4b05      	ldr	r3, [pc, #20]	@ (800193c <SysTick_Config+0x40>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192a:	4b04      	ldr	r3, [pc, #16]	@ (800193c <SysTick_Config+0x40>)
 800192c:	2207      	movs	r2, #7
 800192e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	e000e010 	.word	0xe000e010

08001940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff47 	bl	80017dc <__NVIC_SetPriorityGrouping>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001968:	f7ff ff5c 	bl	8001824 <__NVIC_GetPriorityGrouping>
 800196c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	6978      	ldr	r0, [r7, #20]
 8001974:	f7ff ff8e 	bl	8001894 <NVIC_EncodePriority>
 8001978:	4602      	mov	r2, r0
 800197a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff5d 	bl	8001840 <__NVIC_SetPriority>
}
 8001986:	bf00      	nop
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffb0 	bl	80018fc <SysTick_Config>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b089      	sub	sp, #36	@ 0x24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	e165      	b.n	8001c90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019c4:	2201      	movs	r2, #1
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	429a      	cmp	r2, r3
 80019de:	f040 8154 	bne.w	8001c8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d005      	beq.n	80019fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d130      	bne.n	8001a5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	2203      	movs	r2, #3
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a30:	2201      	movs	r2, #1
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	f003 0201 	and.w	r2, r3, #1
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	d017      	beq.n	8001a98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d123      	bne.n	8001aec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	08da      	lsrs	r2, r3, #3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3208      	adds	r2, #8
 8001aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	220f      	movs	r2, #15
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	691a      	ldr	r2, [r3, #16]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	08da      	lsrs	r2, r3, #3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3208      	adds	r2, #8
 8001ae6:	69b9      	ldr	r1, [r7, #24]
 8001ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0203 	and.w	r2, r3, #3
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 80ae 	beq.w	8001c8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4b5d      	ldr	r3, [pc, #372]	@ (8001ca8 <HAL_GPIO_Init+0x300>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b36:	4a5c      	ldr	r2, [pc, #368]	@ (8001ca8 <HAL_GPIO_Init+0x300>)
 8001b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b3e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ca8 <HAL_GPIO_Init+0x300>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b4a:	4a58      	ldr	r2, [pc, #352]	@ (8001cac <HAL_GPIO_Init+0x304>)
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	089b      	lsrs	r3, r3, #2
 8001b50:	3302      	adds	r3, #2
 8001b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	220f      	movs	r2, #15
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a4f      	ldr	r2, [pc, #316]	@ (8001cb0 <HAL_GPIO_Init+0x308>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d025      	beq.n	8001bc2 <HAL_GPIO_Init+0x21a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a4e      	ldr	r2, [pc, #312]	@ (8001cb4 <HAL_GPIO_Init+0x30c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d01f      	beq.n	8001bbe <HAL_GPIO_Init+0x216>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a4d      	ldr	r2, [pc, #308]	@ (8001cb8 <HAL_GPIO_Init+0x310>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d019      	beq.n	8001bba <HAL_GPIO_Init+0x212>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4c      	ldr	r2, [pc, #304]	@ (8001cbc <HAL_GPIO_Init+0x314>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d013      	beq.n	8001bb6 <HAL_GPIO_Init+0x20e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4b      	ldr	r2, [pc, #300]	@ (8001cc0 <HAL_GPIO_Init+0x318>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d00d      	beq.n	8001bb2 <HAL_GPIO_Init+0x20a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4a      	ldr	r2, [pc, #296]	@ (8001cc4 <HAL_GPIO_Init+0x31c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d007      	beq.n	8001bae <HAL_GPIO_Init+0x206>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a49      	ldr	r2, [pc, #292]	@ (8001cc8 <HAL_GPIO_Init+0x320>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d101      	bne.n	8001baa <HAL_GPIO_Init+0x202>
 8001ba6:	2306      	movs	r3, #6
 8001ba8:	e00c      	b.n	8001bc4 <HAL_GPIO_Init+0x21c>
 8001baa:	2307      	movs	r3, #7
 8001bac:	e00a      	b.n	8001bc4 <HAL_GPIO_Init+0x21c>
 8001bae:	2305      	movs	r3, #5
 8001bb0:	e008      	b.n	8001bc4 <HAL_GPIO_Init+0x21c>
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	e006      	b.n	8001bc4 <HAL_GPIO_Init+0x21c>
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e004      	b.n	8001bc4 <HAL_GPIO_Init+0x21c>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e002      	b.n	8001bc4 <HAL_GPIO_Init+0x21c>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <HAL_GPIO_Init+0x21c>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	69fa      	ldr	r2, [r7, #28]
 8001bc6:	f002 0203 	and.w	r2, r2, #3
 8001bca:	0092      	lsls	r2, r2, #2
 8001bcc:	4093      	lsls	r3, r2
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bd4:	4935      	ldr	r1, [pc, #212]	@ (8001cac <HAL_GPIO_Init+0x304>)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001be2:	4b3a      	ldr	r3, [pc, #232]	@ (8001ccc <HAL_GPIO_Init+0x324>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c06:	4a31      	ldr	r2, [pc, #196]	@ (8001ccc <HAL_GPIO_Init+0x324>)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c0c:	4b2f      	ldr	r3, [pc, #188]	@ (8001ccc <HAL_GPIO_Init+0x324>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c30:	4a26      	ldr	r2, [pc, #152]	@ (8001ccc <HAL_GPIO_Init+0x324>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c36:	4b25      	ldr	r3, [pc, #148]	@ (8001ccc <HAL_GPIO_Init+0x324>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c5a:	4a1c      	ldr	r2, [pc, #112]	@ (8001ccc <HAL_GPIO_Init+0x324>)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c60:	4b1a      	ldr	r3, [pc, #104]	@ (8001ccc <HAL_GPIO_Init+0x324>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c84:	4a11      	ldr	r2, [pc, #68]	@ (8001ccc <HAL_GPIO_Init+0x324>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	61fb      	str	r3, [r7, #28]
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	2b0f      	cmp	r3, #15
 8001c94:	f67f ae96 	bls.w	80019c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	3724      	adds	r7, #36	@ 0x24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40013800 	.word	0x40013800
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	40020400 	.word	0x40020400
 8001cb8:	40020800 	.word	0x40020800
 8001cbc:	40020c00 	.word	0x40020c00
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40021400 	.word	0x40021400
 8001cc8:	40021800 	.word	0x40021800
 8001ccc:	40013c00 	.word	0x40013c00

08001cd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	887b      	ldrh	r3, [r7, #2]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	73fb      	strb	r3, [r7, #15]
 8001cec:	e001      	b.n	8001cf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	807b      	strh	r3, [r7, #2]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d10:	787b      	ldrb	r3, [r7, #1]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d1c:	e003      	b.n	8001d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d1e:	887b      	ldrh	r3, [r7, #2]
 8001d20:	041a      	lsls	r2, r3, #16
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	619a      	str	r2, [r3, #24]
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e12b      	b.n	8001f9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d106      	bne.n	8001d60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff fa9e 	bl	800129c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2224      	movs	r2, #36	@ 0x24
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0201 	bic.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d98:	f001 f8b8 	bl	8002f0c <HAL_RCC_GetPCLK1Freq>
 8001d9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4a81      	ldr	r2, [pc, #516]	@ (8001fa8 <HAL_I2C_Init+0x274>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d807      	bhi.n	8001db8 <HAL_I2C_Init+0x84>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4a80      	ldr	r2, [pc, #512]	@ (8001fac <HAL_I2C_Init+0x278>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	bf94      	ite	ls
 8001db0:	2301      	movls	r3, #1
 8001db2:	2300      	movhi	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	e006      	b.n	8001dc6 <HAL_I2C_Init+0x92>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4a7d      	ldr	r2, [pc, #500]	@ (8001fb0 <HAL_I2C_Init+0x27c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	bf94      	ite	ls
 8001dc0:	2301      	movls	r3, #1
 8001dc2:	2300      	movhi	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e0e7      	b.n	8001f9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4a78      	ldr	r2, [pc, #480]	@ (8001fb4 <HAL_I2C_Init+0x280>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	0c9b      	lsrs	r3, r3, #18
 8001dd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	4a6a      	ldr	r2, [pc, #424]	@ (8001fa8 <HAL_I2C_Init+0x274>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d802      	bhi.n	8001e08 <HAL_I2C_Init+0xd4>
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	3301      	adds	r3, #1
 8001e06:	e009      	b.n	8001e1c <HAL_I2C_Init+0xe8>
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e0e:	fb02 f303 	mul.w	r3, r2, r3
 8001e12:	4a69      	ldr	r2, [pc, #420]	@ (8001fb8 <HAL_I2C_Init+0x284>)
 8001e14:	fba2 2303 	umull	r2, r3, r2, r3
 8001e18:	099b      	lsrs	r3, r3, #6
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	430b      	orrs	r3, r1
 8001e22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e2e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	495c      	ldr	r1, [pc, #368]	@ (8001fa8 <HAL_I2C_Init+0x274>)
 8001e38:	428b      	cmp	r3, r1
 8001e3a:	d819      	bhi.n	8001e70 <HAL_I2C_Init+0x13c>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1e59      	subs	r1, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e4a:	1c59      	adds	r1, r3, #1
 8001e4c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e50:	400b      	ands	r3, r1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00a      	beq.n	8001e6c <HAL_I2C_Init+0x138>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1e59      	subs	r1, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e64:	3301      	adds	r3, #1
 8001e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e6a:	e051      	b.n	8001f10 <HAL_I2C_Init+0x1dc>
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	e04f      	b.n	8001f10 <HAL_I2C_Init+0x1dc>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d111      	bne.n	8001e9c <HAL_I2C_Init+0x168>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	1e58      	subs	r0, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6859      	ldr	r1, [r3, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	440b      	add	r3, r1
 8001e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	bf0c      	ite	eq
 8001e94:	2301      	moveq	r3, #1
 8001e96:	2300      	movne	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	e012      	b.n	8001ec2 <HAL_I2C_Init+0x18e>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1e58      	subs	r0, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6859      	ldr	r1, [r3, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	0099      	lsls	r1, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	bf0c      	ite	eq
 8001ebc:	2301      	moveq	r3, #1
 8001ebe:	2300      	movne	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_I2C_Init+0x196>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e022      	b.n	8001f10 <HAL_I2C_Init+0x1dc>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10e      	bne.n	8001ef0 <HAL_I2C_Init+0x1bc>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1e58      	subs	r0, r3, #1
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6859      	ldr	r1, [r3, #4]
 8001eda:	460b      	mov	r3, r1
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	440b      	add	r3, r1
 8001ee0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001eee:	e00f      	b.n	8001f10 <HAL_I2C_Init+0x1dc>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	1e58      	subs	r0, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	0099      	lsls	r1, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f06:	3301      	adds	r3, #1
 8001f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	6809      	ldr	r1, [r1, #0]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69da      	ldr	r2, [r3, #28]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6911      	ldr	r1, [r2, #16]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68d2      	ldr	r2, [r2, #12]
 8001f4a:	4311      	orrs	r1, r2
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	430b      	orrs	r3, r1
 8001f52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695a      	ldr	r2, [r3, #20]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0201 	orr.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	000186a0 	.word	0x000186a0
 8001fac:	001e847f 	.word	0x001e847f
 8001fb0:	003d08ff 	.word	0x003d08ff
 8001fb4:	431bde83 	.word	0x431bde83
 8001fb8:	10624dd3 	.word	0x10624dd3

08001fbc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	460b      	mov	r3, r1
 8001fca:	817b      	strh	r3, [r7, #10]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fd0:	f7ff fbd4 	bl	800177c <HAL_GetTick>
 8001fd4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b20      	cmp	r3, #32
 8001fe0:	f040 80e0 	bne.w	80021a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	2319      	movs	r3, #25
 8001fea:	2201      	movs	r2, #1
 8001fec:	4970      	ldr	r1, [pc, #448]	@ (80021b0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 fc64 	bl	80028bc <I2C_WaitOnFlagUntilTimeout>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e0d3      	b.n	80021a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_I2C_Master_Transmit+0x50>
 8002008:	2302      	movs	r3, #2
 800200a:	e0cc      	b.n	80021a6 <HAL_I2C_Master_Transmit+0x1ea>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b01      	cmp	r3, #1
 8002020:	d007      	beq.n	8002032 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f042 0201 	orr.w	r2, r2, #1
 8002030:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002040:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2221      	movs	r2, #33	@ 0x21
 8002046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2210      	movs	r2, #16
 800204e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	893a      	ldrh	r2, [r7, #8]
 8002062:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4a50      	ldr	r2, [pc, #320]	@ (80021b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002072:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002074:	8979      	ldrh	r1, [r7, #10]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	6a3a      	ldr	r2, [r7, #32]
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 face 	bl	800261c <I2C_MasterRequestWrite>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e08d      	b.n	80021a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020a0:	e066      	b.n	8002170 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	6a39      	ldr	r1, [r7, #32]
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 fd22 	bl	8002af0 <I2C_WaitOnTXEFlagUntilTimeout>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00d      	beq.n	80020ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d107      	bne.n	80020ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e06b      	b.n	80021a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d2:	781a      	ldrb	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	3b01      	subs	r3, #1
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b04      	cmp	r3, #4
 800210a:	d11b      	bne.n	8002144 <HAL_I2C_Master_Transmit+0x188>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002110:	2b00      	cmp	r3, #0
 8002112:	d017      	beq.n	8002144 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002118:	781a      	ldrb	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800212e:	b29b      	uxth	r3, r3
 8002130:	3b01      	subs	r3, #1
 8002132:	b29a      	uxth	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	6a39      	ldr	r1, [r7, #32]
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 fd19 	bl	8002b80 <I2C_WaitOnBTFFlagUntilTimeout>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00d      	beq.n	8002170 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002158:	2b04      	cmp	r3, #4
 800215a:	d107      	bne.n	800216c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800216a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e01a      	b.n	80021a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002174:	2b00      	cmp	r3, #0
 8002176:	d194      	bne.n	80020a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	e000      	b.n	80021a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021a4:	2302      	movs	r3, #2
  }
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	00100002 	.word	0x00100002
 80021b4:	ffff0000 	.word	0xffff0000

080021b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08c      	sub	sp, #48	@ 0x30
 80021bc:	af02      	add	r7, sp, #8
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	461a      	mov	r2, r3
 80021c4:	460b      	mov	r3, r1
 80021c6:	817b      	strh	r3, [r7, #10]
 80021c8:	4613      	mov	r3, r2
 80021ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021cc:	f7ff fad6 	bl	800177c <HAL_GetTick>
 80021d0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b20      	cmp	r3, #32
 80021dc:	f040 8217 	bne.w	800260e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	2319      	movs	r3, #25
 80021e6:	2201      	movs	r2, #1
 80021e8:	497c      	ldr	r1, [pc, #496]	@ (80023dc <HAL_I2C_Master_Receive+0x224>)
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 fb66 	bl	80028bc <I2C_WaitOnFlagUntilTimeout>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80021f6:	2302      	movs	r3, #2
 80021f8:	e20a      	b.n	8002610 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_I2C_Master_Receive+0x50>
 8002204:	2302      	movs	r3, #2
 8002206:	e203      	b.n	8002610 <HAL_I2C_Master_Receive+0x458>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b01      	cmp	r3, #1
 800221c:	d007      	beq.n	800222e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f042 0201 	orr.w	r2, r2, #1
 800222c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800223c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2222      	movs	r2, #34	@ 0x22
 8002242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2210      	movs	r2, #16
 800224a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	893a      	ldrh	r2, [r7, #8]
 800225e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4a5c      	ldr	r2, [pc, #368]	@ (80023e0 <HAL_I2C_Master_Receive+0x228>)
 800226e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002270:	8979      	ldrh	r1, [r7, #10]
 8002272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 fa52 	bl	8002720 <I2C_MasterRequestRead>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e1c4      	b.n	8002610 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800228a:	2b00      	cmp	r3, #0
 800228c:	d113      	bne.n	80022b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800228e:	2300      	movs	r3, #0
 8002290:	623b      	str	r3, [r7, #32]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	623b      	str	r3, [r7, #32]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	623b      	str	r3, [r7, #32]
 80022a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	e198      	b.n	80025e8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d11b      	bne.n	80022f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	61fb      	str	r3, [r7, #28]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	e178      	b.n	80025e8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d11b      	bne.n	8002336 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800230c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800231c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800231e:	2300      	movs	r3, #0
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	61bb      	str	r3, [r7, #24]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	61bb      	str	r3, [r7, #24]
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	e158      	b.n	80025e8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002344:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800235c:	e144      	b.n	80025e8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002362:	2b03      	cmp	r3, #3
 8002364:	f200 80f1 	bhi.w	800254a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800236c:	2b01      	cmp	r3, #1
 800236e:	d123      	bne.n	80023b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002372:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 fc4b 	bl	8002c10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e145      	b.n	8002610 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	691a      	ldr	r2, [r3, #16]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023b6:	e117      	b.n	80025e8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d14e      	bne.n	800245e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c6:	2200      	movs	r2, #0
 80023c8:	4906      	ldr	r1, [pc, #24]	@ (80023e4 <HAL_I2C_Master_Receive+0x22c>)
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 fa76 	bl	80028bc <I2C_WaitOnFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d008      	beq.n	80023e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e11a      	b.n	8002610 <HAL_I2C_Master_Receive+0x458>
 80023da:	bf00      	nop
 80023dc:	00100002 	.word	0x00100002
 80023e0:	ffff0000 	.word	0xffff0000
 80023e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691a      	ldr	r2, [r3, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002452:	b29b      	uxth	r3, r3
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800245c:	e0c4      	b.n	80025e8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002464:	2200      	movs	r2, #0
 8002466:	496c      	ldr	r1, [pc, #432]	@ (8002618 <HAL_I2C_Master_Receive+0x460>)
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 fa27 	bl	80028bc <I2C_WaitOnFlagUntilTimeout>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0cb      	b.n	8002610 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002486:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691a      	ldr	r2, [r3, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c0:	2200      	movs	r2, #0
 80024c2:	4955      	ldr	r1, [pc, #340]	@ (8002618 <HAL_I2C_Master_Receive+0x460>)
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 f9f9 	bl	80028bc <I2C_WaitOnFlagUntilTimeout>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e09d      	b.n	8002610 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691a      	ldr	r2, [r3, #16]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800250c:	b29b      	uxth	r3, r3
 800250e:	3b01      	subs	r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002532:	3b01      	subs	r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800253e:	b29b      	uxth	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002548:	e04e      	b.n	80025e8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800254a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800254c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 fb5e 	bl	8002c10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e058      	b.n	8002610 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b04      	cmp	r3, #4
 800259c:	d124      	bne.n	80025e8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	d107      	bne.n	80025b6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025b4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f47f aeb6 	bne.w	800235e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	e000      	b.n	8002610 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800260e:	2302      	movs	r3, #2
  }
}
 8002610:	4618      	mov	r0, r3
 8002612:	3728      	adds	r7, #40	@ 0x28
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	00010004 	.word	0x00010004

0800261c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af02      	add	r7, sp, #8
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	607a      	str	r2, [r7, #4]
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	460b      	mov	r3, r1
 800262a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002630:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2b08      	cmp	r3, #8
 8002636:	d006      	beq.n	8002646 <I2C_MasterRequestWrite+0x2a>
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d003      	beq.n	8002646 <I2C_MasterRequestWrite+0x2a>
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002644:	d108      	bne.n	8002658 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	e00b      	b.n	8002670 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265c:	2b12      	cmp	r3, #18
 800265e:	d107      	bne.n	8002670 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800266e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 f91d 	bl	80028bc <I2C_WaitOnFlagUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00d      	beq.n	80026a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002696:	d103      	bne.n	80026a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800269e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e035      	b.n	8002710 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026ac:	d108      	bne.n	80026c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026ae:	897b      	ldrh	r3, [r7, #10]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80026bc:	611a      	str	r2, [r3, #16]
 80026be:	e01b      	b.n	80026f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026c0:	897b      	ldrh	r3, [r7, #10]
 80026c2:	11db      	asrs	r3, r3, #7
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	f003 0306 	and.w	r3, r3, #6
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	f063 030f 	orn	r3, r3, #15
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	490e      	ldr	r1, [pc, #56]	@ (8002718 <I2C_MasterRequestWrite+0xfc>)
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f966 	bl	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e010      	b.n	8002710 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026ee:	897b      	ldrh	r3, [r7, #10]
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	4907      	ldr	r1, [pc, #28]	@ (800271c <I2C_MasterRequestWrite+0x100>)
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 f956 	bl	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	00010008 	.word	0x00010008
 800271c:	00010002 	.word	0x00010002

08002720 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af02      	add	r7, sp, #8
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	460b      	mov	r3, r1
 800272e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002734:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002744:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2b08      	cmp	r3, #8
 800274a:	d006      	beq.n	800275a <I2C_MasterRequestRead+0x3a>
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d003      	beq.n	800275a <I2C_MasterRequestRead+0x3a>
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002758:	d108      	bne.n	800276c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	e00b      	b.n	8002784 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002770:	2b11      	cmp	r3, #17
 8002772:	d107      	bne.n	8002784 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002782:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 f893 	bl	80028bc <I2C_WaitOnFlagUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00d      	beq.n	80027b8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027aa:	d103      	bne.n	80027b4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e079      	b.n	80028ac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027c0:	d108      	bne.n	80027d4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80027c2:	897b      	ldrh	r3, [r7, #10]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	611a      	str	r2, [r3, #16]
 80027d2:	e05f      	b.n	8002894 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027d4:	897b      	ldrh	r3, [r7, #10]
 80027d6:	11db      	asrs	r3, r3, #7
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	f003 0306 	and.w	r3, r3, #6
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	f063 030f 	orn	r3, r3, #15
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	4930      	ldr	r1, [pc, #192]	@ (80028b4 <I2C_MasterRequestRead+0x194>)
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 f8dc 	bl	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e054      	b.n	80028ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002802:	897b      	ldrh	r3, [r7, #10]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	4929      	ldr	r1, [pc, #164]	@ (80028b8 <I2C_MasterRequestRead+0x198>)
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f8cc 	bl	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e044      	b.n	80028ac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002822:	2300      	movs	r3, #0
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002846:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 f831 	bl	80028bc <I2C_WaitOnFlagUntilTimeout>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00d      	beq.n	800287c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800286a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800286e:	d103      	bne.n	8002878 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002876:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e017      	b.n	80028ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800287c:	897b      	ldrh	r3, [r7, #10]
 800287e:	11db      	asrs	r3, r3, #7
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f003 0306 	and.w	r3, r3, #6
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f063 030e 	orn	r3, r3, #14
 800288c:	b2da      	uxtb	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	4907      	ldr	r1, [pc, #28]	@ (80028b8 <I2C_MasterRequestRead+0x198>)
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f888 	bl	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	00010008 	.word	0x00010008
 80028b8:	00010002 	.word	0x00010002

080028bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	4613      	mov	r3, r2
 80028ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028cc:	e048      	b.n	8002960 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d4:	d044      	beq.n	8002960 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d6:	f7fe ff51 	bl	800177c <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d302      	bcc.n	80028ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d139      	bne.n	8002960 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	0c1b      	lsrs	r3, r3, #16
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d10d      	bne.n	8002912 <I2C_WaitOnFlagUntilTimeout+0x56>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	43da      	mvns	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	4013      	ands	r3, r2
 8002902:	b29b      	uxth	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf0c      	ite	eq
 8002908:	2301      	moveq	r3, #1
 800290a:	2300      	movne	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	461a      	mov	r2, r3
 8002910:	e00c      	b.n	800292c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	43da      	mvns	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	4013      	ands	r3, r2
 800291e:	b29b      	uxth	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf0c      	ite	eq
 8002924:	2301      	moveq	r3, #1
 8002926:	2300      	movne	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	461a      	mov	r2, r3
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	429a      	cmp	r2, r3
 8002930:	d116      	bne.n	8002960 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294c:	f043 0220 	orr.w	r2, r3, #32
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e023      	b.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	0c1b      	lsrs	r3, r3, #16
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b01      	cmp	r3, #1
 8002968:	d10d      	bne.n	8002986 <I2C_WaitOnFlagUntilTimeout+0xca>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	43da      	mvns	r2, r3
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	4013      	ands	r3, r2
 8002976:	b29b      	uxth	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	bf0c      	ite	eq
 800297c:	2301      	moveq	r3, #1
 800297e:	2300      	movne	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	461a      	mov	r2, r3
 8002984:	e00c      	b.n	80029a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	43da      	mvns	r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	4013      	ands	r3, r2
 8002992:	b29b      	uxth	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf0c      	ite	eq
 8002998:	2301      	moveq	r3, #1
 800299a:	2300      	movne	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	461a      	mov	r2, r3
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d093      	beq.n	80028ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029be:	e071      	b.n	8002aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ce:	d123      	bne.n	8002a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80029e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a04:	f043 0204 	orr.w	r2, r3, #4
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e067      	b.n	8002ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1e:	d041      	beq.n	8002aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a20:	f7fe feac 	bl	800177c <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d302      	bcc.n	8002a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d136      	bne.n	8002aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	0c1b      	lsrs	r3, r3, #16
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d10c      	bne.n	8002a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	43da      	mvns	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	bf14      	ite	ne
 8002a52:	2301      	movne	r3, #1
 8002a54:	2300      	moveq	r3, #0
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	e00b      	b.n	8002a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	43da      	mvns	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	4013      	ands	r3, r2
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bf14      	ite	ne
 8002a6c:	2301      	movne	r3, #1
 8002a6e:	2300      	moveq	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d016      	beq.n	8002aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a90:	f043 0220 	orr.w	r2, r3, #32
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e021      	b.n	8002ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	0c1b      	lsrs	r3, r3, #16
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d10c      	bne.n	8002ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	43da      	mvns	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bf14      	ite	ne
 8002ac0:	2301      	movne	r3, #1
 8002ac2:	2300      	moveq	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	e00b      	b.n	8002ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	bf14      	ite	ne
 8002ada:	2301      	movne	r3, #1
 8002adc:	2300      	moveq	r3, #0
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f47f af6d 	bne.w	80029c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002afc:	e034      	b.n	8002b68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f8e3 	bl	8002cca <I2C_IsAcknowledgeFailed>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e034      	b.n	8002b78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d028      	beq.n	8002b68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b16:	f7fe fe31 	bl	800177c <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d302      	bcc.n	8002b2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d11d      	bne.n	8002b68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b36:	2b80      	cmp	r3, #128	@ 0x80
 8002b38:	d016      	beq.n	8002b68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b54:	f043 0220 	orr.w	r2, r3, #32
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e007      	b.n	8002b78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b72:	2b80      	cmp	r3, #128	@ 0x80
 8002b74:	d1c3      	bne.n	8002afe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b8c:	e034      	b.n	8002bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 f89b 	bl	8002cca <I2C_IsAcknowledgeFailed>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e034      	b.n	8002c08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba4:	d028      	beq.n	8002bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba6:	f7fe fde9 	bl	800177c <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d302      	bcc.n	8002bbc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d11d      	bne.n	8002bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d016      	beq.n	8002bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be4:	f043 0220 	orr.w	r2, r3, #32
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e007      	b.n	8002c08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d1c3      	bne.n	8002b8e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c1c:	e049      	b.n	8002cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	f003 0310 	and.w	r3, r3, #16
 8002c28:	2b10      	cmp	r3, #16
 8002c2a:	d119      	bne.n	8002c60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0210 	mvn.w	r2, #16
 8002c34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e030      	b.n	8002cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c60:	f7fe fd8c 	bl	800177c <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d302      	bcc.n	8002c76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d11d      	bne.n	8002cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c80:	2b40      	cmp	r3, #64	@ 0x40
 8002c82:	d016      	beq.n	8002cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9e:	f043 0220 	orr.w	r2, r3, #32
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e007      	b.n	8002cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cbc:	2b40      	cmp	r3, #64	@ 0x40
 8002cbe:	d1ae      	bne.n	8002c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ce0:	d11b      	bne.n	8002d1a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	f043 0204 	orr.w	r2, r3, #4
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0cc      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d3c:	4b68      	ldr	r3, [pc, #416]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 030f 	and.w	r3, r3, #15
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d90c      	bls.n	8002d64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4a:	4b65      	ldr	r3, [pc, #404]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d52:	4b63      	ldr	r3, [pc, #396]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d001      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0b8      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d020      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d7c:	4b59      	ldr	r3, [pc, #356]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	4a58      	ldr	r2, [pc, #352]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d94:	4b53      	ldr	r3, [pc, #332]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	4a52      	ldr	r2, [pc, #328]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da0:	4b50      	ldr	r3, [pc, #320]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	494d      	ldr	r1, [pc, #308]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d044      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d107      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc6:	4b47      	ldr	r3, [pc, #284]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d119      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e07f      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d003      	beq.n	8002de6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	d107      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d109      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e06f      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e067      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e06:	4b37      	ldr	r3, [pc, #220]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f023 0203 	bic.w	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	4934      	ldr	r1, [pc, #208]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e18:	f7fe fcb0 	bl	800177c <HAL_GetTick>
 8002e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1e:	e00a      	b.n	8002e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e20:	f7fe fcac 	bl	800177c <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e04f      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e36:	4b2b      	ldr	r3, [pc, #172]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 020c 	and.w	r2, r3, #12
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d1eb      	bne.n	8002e20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e48:	4b25      	ldr	r3, [pc, #148]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d20c      	bcs.n	8002e70 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e56:	4b22      	ldr	r3, [pc, #136]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5e:	4b20      	ldr	r3, [pc, #128]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e032      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d008      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e7c:	4b19      	ldr	r3, [pc, #100]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	4916      	ldr	r1, [pc, #88]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d009      	beq.n	8002eae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e9a:	4b12      	ldr	r3, [pc, #72]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	490e      	ldr	r1, [pc, #56]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eae:	f000 f855 	bl	8002f5c <HAL_RCC_GetSysClockFreq>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	490a      	ldr	r1, [pc, #40]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec0:	5ccb      	ldrb	r3, [r1, r3]
 8002ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec6:	4a09      	ldr	r2, [pc, #36]	@ (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002eca:	4b09      	ldr	r3, [pc, #36]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fe fc10 	bl	80016f4 <HAL_InitTick>

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40023c00 	.word	0x40023c00
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	080069d4 	.word	0x080069d4
 8002eec:	20000000 	.word	0x20000000
 8002ef0:	20000004 	.word	0x20000004

08002ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ef8:	4b03      	ldr	r3, [pc, #12]	@ (8002f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002efa:	681b      	ldr	r3, [r3, #0]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	20000000 	.word	0x20000000

08002f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f10:	f7ff fff0 	bl	8002ef4 <HAL_RCC_GetHCLKFreq>
 8002f14:	4602      	mov	r2, r0
 8002f16:	4b05      	ldr	r3, [pc, #20]	@ (8002f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	0a9b      	lsrs	r3, r3, #10
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	4903      	ldr	r1, [pc, #12]	@ (8002f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f22:	5ccb      	ldrb	r3, [r1, r3]
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	080069e4 	.word	0x080069e4

08002f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f38:	f7ff ffdc 	bl	8002ef4 <HAL_RCC_GetHCLKFreq>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	4b05      	ldr	r3, [pc, #20]	@ (8002f54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	0b5b      	lsrs	r3, r3, #13
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	4903      	ldr	r1, [pc, #12]	@ (8002f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f4a:	5ccb      	ldrb	r3, [r1, r3]
 8002f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40023800 	.word	0x40023800
 8002f58:	080069e4 	.word	0x080069e4

08002f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f60:	b0ae      	sub	sp, #184	@ 0xb8
 8002f62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f82:	4bcb      	ldr	r3, [pc, #812]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	2b0c      	cmp	r3, #12
 8002f8c:	f200 8206 	bhi.w	800339c <HAL_RCC_GetSysClockFreq+0x440>
 8002f90:	a201      	add	r2, pc, #4	@ (adr r2, 8002f98 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f96:	bf00      	nop
 8002f98:	08002fcd 	.word	0x08002fcd
 8002f9c:	0800339d 	.word	0x0800339d
 8002fa0:	0800339d 	.word	0x0800339d
 8002fa4:	0800339d 	.word	0x0800339d
 8002fa8:	08002fd5 	.word	0x08002fd5
 8002fac:	0800339d 	.word	0x0800339d
 8002fb0:	0800339d 	.word	0x0800339d
 8002fb4:	0800339d 	.word	0x0800339d
 8002fb8:	08002fdd 	.word	0x08002fdd
 8002fbc:	0800339d 	.word	0x0800339d
 8002fc0:	0800339d 	.word	0x0800339d
 8002fc4:	0800339d 	.word	0x0800339d
 8002fc8:	080031cd 	.word	0x080031cd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fcc:	4bb9      	ldr	r3, [pc, #740]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002fce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002fd2:	e1e7      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fd4:	4bb8      	ldr	r3, [pc, #736]	@ (80032b8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002fd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002fda:	e1e3      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fdc:	4bb4      	ldr	r3, [pc, #720]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fe4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fe8:	4bb1      	ldr	r3, [pc, #708]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d071      	beq.n	80030d8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff4:	4bae      	ldr	r3, [pc, #696]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	099b      	lsrs	r3, r3, #6
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003000:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003004:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800300c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003010:	2300      	movs	r3, #0
 8003012:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003016:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800301a:	4622      	mov	r2, r4
 800301c:	462b      	mov	r3, r5
 800301e:	f04f 0000 	mov.w	r0, #0
 8003022:	f04f 0100 	mov.w	r1, #0
 8003026:	0159      	lsls	r1, r3, #5
 8003028:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800302c:	0150      	lsls	r0, r2, #5
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	4621      	mov	r1, r4
 8003034:	1a51      	subs	r1, r2, r1
 8003036:	6439      	str	r1, [r7, #64]	@ 0x40
 8003038:	4629      	mov	r1, r5
 800303a:	eb63 0301 	sbc.w	r3, r3, r1
 800303e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800304c:	4649      	mov	r1, r9
 800304e:	018b      	lsls	r3, r1, #6
 8003050:	4641      	mov	r1, r8
 8003052:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003056:	4641      	mov	r1, r8
 8003058:	018a      	lsls	r2, r1, #6
 800305a:	4641      	mov	r1, r8
 800305c:	1a51      	subs	r1, r2, r1
 800305e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003060:	4649      	mov	r1, r9
 8003062:	eb63 0301 	sbc.w	r3, r3, r1
 8003066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003074:	4649      	mov	r1, r9
 8003076:	00cb      	lsls	r3, r1, #3
 8003078:	4641      	mov	r1, r8
 800307a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800307e:	4641      	mov	r1, r8
 8003080:	00ca      	lsls	r2, r1, #3
 8003082:	4610      	mov	r0, r2
 8003084:	4619      	mov	r1, r3
 8003086:	4603      	mov	r3, r0
 8003088:	4622      	mov	r2, r4
 800308a:	189b      	adds	r3, r3, r2
 800308c:	633b      	str	r3, [r7, #48]	@ 0x30
 800308e:	462b      	mov	r3, r5
 8003090:	460a      	mov	r2, r1
 8003092:	eb42 0303 	adc.w	r3, r2, r3
 8003096:	637b      	str	r3, [r7, #52]	@ 0x34
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030a4:	4629      	mov	r1, r5
 80030a6:	024b      	lsls	r3, r1, #9
 80030a8:	4621      	mov	r1, r4
 80030aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030ae:	4621      	mov	r1, r4
 80030b0:	024a      	lsls	r2, r1, #9
 80030b2:	4610      	mov	r0, r2
 80030b4:	4619      	mov	r1, r3
 80030b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030ba:	2200      	movs	r2, #0
 80030bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80030c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80030c4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80030c8:	f7fd f8fa 	bl	80002c0 <__aeabi_uldivmod>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4613      	mov	r3, r2
 80030d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030d6:	e067      	b.n	80031a8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d8:	4b75      	ldr	r3, [pc, #468]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	099b      	lsrs	r3, r3, #6
 80030de:	2200      	movs	r2, #0
 80030e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80030e4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80030e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80030f2:	2300      	movs	r3, #0
 80030f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80030f6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80030fa:	4622      	mov	r2, r4
 80030fc:	462b      	mov	r3, r5
 80030fe:	f04f 0000 	mov.w	r0, #0
 8003102:	f04f 0100 	mov.w	r1, #0
 8003106:	0159      	lsls	r1, r3, #5
 8003108:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800310c:	0150      	lsls	r0, r2, #5
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4621      	mov	r1, r4
 8003114:	1a51      	subs	r1, r2, r1
 8003116:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003118:	4629      	mov	r1, r5
 800311a:	eb63 0301 	sbc.w	r3, r3, r1
 800311e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800312c:	4649      	mov	r1, r9
 800312e:	018b      	lsls	r3, r1, #6
 8003130:	4641      	mov	r1, r8
 8003132:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003136:	4641      	mov	r1, r8
 8003138:	018a      	lsls	r2, r1, #6
 800313a:	4641      	mov	r1, r8
 800313c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003140:	4649      	mov	r1, r9
 8003142:	eb63 0b01 	sbc.w	fp, r3, r1
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003152:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003156:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800315a:	4692      	mov	sl, r2
 800315c:	469b      	mov	fp, r3
 800315e:	4623      	mov	r3, r4
 8003160:	eb1a 0303 	adds.w	r3, sl, r3
 8003164:	623b      	str	r3, [r7, #32]
 8003166:	462b      	mov	r3, r5
 8003168:	eb4b 0303 	adc.w	r3, fp, r3
 800316c:	627b      	str	r3, [r7, #36]	@ 0x24
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800317a:	4629      	mov	r1, r5
 800317c:	028b      	lsls	r3, r1, #10
 800317e:	4621      	mov	r1, r4
 8003180:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003184:	4621      	mov	r1, r4
 8003186:	028a      	lsls	r2, r1, #10
 8003188:	4610      	mov	r0, r2
 800318a:	4619      	mov	r1, r3
 800318c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003190:	2200      	movs	r2, #0
 8003192:	673b      	str	r3, [r7, #112]	@ 0x70
 8003194:	677a      	str	r2, [r7, #116]	@ 0x74
 8003196:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800319a:	f7fd f891 	bl	80002c0 <__aeabi_uldivmod>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4613      	mov	r3, r2
 80031a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80031a8:	4b41      	ldr	r3, [pc, #260]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	0c1b      	lsrs	r3, r3, #16
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	3301      	adds	r3, #1
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80031ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80031be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80031ca:	e0eb      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031cc:	4b38      	ldr	r3, [pc, #224]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031d8:	4b35      	ldr	r3, [pc, #212]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d06b      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e4:	4b32      	ldr	r3, [pc, #200]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	099b      	lsrs	r3, r3, #6
 80031ea:	2200      	movs	r2, #0
 80031ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80031f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80031f8:	2300      	movs	r3, #0
 80031fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80031fc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003200:	4622      	mov	r2, r4
 8003202:	462b      	mov	r3, r5
 8003204:	f04f 0000 	mov.w	r0, #0
 8003208:	f04f 0100 	mov.w	r1, #0
 800320c:	0159      	lsls	r1, r3, #5
 800320e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003212:	0150      	lsls	r0, r2, #5
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4621      	mov	r1, r4
 800321a:	1a51      	subs	r1, r2, r1
 800321c:	61b9      	str	r1, [r7, #24]
 800321e:	4629      	mov	r1, r5
 8003220:	eb63 0301 	sbc.w	r3, r3, r1
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f04f 0300 	mov.w	r3, #0
 800322e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003232:	4659      	mov	r1, fp
 8003234:	018b      	lsls	r3, r1, #6
 8003236:	4651      	mov	r1, sl
 8003238:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800323c:	4651      	mov	r1, sl
 800323e:	018a      	lsls	r2, r1, #6
 8003240:	4651      	mov	r1, sl
 8003242:	ebb2 0801 	subs.w	r8, r2, r1
 8003246:	4659      	mov	r1, fp
 8003248:	eb63 0901 	sbc.w	r9, r3, r1
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003258:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800325c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003260:	4690      	mov	r8, r2
 8003262:	4699      	mov	r9, r3
 8003264:	4623      	mov	r3, r4
 8003266:	eb18 0303 	adds.w	r3, r8, r3
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	462b      	mov	r3, r5
 800326e:	eb49 0303 	adc.w	r3, r9, r3
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003280:	4629      	mov	r1, r5
 8003282:	024b      	lsls	r3, r1, #9
 8003284:	4621      	mov	r1, r4
 8003286:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800328a:	4621      	mov	r1, r4
 800328c:	024a      	lsls	r2, r1, #9
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003296:	2200      	movs	r2, #0
 8003298:	65bb      	str	r3, [r7, #88]	@ 0x58
 800329a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800329c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80032a0:	f7fd f80e 	bl	80002c0 <__aeabi_uldivmod>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4613      	mov	r3, r2
 80032aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032ae:	e065      	b.n	800337c <HAL_RCC_GetSysClockFreq+0x420>
 80032b0:	40023800 	.word	0x40023800
 80032b4:	00f42400 	.word	0x00f42400
 80032b8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032bc:	4b3d      	ldr	r3, [pc, #244]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x458>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	099b      	lsrs	r3, r3, #6
 80032c2:	2200      	movs	r2, #0
 80032c4:	4618      	mov	r0, r3
 80032c6:	4611      	mov	r1, r2
 80032c8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80032ce:	2300      	movs	r3, #0
 80032d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80032d2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80032d6:	4642      	mov	r2, r8
 80032d8:	464b      	mov	r3, r9
 80032da:	f04f 0000 	mov.w	r0, #0
 80032de:	f04f 0100 	mov.w	r1, #0
 80032e2:	0159      	lsls	r1, r3, #5
 80032e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032e8:	0150      	lsls	r0, r2, #5
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4641      	mov	r1, r8
 80032f0:	1a51      	subs	r1, r2, r1
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	4649      	mov	r1, r9
 80032f6:	eb63 0301 	sbc.w	r3, r3, r1
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003308:	4659      	mov	r1, fp
 800330a:	018b      	lsls	r3, r1, #6
 800330c:	4651      	mov	r1, sl
 800330e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003312:	4651      	mov	r1, sl
 8003314:	018a      	lsls	r2, r1, #6
 8003316:	4651      	mov	r1, sl
 8003318:	1a54      	subs	r4, r2, r1
 800331a:	4659      	mov	r1, fp
 800331c:	eb63 0501 	sbc.w	r5, r3, r1
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	00eb      	lsls	r3, r5, #3
 800332a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800332e:	00e2      	lsls	r2, r4, #3
 8003330:	4614      	mov	r4, r2
 8003332:	461d      	mov	r5, r3
 8003334:	4643      	mov	r3, r8
 8003336:	18e3      	adds	r3, r4, r3
 8003338:	603b      	str	r3, [r7, #0]
 800333a:	464b      	mov	r3, r9
 800333c:	eb45 0303 	adc.w	r3, r5, r3
 8003340:	607b      	str	r3, [r7, #4]
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800334e:	4629      	mov	r1, r5
 8003350:	028b      	lsls	r3, r1, #10
 8003352:	4621      	mov	r1, r4
 8003354:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003358:	4621      	mov	r1, r4
 800335a:	028a      	lsls	r2, r1, #10
 800335c:	4610      	mov	r0, r2
 800335e:	4619      	mov	r1, r3
 8003360:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003364:	2200      	movs	r2, #0
 8003366:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003368:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800336a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800336e:	f7fc ffa7 	bl	80002c0 <__aeabi_uldivmod>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	4613      	mov	r3, r2
 8003378:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800337c:	4b0d      	ldr	r3, [pc, #52]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x458>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	0f1b      	lsrs	r3, r3, #28
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800338a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800338e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003392:	fbb2 f3f3 	udiv	r3, r2, r3
 8003396:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800339a:	e003      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800339c:	4b06      	ldr	r3, [pc, #24]	@ (80033b8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800339e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	37b8      	adds	r7, #184	@ 0xb8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800
 80033b8:	00f42400 	.word	0x00f42400

080033bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e28d      	b.n	80038ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 8083 	beq.w	80034e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80033dc:	4b94      	ldr	r3, [pc, #592]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 030c 	and.w	r3, r3, #12
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d019      	beq.n	800341c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80033e8:	4b91      	ldr	r3, [pc, #580]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 030c 	and.w	r3, r3, #12
        || \
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d106      	bne.n	8003402 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80033f4:	4b8e      	ldr	r3, [pc, #568]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003400:	d00c      	beq.n	800341c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003402:	4b8b      	ldr	r3, [pc, #556]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800340a:	2b0c      	cmp	r3, #12
 800340c:	d112      	bne.n	8003434 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800340e:	4b88      	ldr	r3, [pc, #544]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003416:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800341a:	d10b      	bne.n	8003434 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800341c:	4b84      	ldr	r3, [pc, #528]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d05b      	beq.n	80034e0 <HAL_RCC_OscConfig+0x124>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d157      	bne.n	80034e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e25a      	b.n	80038ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800343c:	d106      	bne.n	800344c <HAL_RCC_OscConfig+0x90>
 800343e:	4b7c      	ldr	r3, [pc, #496]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a7b      	ldr	r2, [pc, #492]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 8003444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e01d      	b.n	8003488 <HAL_RCC_OscConfig+0xcc>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003454:	d10c      	bne.n	8003470 <HAL_RCC_OscConfig+0xb4>
 8003456:	4b76      	ldr	r3, [pc, #472]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a75      	ldr	r2, [pc, #468]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 800345c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	4b73      	ldr	r3, [pc, #460]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a72      	ldr	r2, [pc, #456]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 8003468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	e00b      	b.n	8003488 <HAL_RCC_OscConfig+0xcc>
 8003470:	4b6f      	ldr	r3, [pc, #444]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a6e      	ldr	r2, [pc, #440]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 8003476:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	4b6c      	ldr	r3, [pc, #432]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a6b      	ldr	r2, [pc, #428]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 8003482:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d013      	beq.n	80034b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003490:	f7fe f974 	bl	800177c <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003498:	f7fe f970 	bl	800177c <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b64      	cmp	r3, #100	@ 0x64
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e21f      	b.n	80038ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034aa:	4b61      	ldr	r3, [pc, #388]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f0      	beq.n	8003498 <HAL_RCC_OscConfig+0xdc>
 80034b6:	e014      	b.n	80034e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fe f960 	bl	800177c <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c0:	f7fe f95c 	bl	800177c <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b64      	cmp	r3, #100	@ 0x64
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e20b      	b.n	80038ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d2:	4b57      	ldr	r3, [pc, #348]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0x104>
 80034de:	e000      	b.n	80034e2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d06f      	beq.n	80035ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80034ee:	4b50      	ldr	r3, [pc, #320]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d017      	beq.n	800352a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80034fa:	4b4d      	ldr	r3, [pc, #308]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
        || \
 8003502:	2b08      	cmp	r3, #8
 8003504:	d105      	bne.n	8003512 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003506:	4b4a      	ldr	r3, [pc, #296]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00b      	beq.n	800352a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003512:	4b47      	ldr	r3, [pc, #284]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800351a:	2b0c      	cmp	r3, #12
 800351c:	d11c      	bne.n	8003558 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800351e:	4b44      	ldr	r3, [pc, #272]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d116      	bne.n	8003558 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352a:	4b41      	ldr	r3, [pc, #260]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d005      	beq.n	8003542 <HAL_RCC_OscConfig+0x186>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d001      	beq.n	8003542 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e1d3      	b.n	80038ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003542:	4b3b      	ldr	r3, [pc, #236]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4937      	ldr	r1, [pc, #220]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 8003552:	4313      	orrs	r3, r2
 8003554:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003556:	e03a      	b.n	80035ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d020      	beq.n	80035a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003560:	4b34      	ldr	r3, [pc, #208]	@ (8003634 <HAL_RCC_OscConfig+0x278>)
 8003562:	2201      	movs	r2, #1
 8003564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003566:	f7fe f909 	bl	800177c <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800356e:	f7fe f905 	bl	800177c <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e1b4      	b.n	80038ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003580:	4b2b      	ldr	r3, [pc, #172]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0f0      	beq.n	800356e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358c:	4b28      	ldr	r3, [pc, #160]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	4925      	ldr	r1, [pc, #148]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 800359c:	4313      	orrs	r3, r2
 800359e:	600b      	str	r3, [r1, #0]
 80035a0:	e015      	b.n	80035ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035a2:	4b24      	ldr	r3, [pc, #144]	@ (8003634 <HAL_RCC_OscConfig+0x278>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fe f8e8 	bl	800177c <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b0:	f7fe f8e4 	bl	800177c <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e193      	b.n	80038ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d036      	beq.n	8003648 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d016      	beq.n	8003610 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035e2:	4b15      	ldr	r3, [pc, #84]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 80035e4:	2201      	movs	r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e8:	f7fe f8c8 	bl	800177c <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f0:	f7fe f8c4 	bl	800177c <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e173      	b.n	80038ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003602:	4b0b      	ldr	r3, [pc, #44]	@ (8003630 <HAL_RCC_OscConfig+0x274>)
 8003604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0x234>
 800360e:	e01b      	b.n	8003648 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003610:	4b09      	ldr	r3, [pc, #36]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003616:	f7fe f8b1 	bl	800177c <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800361c:	e00e      	b.n	800363c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800361e:	f7fe f8ad 	bl	800177c <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d907      	bls.n	800363c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e15c      	b.n	80038ea <HAL_RCC_OscConfig+0x52e>
 8003630:	40023800 	.word	0x40023800
 8003634:	42470000 	.word	0x42470000
 8003638:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800363c:	4b8a      	ldr	r3, [pc, #552]	@ (8003868 <HAL_RCC_OscConfig+0x4ac>)
 800363e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1ea      	bne.n	800361e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 8097 	beq.w	8003784 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003656:	2300      	movs	r3, #0
 8003658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800365a:	4b83      	ldr	r3, [pc, #524]	@ (8003868 <HAL_RCC_OscConfig+0x4ac>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10f      	bne.n	8003686 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	60bb      	str	r3, [r7, #8]
 800366a:	4b7f      	ldr	r3, [pc, #508]	@ (8003868 <HAL_RCC_OscConfig+0x4ac>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366e:	4a7e      	ldr	r2, [pc, #504]	@ (8003868 <HAL_RCC_OscConfig+0x4ac>)
 8003670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003674:	6413      	str	r3, [r2, #64]	@ 0x40
 8003676:	4b7c      	ldr	r3, [pc, #496]	@ (8003868 <HAL_RCC_OscConfig+0x4ac>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800367e:	60bb      	str	r3, [r7, #8]
 8003680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003682:	2301      	movs	r3, #1
 8003684:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003686:	4b79      	ldr	r3, [pc, #484]	@ (800386c <HAL_RCC_OscConfig+0x4b0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800368e:	2b00      	cmp	r3, #0
 8003690:	d118      	bne.n	80036c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003692:	4b76      	ldr	r3, [pc, #472]	@ (800386c <HAL_RCC_OscConfig+0x4b0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a75      	ldr	r2, [pc, #468]	@ (800386c <HAL_RCC_OscConfig+0x4b0>)
 8003698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800369c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800369e:	f7fe f86d 	bl	800177c <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a6:	f7fe f869 	bl	800177c <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e118      	b.n	80038ea <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b8:	4b6c      	ldr	r3, [pc, #432]	@ (800386c <HAL_RCC_OscConfig+0x4b0>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0f0      	beq.n	80036a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d106      	bne.n	80036da <HAL_RCC_OscConfig+0x31e>
 80036cc:	4b66      	ldr	r3, [pc, #408]	@ (8003868 <HAL_RCC_OscConfig+0x4ac>)
 80036ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d0:	4a65      	ldr	r2, [pc, #404]	@ (8003868 <HAL_RCC_OscConfig+0x4ac>)
 80036d2:	f043 0301 	orr.w	r3, r3, #1
 80036d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036d8:	e01c      	b.n	8003714 <HAL_RCC_OscConfig+0x358>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2b05      	cmp	r3, #5
 80036e0:	d10c      	bne.n	80036fc <HAL_RCC_OscConfig+0x340>
 80036e2:	4b61      	ldr	r3, [pc, #388]	@ (8003868 <HAL_RCC_OscConfig+0x4ac>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e6:	4a60      	ldr	r2, [pc, #384]	@ (8003868 <HAL_RCC_OscConfig+0x4ac>)
 80036e8:	f043 0304 	orr.w	r3, r3, #4
 80036ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80036ee:	4b5e      	ldr	r3, [pc, #376]	@ (8003868 <HAL_RCC_OscConfig+0x4ac>)
 80036f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f2:	4a5d      	ldr	r2, [pc, #372]	@ (8003868 <HAL_RCC_OscConfig+0x4ac>)
 80036f4:	f043 0301 	orr.w	r3, r3, #1
 80036f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80036fa:	e00b      	b.n	8003714 <HAL_RCC_OscConfig+0x358>
 80036fc:	4b5a      	ldr	r3, [pc, #360]	@ (8003868 <HAL_RCC_OscConfig+0x4ac>)
 80036fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003700:	4a59      	ldr	r2, [pc, #356]	@ (8003868 <HAL_RCC_OscConfig+0x4ac>)
 8003702:	f023 0301 	bic.w	r3, r3, #1
 8003706:	6713      	str	r3, [r2, #112]	@ 0x70
 8003708:	4b57      	ldr	r3, [pc, #348]	@ (8003868 <HAL_RCC_OscConfig+0x4ac>)
 800370a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800370c:	4a56      	ldr	r2, [pc, #344]	@ (8003868 <HAL_RCC_OscConfig+0x4ac>)
 800370e:	f023 0304 	bic.w	r3, r3, #4
 8003712:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d015      	beq.n	8003748 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371c:	f7fe f82e 	bl	800177c <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003722:	e00a      	b.n	800373a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003724:	f7fe f82a 	bl	800177c <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003732:	4293      	cmp	r3, r2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e0d7      	b.n	80038ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373a:	4b4b      	ldr	r3, [pc, #300]	@ (8003868 <HAL_RCC_OscConfig+0x4ac>)
 800373c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0ee      	beq.n	8003724 <HAL_RCC_OscConfig+0x368>
 8003746:	e014      	b.n	8003772 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003748:	f7fe f818 	bl	800177c <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800374e:	e00a      	b.n	8003766 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003750:	f7fe f814 	bl	800177c <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e0c1      	b.n	80038ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003766:	4b40      	ldr	r3, [pc, #256]	@ (8003868 <HAL_RCC_OscConfig+0x4ac>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1ee      	bne.n	8003750 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003772:	7dfb      	ldrb	r3, [r7, #23]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d105      	bne.n	8003784 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003778:	4b3b      	ldr	r3, [pc, #236]	@ (8003868 <HAL_RCC_OscConfig+0x4ac>)
 800377a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377c:	4a3a      	ldr	r2, [pc, #232]	@ (8003868 <HAL_RCC_OscConfig+0x4ac>)
 800377e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003782:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 80ad 	beq.w	80038e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800378e:	4b36      	ldr	r3, [pc, #216]	@ (8003868 <HAL_RCC_OscConfig+0x4ac>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 030c 	and.w	r3, r3, #12
 8003796:	2b08      	cmp	r3, #8
 8003798:	d060      	beq.n	800385c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d145      	bne.n	800382e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a2:	4b33      	ldr	r3, [pc, #204]	@ (8003870 <HAL_RCC_OscConfig+0x4b4>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a8:	f7fd ffe8 	bl	800177c <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b0:	f7fd ffe4 	bl	800177c <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e093      	b.n	80038ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c2:	4b29      	ldr	r3, [pc, #164]	@ (8003868 <HAL_RCC_OscConfig+0x4ac>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69da      	ldr	r2, [r3, #28]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	019b      	lsls	r3, r3, #6
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e4:	085b      	lsrs	r3, r3, #1
 80037e6:	3b01      	subs	r3, #1
 80037e8:	041b      	lsls	r3, r3, #16
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f0:	061b      	lsls	r3, r3, #24
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f8:	071b      	lsls	r3, r3, #28
 80037fa:	491b      	ldr	r1, [pc, #108]	@ (8003868 <HAL_RCC_OscConfig+0x4ac>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003800:	4b1b      	ldr	r3, [pc, #108]	@ (8003870 <HAL_RCC_OscConfig+0x4b4>)
 8003802:	2201      	movs	r2, #1
 8003804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003806:	f7fd ffb9 	bl	800177c <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800380e:	f7fd ffb5 	bl	800177c <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e064      	b.n	80038ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003820:	4b11      	ldr	r3, [pc, #68]	@ (8003868 <HAL_RCC_OscConfig+0x4ac>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <HAL_RCC_OscConfig+0x452>
 800382c:	e05c      	b.n	80038e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800382e:	4b10      	ldr	r3, [pc, #64]	@ (8003870 <HAL_RCC_OscConfig+0x4b4>)
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7fd ffa2 	bl	800177c <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383c:	f7fd ff9e 	bl	800177c <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e04d      	b.n	80038ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384e:	4b06      	ldr	r3, [pc, #24]	@ (8003868 <HAL_RCC_OscConfig+0x4ac>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f0      	bne.n	800383c <HAL_RCC_OscConfig+0x480>
 800385a:	e045      	b.n	80038e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d107      	bne.n	8003874 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e040      	b.n	80038ea <HAL_RCC_OscConfig+0x52e>
 8003868:	40023800 	.word	0x40023800
 800386c:	40007000 	.word	0x40007000
 8003870:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003874:	4b1f      	ldr	r3, [pc, #124]	@ (80038f4 <HAL_RCC_OscConfig+0x538>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d030      	beq.n	80038e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800388c:	429a      	cmp	r2, r3
 800388e:	d129      	bne.n	80038e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d122      	bne.n	80038e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038a4:	4013      	ands	r3, r2
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d119      	bne.n	80038e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ba:	085b      	lsrs	r3, r3, #1
 80038bc:	3b01      	subs	r3, #1
 80038be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d10f      	bne.n	80038e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d107      	bne.n	80038e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d001      	beq.n	80038e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e000      	b.n	80038ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40023800 	.word	0x40023800

080038f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e07b      	b.n	8003a02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390e:	2b00      	cmp	r3, #0
 8003910:	d108      	bne.n	8003924 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800391a:	d009      	beq.n	8003930 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	61da      	str	r2, [r3, #28]
 8003922:	e005      	b.n	8003930 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d106      	bne.n	8003950 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fd fcee 	bl	800132c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003966:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003978:	431a      	orrs	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039b4:	ea42 0103 	orr.w	r1, r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039bc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	0c1b      	lsrs	r3, r3, #16
 80039ce:	f003 0104 	and.w	r1, r3, #4
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d6:	f003 0210 	and.w	r2, r3, #16
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69da      	ldr	r2, [r3, #28]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b088      	sub	sp, #32
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	603b      	str	r3, [r7, #0]
 8003a16:	4613      	mov	r3, r2
 8003a18:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a1a:	f7fd feaf 	bl	800177c <HAL_GetTick>
 8003a1e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003a20:	88fb      	ldrh	r3, [r7, #6]
 8003a22:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d001      	beq.n	8003a34 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003a30:	2302      	movs	r3, #2
 8003a32:	e12a      	b.n	8003c8a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_SPI_Transmit+0x36>
 8003a3a:	88fb      	ldrh	r3, [r7, #6]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e122      	b.n	8003c8a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_SPI_Transmit+0x48>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e11b      	b.n	8003c8a <HAL_SPI_Transmit+0x280>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	88fa      	ldrh	r2, [r7, #6]
 8003a72:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	88fa      	ldrh	r2, [r7, #6]
 8003a78:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003aa0:	d10f      	bne.n	8003ac2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ab0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ac0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003acc:	2b40      	cmp	r3, #64	@ 0x40
 8003ace:	d007      	beq.n	8003ae0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ade:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ae8:	d152      	bne.n	8003b90 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <HAL_SPI_Transmit+0xee>
 8003af2:	8b7b      	ldrh	r3, [r7, #26]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d145      	bne.n	8003b84 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afc:	881a      	ldrh	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b08:	1c9a      	adds	r2, r3, #2
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b1c:	e032      	b.n	8003b84 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d112      	bne.n	8003b52 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b30:	881a      	ldrh	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3c:	1c9a      	adds	r2, r3, #2
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003b50:	e018      	b.n	8003b84 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b52:	f7fd fe13 	bl	800177c <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d803      	bhi.n	8003b6a <HAL_SPI_Transmit+0x160>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b68:	d102      	bne.n	8003b70 <HAL_SPI_Transmit+0x166>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d109      	bne.n	8003b84 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e082      	b.n	8003c8a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1c7      	bne.n	8003b1e <HAL_SPI_Transmit+0x114>
 8003b8e:	e053      	b.n	8003c38 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_SPI_Transmit+0x194>
 8003b98:	8b7b      	ldrh	r3, [r7, #26]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d147      	bne.n	8003c2e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	330c      	adds	r3, #12
 8003ba8:	7812      	ldrb	r2, [r2, #0]
 8003baa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003bc4:	e033      	b.n	8003c2e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d113      	bne.n	8003bfc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	330c      	adds	r3, #12
 8003bde:	7812      	ldrb	r2, [r2, #0]
 8003be0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003bfa:	e018      	b.n	8003c2e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bfc:	f7fd fdbe 	bl	800177c <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d803      	bhi.n	8003c14 <HAL_SPI_Transmit+0x20a>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c12:	d102      	bne.n	8003c1a <HAL_SPI_Transmit+0x210>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d109      	bne.n	8003c2e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e02d      	b.n	8003c8a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1c6      	bne.n	8003bc6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	6839      	ldr	r1, [r7, #0]
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 fbd9 	bl	80043f4 <SPI_EndRxTxTransaction>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10a      	bne.n	8003c6c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e000      	b.n	8003c8a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003c88:	2300      	movs	r3, #0
  }
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3720      	adds	r7, #32
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b088      	sub	sp, #32
 8003c96:	af02      	add	r7, sp, #8
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	603b      	str	r3, [r7, #0]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d001      	beq.n	8003cb2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e104      	b.n	8003ebc <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cba:	d112      	bne.n	8003ce2 <HAL_SPI_Receive+0x50>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10e      	bne.n	8003ce2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2204      	movs	r2, #4
 8003cc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003ccc:	88fa      	ldrh	r2, [r7, #6]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	68b9      	ldr	r1, [r7, #8]
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 f8f3 	bl	8003ec4 <HAL_SPI_TransmitReceive>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	e0ec      	b.n	8003ebc <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ce2:	f7fd fd4b 	bl	800177c <HAL_GetTick>
 8003ce6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <HAL_SPI_Receive+0x62>
 8003cee:	88fb      	ldrh	r3, [r7, #6]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e0e1      	b.n	8003ebc <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d101      	bne.n	8003d06 <HAL_SPI_Receive+0x74>
 8003d02:	2302      	movs	r3, #2
 8003d04:	e0da      	b.n	8003ebc <HAL_SPI_Receive+0x22a>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2204      	movs	r2, #4
 8003d12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	88fa      	ldrh	r2, [r7, #6]
 8003d26:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	88fa      	ldrh	r2, [r7, #6]
 8003d2c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d54:	d10f      	bne.n	8003d76 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d74:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d80:	2b40      	cmp	r3, #64	@ 0x40
 8003d82:	d007      	beq.n	8003d94 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d92:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d170      	bne.n	8003e7e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d9c:	e035      	b.n	8003e0a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d115      	bne.n	8003dd8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f103 020c 	add.w	r2, r3, #12
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db8:	7812      	ldrb	r2, [r2, #0]
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003dd6:	e018      	b.n	8003e0a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dd8:	f7fd fcd0 	bl	800177c <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d803      	bhi.n	8003df0 <HAL_SPI_Receive+0x15e>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dee:	d102      	bne.n	8003df6 <HAL_SPI_Receive+0x164>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d109      	bne.n	8003e0a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e058      	b.n	8003ebc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1c4      	bne.n	8003d9e <HAL_SPI_Receive+0x10c>
 8003e14:	e038      	b.n	8003e88 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d113      	bne.n	8003e4c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2e:	b292      	uxth	r2, r2
 8003e30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e36:	1c9a      	adds	r2, r3, #2
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e4a:	e018      	b.n	8003e7e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e4c:	f7fd fc96 	bl	800177c <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d803      	bhi.n	8003e64 <HAL_SPI_Receive+0x1d2>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e62:	d102      	bne.n	8003e6a <HAL_SPI_Receive+0x1d8>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d109      	bne.n	8003e7e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e01e      	b.n	8003ebc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1c6      	bne.n	8003e16 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	6839      	ldr	r1, [r7, #0]
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 fa4b 	bl	8004328 <SPI_EndRxTransaction>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003eba:	2300      	movs	r3, #0
  }
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08a      	sub	sp, #40	@ 0x28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ed6:	f7fd fc51 	bl	800177c <HAL_GetTick>
 8003eda:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ee2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003eea:	887b      	ldrh	r3, [r7, #2]
 8003eec:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003eee:	7ffb      	ldrb	r3, [r7, #31]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d00c      	beq.n	8003f0e <HAL_SPI_TransmitReceive+0x4a>
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003efa:	d106      	bne.n	8003f0a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d102      	bne.n	8003f0a <HAL_SPI_TransmitReceive+0x46>
 8003f04:	7ffb      	ldrb	r3, [r7, #31]
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d001      	beq.n	8003f0e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e17f      	b.n	800420e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_SPI_TransmitReceive+0x5c>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_SPI_TransmitReceive+0x5c>
 8003f1a:	887b      	ldrh	r3, [r7, #2]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e174      	b.n	800420e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_SPI_TransmitReceive+0x6e>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e16d      	b.n	800420e <HAL_SPI_TransmitReceive+0x34a>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d003      	beq.n	8003f4e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2205      	movs	r2, #5
 8003f4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	887a      	ldrh	r2, [r7, #2]
 8003f5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	887a      	ldrh	r2, [r7, #2]
 8003f64:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	887a      	ldrh	r2, [r7, #2]
 8003f70:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	887a      	ldrh	r2, [r7, #2]
 8003f76:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f8e:	2b40      	cmp	r3, #64	@ 0x40
 8003f90:	d007      	beq.n	8003fa2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fa0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003faa:	d17e      	bne.n	80040aa <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <HAL_SPI_TransmitReceive+0xf6>
 8003fb4:	8afb      	ldrh	r3, [r7, #22]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d16c      	bne.n	8004094 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbe:	881a      	ldrh	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fca:	1c9a      	adds	r2, r3, #2
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fde:	e059      	b.n	8004094 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d11b      	bne.n	8004026 <HAL_SPI_TransmitReceive+0x162>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d016      	beq.n	8004026 <HAL_SPI_TransmitReceive+0x162>
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d113      	bne.n	8004026 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004002:	881a      	ldrh	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400e:	1c9a      	adds	r2, r3, #2
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b01      	cmp	r3, #1
 8004032:	d119      	bne.n	8004068 <HAL_SPI_TransmitReceive+0x1a4>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d014      	beq.n	8004068 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004048:	b292      	uxth	r2, r2
 800404a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004050:	1c9a      	adds	r2, r3, #2
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800405a:	b29b      	uxth	r3, r3
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004064:	2301      	movs	r3, #1
 8004066:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004068:	f7fd fb88 	bl	800177c <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004074:	429a      	cmp	r2, r3
 8004076:	d80d      	bhi.n	8004094 <HAL_SPI_TransmitReceive+0x1d0>
 8004078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407e:	d009      	beq.n	8004094 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e0bc      	b.n	800420e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1a0      	bne.n	8003fe0 <HAL_SPI_TransmitReceive+0x11c>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d19b      	bne.n	8003fe0 <HAL_SPI_TransmitReceive+0x11c>
 80040a8:	e082      	b.n	80041b0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <HAL_SPI_TransmitReceive+0x1f4>
 80040b2:	8afb      	ldrh	r3, [r7, #22]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d171      	bne.n	800419c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	330c      	adds	r3, #12
 80040c2:	7812      	ldrb	r2, [r2, #0]
 80040c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040de:	e05d      	b.n	800419c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d11c      	bne.n	8004128 <HAL_SPI_TransmitReceive+0x264>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d017      	beq.n	8004128 <HAL_SPI_TransmitReceive+0x264>
 80040f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d114      	bne.n	8004128 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	330c      	adds	r3, #12
 8004108:	7812      	ldrb	r2, [r2, #0]
 800410a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b01      	cmp	r3, #1
 8004134:	d119      	bne.n	800416a <HAL_SPI_TransmitReceive+0x2a6>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d014      	beq.n	800416a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004166:	2301      	movs	r3, #1
 8004168:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800416a:	f7fd fb07 	bl	800177c <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004176:	429a      	cmp	r2, r3
 8004178:	d803      	bhi.n	8004182 <HAL_SPI_TransmitReceive+0x2be>
 800417a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004180:	d102      	bne.n	8004188 <HAL_SPI_TransmitReceive+0x2c4>
 8004182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004184:	2b00      	cmp	r3, #0
 8004186:	d109      	bne.n	800419c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e038      	b.n	800420e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d19c      	bne.n	80040e0 <HAL_SPI_TransmitReceive+0x21c>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d197      	bne.n	80040e0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041b0:	6a3a      	ldr	r2, [r7, #32]
 80041b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f91d 	bl	80043f4 <SPI_EndRxTxTransaction>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2220      	movs	r2, #32
 80041c4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e01d      	b.n	800420e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10a      	bne.n	80041f0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041da:	2300      	movs	r3, #0
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800420c:	2300      	movs	r3, #0
  }
}
 800420e:	4618      	mov	r0, r3
 8004210:	3728      	adds	r7, #40	@ 0x28
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	603b      	str	r3, [r7, #0]
 8004224:	4613      	mov	r3, r2
 8004226:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004228:	f7fd faa8 	bl	800177c <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004230:	1a9b      	subs	r3, r3, r2
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	4413      	add	r3, r2
 8004236:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004238:	f7fd faa0 	bl	800177c <HAL_GetTick>
 800423c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800423e:	4b39      	ldr	r3, [pc, #228]	@ (8004324 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	015b      	lsls	r3, r3, #5
 8004244:	0d1b      	lsrs	r3, r3, #20
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	fb02 f303 	mul.w	r3, r2, r3
 800424c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800424e:	e054      	b.n	80042fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004256:	d050      	beq.n	80042fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004258:	f7fd fa90 	bl	800177c <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	69fa      	ldr	r2, [r7, #28]
 8004264:	429a      	cmp	r2, r3
 8004266:	d902      	bls.n	800426e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d13d      	bne.n	80042ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800427c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004286:	d111      	bne.n	80042ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004290:	d004      	beq.n	800429c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800429a:	d107      	bne.n	80042ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042b4:	d10f      	bne.n	80042d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e017      	b.n	800431a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4013      	ands	r3, r2
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	429a      	cmp	r2, r3
 8004308:	bf0c      	ite	eq
 800430a:	2301      	moveq	r3, #1
 800430c:	2300      	movne	r3, #0
 800430e:	b2db      	uxtb	r3, r3
 8004310:	461a      	mov	r2, r3
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	429a      	cmp	r2, r3
 8004316:	d19b      	bne.n	8004250 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3720      	adds	r7, #32
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	20000000 	.word	0x20000000

08004328 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af02      	add	r7, sp, #8
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800433c:	d111      	bne.n	8004362 <SPI_EndRxTransaction+0x3a>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004346:	d004      	beq.n	8004352 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004350:	d107      	bne.n	8004362 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004360:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800436a:	d12a      	bne.n	80043c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004374:	d012      	beq.n	800439c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2200      	movs	r2, #0
 800437e:	2180      	movs	r1, #128	@ 0x80
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f7ff ff49 	bl	8004218 <SPI_WaitFlagStateUntilTimeout>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d02d      	beq.n	80043e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004390:	f043 0220 	orr.w	r2, r3, #32
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e026      	b.n	80043ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2200      	movs	r2, #0
 80043a4:	2101      	movs	r1, #1
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f7ff ff36 	bl	8004218 <SPI_WaitFlagStateUntilTimeout>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d01a      	beq.n	80043e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b6:	f043 0220 	orr.w	r2, r3, #32
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e013      	b.n	80043ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2200      	movs	r2, #0
 80043ca:	2101      	movs	r1, #1
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f7ff ff23 	bl	8004218 <SPI_WaitFlagStateUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d007      	beq.n	80043e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043dc:	f043 0220 	orr.w	r2, r3, #32
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e000      	b.n	80043ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
	...

080043f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2201      	movs	r2, #1
 8004408:	2102      	movs	r1, #2
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f7ff ff04 	bl	8004218 <SPI_WaitFlagStateUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d007      	beq.n	8004426 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800441a:	f043 0220 	orr.w	r2, r3, #32
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e032      	b.n	800448c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004426:	4b1b      	ldr	r3, [pc, #108]	@ (8004494 <SPI_EndRxTxTransaction+0xa0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a1b      	ldr	r2, [pc, #108]	@ (8004498 <SPI_EndRxTxTransaction+0xa4>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	0d5b      	lsrs	r3, r3, #21
 8004432:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004436:	fb02 f303 	mul.w	r3, r2, r3
 800443a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004444:	d112      	bne.n	800446c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2200      	movs	r2, #0
 800444e:	2180      	movs	r1, #128	@ 0x80
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f7ff fee1 	bl	8004218 <SPI_WaitFlagStateUntilTimeout>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d016      	beq.n	800448a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004460:	f043 0220 	orr.w	r2, r3, #32
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e00f      	b.n	800448c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	3b01      	subs	r3, #1
 8004476:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004482:	2b80      	cmp	r3, #128	@ 0x80
 8004484:	d0f2      	beq.n	800446c <SPI_EndRxTxTransaction+0x78>
 8004486:	e000      	b.n	800448a <SPI_EndRxTxTransaction+0x96>
        break;
 8004488:	bf00      	nop
  }

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3718      	adds	r7, #24
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	20000000 	.word	0x20000000
 8004498:	165e9f81 	.word	0x165e9f81

0800449c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e042      	b.n	8004534 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fc ff7a 	bl	80013bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2224      	movs	r2, #36	@ 0x24
 80044cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f973 	bl	80047cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695a      	ldr	r2, [r3, #20]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004504:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004514:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08a      	sub	sp, #40	@ 0x28
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	4613      	mov	r3, r2
 800454a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b20      	cmp	r3, #32
 800455a:	d175      	bne.n	8004648 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <HAL_UART_Transmit+0x2c>
 8004562:	88fb      	ldrh	r3, [r7, #6]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e06e      	b.n	800464a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2221      	movs	r2, #33	@ 0x21
 8004576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800457a:	f7fd f8ff 	bl	800177c <HAL_GetTick>
 800457e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	88fa      	ldrh	r2, [r7, #6]
 8004584:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	88fa      	ldrh	r2, [r7, #6]
 800458a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004594:	d108      	bne.n	80045a8 <HAL_UART_Transmit+0x6c>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d104      	bne.n	80045a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800459e:	2300      	movs	r3, #0
 80045a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	61bb      	str	r3, [r7, #24]
 80045a6:	e003      	b.n	80045b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045b0:	e02e      	b.n	8004610 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2200      	movs	r2, #0
 80045ba:	2180      	movs	r1, #128	@ 0x80
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f848 	bl	8004652 <UART_WaitOnFlagUntilTimeout>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e03a      	b.n	800464a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10b      	bne.n	80045f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	3302      	adds	r3, #2
 80045ee:	61bb      	str	r3, [r7, #24]
 80045f0:	e007      	b.n	8004602 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	781a      	ldrb	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	3301      	adds	r3, #1
 8004600:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004614:	b29b      	uxth	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1cb      	bne.n	80045b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2200      	movs	r2, #0
 8004622:	2140      	movs	r1, #64	@ 0x40
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 f814 	bl	8004652 <UART_WaitOnFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2220      	movs	r2, #32
 8004634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e006      	b.n	800464a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	e000      	b.n	800464a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004648:	2302      	movs	r3, #2
  }
}
 800464a:	4618      	mov	r0, r3
 800464c:	3720      	adds	r7, #32
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b086      	sub	sp, #24
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	603b      	str	r3, [r7, #0]
 800465e:	4613      	mov	r3, r2
 8004660:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004662:	e03b      	b.n	80046dc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466a:	d037      	beq.n	80046dc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800466c:	f7fd f886 	bl	800177c <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	6a3a      	ldr	r2, [r7, #32]
 8004678:	429a      	cmp	r2, r3
 800467a:	d302      	bcc.n	8004682 <UART_WaitOnFlagUntilTimeout+0x30>
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e03a      	b.n	80046fc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d023      	beq.n	80046dc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b80      	cmp	r3, #128	@ 0x80
 8004698:	d020      	beq.n	80046dc <UART_WaitOnFlagUntilTimeout+0x8a>
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2b40      	cmp	r3, #64	@ 0x40
 800469e:	d01d      	beq.n	80046dc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d116      	bne.n	80046dc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80046ae:	2300      	movs	r3, #0
 80046b0:	617b      	str	r3, [r7, #20]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	617b      	str	r3, [r7, #20]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 f81d 	bl	8004704 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2208      	movs	r2, #8
 80046ce:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e00f      	b.n	80046fc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	4013      	ands	r3, r2
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	bf0c      	ite	eq
 80046ec:	2301      	moveq	r3, #1
 80046ee:	2300      	movne	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	461a      	mov	r2, r3
 80046f4:	79fb      	ldrb	r3, [r7, #7]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d0b4      	beq.n	8004664 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004704:	b480      	push	{r7}
 8004706:	b095      	sub	sp, #84	@ 0x54
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	330c      	adds	r3, #12
 8004712:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004716:	e853 3f00 	ldrex	r3, [r3]
 800471a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800471c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004722:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	330c      	adds	r3, #12
 800472a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800472c:	643a      	str	r2, [r7, #64]	@ 0x40
 800472e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004730:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004732:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004734:	e841 2300 	strex	r3, r2, [r1]
 8004738:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800473a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1e5      	bne.n	800470c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3314      	adds	r3, #20
 8004746:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	e853 3f00 	ldrex	r3, [r3]
 800474e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	f023 0301 	bic.w	r3, r3, #1
 8004756:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3314      	adds	r3, #20
 800475e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004760:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004762:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004764:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004766:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004768:	e841 2300 	strex	r3, r2, [r1]
 800476c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800476e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1e5      	bne.n	8004740 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004778:	2b01      	cmp	r3, #1
 800477a:	d119      	bne.n	80047b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	330c      	adds	r3, #12
 8004782:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	e853 3f00 	ldrex	r3, [r3]
 800478a:	60bb      	str	r3, [r7, #8]
   return(result);
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f023 0310 	bic.w	r3, r3, #16
 8004792:	647b      	str	r3, [r7, #68]	@ 0x44
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	330c      	adds	r3, #12
 800479a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800479c:	61ba      	str	r2, [r7, #24]
 800479e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a0:	6979      	ldr	r1, [r7, #20]
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	e841 2300 	strex	r3, r2, [r1]
 80047a8:	613b      	str	r3, [r7, #16]
   return(result);
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e5      	bne.n	800477c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80047be:	bf00      	nop
 80047c0:	3754      	adds	r7, #84	@ 0x54
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
	...

080047cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d0:	b0c0      	sub	sp, #256	@ 0x100
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e8:	68d9      	ldr	r1, [r3, #12]
 80047ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	ea40 0301 	orr.w	r3, r0, r1
 80047f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	431a      	orrs	r2, r3
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	431a      	orrs	r2, r3
 800480c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004824:	f021 010c 	bic.w	r1, r1, #12
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004832:	430b      	orrs	r3, r1
 8004834:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004846:	6999      	ldr	r1, [r3, #24]
 8004848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	ea40 0301 	orr.w	r3, r0, r1
 8004852:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	4b8f      	ldr	r3, [pc, #572]	@ (8004a98 <UART_SetConfig+0x2cc>)
 800485c:	429a      	cmp	r2, r3
 800485e:	d005      	beq.n	800486c <UART_SetConfig+0xa0>
 8004860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	4b8d      	ldr	r3, [pc, #564]	@ (8004a9c <UART_SetConfig+0x2d0>)
 8004868:	429a      	cmp	r2, r3
 800486a:	d104      	bne.n	8004876 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800486c:	f7fe fb62 	bl	8002f34 <HAL_RCC_GetPCLK2Freq>
 8004870:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004874:	e003      	b.n	800487e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004876:	f7fe fb49 	bl	8002f0c <HAL_RCC_GetPCLK1Freq>
 800487a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800487e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004888:	f040 810c 	bne.w	8004aa4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800488c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004890:	2200      	movs	r2, #0
 8004892:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004896:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800489a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800489e:	4622      	mov	r2, r4
 80048a0:	462b      	mov	r3, r5
 80048a2:	1891      	adds	r1, r2, r2
 80048a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80048a6:	415b      	adcs	r3, r3
 80048a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80048ae:	4621      	mov	r1, r4
 80048b0:	eb12 0801 	adds.w	r8, r2, r1
 80048b4:	4629      	mov	r1, r5
 80048b6:	eb43 0901 	adc.w	r9, r3, r1
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048ce:	4690      	mov	r8, r2
 80048d0:	4699      	mov	r9, r3
 80048d2:	4623      	mov	r3, r4
 80048d4:	eb18 0303 	adds.w	r3, r8, r3
 80048d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048dc:	462b      	mov	r3, r5
 80048de:	eb49 0303 	adc.w	r3, r9, r3
 80048e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80048f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80048fa:	460b      	mov	r3, r1
 80048fc:	18db      	adds	r3, r3, r3
 80048fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004900:	4613      	mov	r3, r2
 8004902:	eb42 0303 	adc.w	r3, r2, r3
 8004906:	657b      	str	r3, [r7, #84]	@ 0x54
 8004908:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800490c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004910:	f7fb fcd6 	bl	80002c0 <__aeabi_uldivmod>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4b61      	ldr	r3, [pc, #388]	@ (8004aa0 <UART_SetConfig+0x2d4>)
 800491a:	fba3 2302 	umull	r2, r3, r3, r2
 800491e:	095b      	lsrs	r3, r3, #5
 8004920:	011c      	lsls	r4, r3, #4
 8004922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004926:	2200      	movs	r2, #0
 8004928:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800492c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004930:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004934:	4642      	mov	r2, r8
 8004936:	464b      	mov	r3, r9
 8004938:	1891      	adds	r1, r2, r2
 800493a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800493c:	415b      	adcs	r3, r3
 800493e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004940:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004944:	4641      	mov	r1, r8
 8004946:	eb12 0a01 	adds.w	sl, r2, r1
 800494a:	4649      	mov	r1, r9
 800494c:	eb43 0b01 	adc.w	fp, r3, r1
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800495c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004960:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004964:	4692      	mov	sl, r2
 8004966:	469b      	mov	fp, r3
 8004968:	4643      	mov	r3, r8
 800496a:	eb1a 0303 	adds.w	r3, sl, r3
 800496e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004972:	464b      	mov	r3, r9
 8004974:	eb4b 0303 	adc.w	r3, fp, r3
 8004978:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800497c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004988:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800498c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004990:	460b      	mov	r3, r1
 8004992:	18db      	adds	r3, r3, r3
 8004994:	643b      	str	r3, [r7, #64]	@ 0x40
 8004996:	4613      	mov	r3, r2
 8004998:	eb42 0303 	adc.w	r3, r2, r3
 800499c:	647b      	str	r3, [r7, #68]	@ 0x44
 800499e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80049a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80049a6:	f7fb fc8b 	bl	80002c0 <__aeabi_uldivmod>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4611      	mov	r1, r2
 80049b0:	4b3b      	ldr	r3, [pc, #236]	@ (8004aa0 <UART_SetConfig+0x2d4>)
 80049b2:	fba3 2301 	umull	r2, r3, r3, r1
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	2264      	movs	r2, #100	@ 0x64
 80049ba:	fb02 f303 	mul.w	r3, r2, r3
 80049be:	1acb      	subs	r3, r1, r3
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80049c6:	4b36      	ldr	r3, [pc, #216]	@ (8004aa0 <UART_SetConfig+0x2d4>)
 80049c8:	fba3 2302 	umull	r2, r3, r3, r2
 80049cc:	095b      	lsrs	r3, r3, #5
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80049d4:	441c      	add	r4, r3
 80049d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049da:	2200      	movs	r2, #0
 80049dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80049e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80049e8:	4642      	mov	r2, r8
 80049ea:	464b      	mov	r3, r9
 80049ec:	1891      	adds	r1, r2, r2
 80049ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80049f0:	415b      	adcs	r3, r3
 80049f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80049f8:	4641      	mov	r1, r8
 80049fa:	1851      	adds	r1, r2, r1
 80049fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80049fe:	4649      	mov	r1, r9
 8004a00:	414b      	adcs	r3, r1
 8004a02:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a04:	f04f 0200 	mov.w	r2, #0
 8004a08:	f04f 0300 	mov.w	r3, #0
 8004a0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a10:	4659      	mov	r1, fp
 8004a12:	00cb      	lsls	r3, r1, #3
 8004a14:	4651      	mov	r1, sl
 8004a16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a1a:	4651      	mov	r1, sl
 8004a1c:	00ca      	lsls	r2, r1, #3
 8004a1e:	4610      	mov	r0, r2
 8004a20:	4619      	mov	r1, r3
 8004a22:	4603      	mov	r3, r0
 8004a24:	4642      	mov	r2, r8
 8004a26:	189b      	adds	r3, r3, r2
 8004a28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a2c:	464b      	mov	r3, r9
 8004a2e:	460a      	mov	r2, r1
 8004a30:	eb42 0303 	adc.w	r3, r2, r3
 8004a34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	18db      	adds	r3, r3, r3
 8004a50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a52:	4613      	mov	r3, r2
 8004a54:	eb42 0303 	adc.w	r3, r2, r3
 8004a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a62:	f7fb fc2d 	bl	80002c0 <__aeabi_uldivmod>
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa0 <UART_SetConfig+0x2d4>)
 8004a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	2164      	movs	r1, #100	@ 0x64
 8004a74:	fb01 f303 	mul.w	r3, r1, r3
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	3332      	adds	r3, #50	@ 0x32
 8004a7e:	4a08      	ldr	r2, [pc, #32]	@ (8004aa0 <UART_SetConfig+0x2d4>)
 8004a80:	fba2 2303 	umull	r2, r3, r2, r3
 8004a84:	095b      	lsrs	r3, r3, #5
 8004a86:	f003 0207 	and.w	r2, r3, #7
 8004a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4422      	add	r2, r4
 8004a92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a94:	e106      	b.n	8004ca4 <UART_SetConfig+0x4d8>
 8004a96:	bf00      	nop
 8004a98:	40011000 	.word	0x40011000
 8004a9c:	40011400 	.word	0x40011400
 8004aa0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004aa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004aae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004ab2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004ab6:	4642      	mov	r2, r8
 8004ab8:	464b      	mov	r3, r9
 8004aba:	1891      	adds	r1, r2, r2
 8004abc:	6239      	str	r1, [r7, #32]
 8004abe:	415b      	adcs	r3, r3
 8004ac0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ac2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ac6:	4641      	mov	r1, r8
 8004ac8:	1854      	adds	r4, r2, r1
 8004aca:	4649      	mov	r1, r9
 8004acc:	eb43 0501 	adc.w	r5, r3, r1
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	00eb      	lsls	r3, r5, #3
 8004ada:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ade:	00e2      	lsls	r2, r4, #3
 8004ae0:	4614      	mov	r4, r2
 8004ae2:	461d      	mov	r5, r3
 8004ae4:	4643      	mov	r3, r8
 8004ae6:	18e3      	adds	r3, r4, r3
 8004ae8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004aec:	464b      	mov	r3, r9
 8004aee:	eb45 0303 	adc.w	r3, r5, r3
 8004af2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b06:	f04f 0200 	mov.w	r2, #0
 8004b0a:	f04f 0300 	mov.w	r3, #0
 8004b0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b12:	4629      	mov	r1, r5
 8004b14:	008b      	lsls	r3, r1, #2
 8004b16:	4621      	mov	r1, r4
 8004b18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	008a      	lsls	r2, r1, #2
 8004b20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b24:	f7fb fbcc 	bl	80002c0 <__aeabi_uldivmod>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4b60      	ldr	r3, [pc, #384]	@ (8004cb0 <UART_SetConfig+0x4e4>)
 8004b2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	011c      	lsls	r4, r3, #4
 8004b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b48:	4642      	mov	r2, r8
 8004b4a:	464b      	mov	r3, r9
 8004b4c:	1891      	adds	r1, r2, r2
 8004b4e:	61b9      	str	r1, [r7, #24]
 8004b50:	415b      	adcs	r3, r3
 8004b52:	61fb      	str	r3, [r7, #28]
 8004b54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b58:	4641      	mov	r1, r8
 8004b5a:	1851      	adds	r1, r2, r1
 8004b5c:	6139      	str	r1, [r7, #16]
 8004b5e:	4649      	mov	r1, r9
 8004b60:	414b      	adcs	r3, r1
 8004b62:	617b      	str	r3, [r7, #20]
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b70:	4659      	mov	r1, fp
 8004b72:	00cb      	lsls	r3, r1, #3
 8004b74:	4651      	mov	r1, sl
 8004b76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b7a:	4651      	mov	r1, sl
 8004b7c:	00ca      	lsls	r2, r1, #3
 8004b7e:	4610      	mov	r0, r2
 8004b80:	4619      	mov	r1, r3
 8004b82:	4603      	mov	r3, r0
 8004b84:	4642      	mov	r2, r8
 8004b86:	189b      	adds	r3, r3, r2
 8004b88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b8c:	464b      	mov	r3, r9
 8004b8e:	460a      	mov	r2, r1
 8004b90:	eb42 0303 	adc.w	r3, r2, r3
 8004b94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ba2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ba4:	f04f 0200 	mov.w	r2, #0
 8004ba8:	f04f 0300 	mov.w	r3, #0
 8004bac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004bb0:	4649      	mov	r1, r9
 8004bb2:	008b      	lsls	r3, r1, #2
 8004bb4:	4641      	mov	r1, r8
 8004bb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bba:	4641      	mov	r1, r8
 8004bbc:	008a      	lsls	r2, r1, #2
 8004bbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004bc2:	f7fb fb7d 	bl	80002c0 <__aeabi_uldivmod>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	460b      	mov	r3, r1
 8004bca:	4611      	mov	r1, r2
 8004bcc:	4b38      	ldr	r3, [pc, #224]	@ (8004cb0 <UART_SetConfig+0x4e4>)
 8004bce:	fba3 2301 	umull	r2, r3, r3, r1
 8004bd2:	095b      	lsrs	r3, r3, #5
 8004bd4:	2264      	movs	r2, #100	@ 0x64
 8004bd6:	fb02 f303 	mul.w	r3, r2, r3
 8004bda:	1acb      	subs	r3, r1, r3
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	3332      	adds	r3, #50	@ 0x32
 8004be0:	4a33      	ldr	r2, [pc, #204]	@ (8004cb0 <UART_SetConfig+0x4e4>)
 8004be2:	fba2 2303 	umull	r2, r3, r2, r3
 8004be6:	095b      	lsrs	r3, r3, #5
 8004be8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bec:	441c      	add	r4, r3
 8004bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bf6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004bf8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004bfc:	4642      	mov	r2, r8
 8004bfe:	464b      	mov	r3, r9
 8004c00:	1891      	adds	r1, r2, r2
 8004c02:	60b9      	str	r1, [r7, #8]
 8004c04:	415b      	adcs	r3, r3
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c0c:	4641      	mov	r1, r8
 8004c0e:	1851      	adds	r1, r2, r1
 8004c10:	6039      	str	r1, [r7, #0]
 8004c12:	4649      	mov	r1, r9
 8004c14:	414b      	adcs	r3, r1
 8004c16:	607b      	str	r3, [r7, #4]
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	f04f 0300 	mov.w	r3, #0
 8004c20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c24:	4659      	mov	r1, fp
 8004c26:	00cb      	lsls	r3, r1, #3
 8004c28:	4651      	mov	r1, sl
 8004c2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c2e:	4651      	mov	r1, sl
 8004c30:	00ca      	lsls	r2, r1, #3
 8004c32:	4610      	mov	r0, r2
 8004c34:	4619      	mov	r1, r3
 8004c36:	4603      	mov	r3, r0
 8004c38:	4642      	mov	r2, r8
 8004c3a:	189b      	adds	r3, r3, r2
 8004c3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c3e:	464b      	mov	r3, r9
 8004c40:	460a      	mov	r2, r1
 8004c42:	eb42 0303 	adc.w	r3, r2, r3
 8004c46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c52:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c60:	4649      	mov	r1, r9
 8004c62:	008b      	lsls	r3, r1, #2
 8004c64:	4641      	mov	r1, r8
 8004c66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c6a:	4641      	mov	r1, r8
 8004c6c:	008a      	lsls	r2, r1, #2
 8004c6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c72:	f7fb fb25 	bl	80002c0 <__aeabi_uldivmod>
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb0 <UART_SetConfig+0x4e4>)
 8004c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c80:	095b      	lsrs	r3, r3, #5
 8004c82:	2164      	movs	r1, #100	@ 0x64
 8004c84:	fb01 f303 	mul.w	r3, r1, r3
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	3332      	adds	r3, #50	@ 0x32
 8004c8e:	4a08      	ldr	r2, [pc, #32]	@ (8004cb0 <UART_SetConfig+0x4e4>)
 8004c90:	fba2 2303 	umull	r2, r3, r2, r3
 8004c94:	095b      	lsrs	r3, r3, #5
 8004c96:	f003 020f 	and.w	r2, r3, #15
 8004c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4422      	add	r2, r4
 8004ca2:	609a      	str	r2, [r3, #8]
}
 8004ca4:	bf00      	nop
 8004ca6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004caa:	46bd      	mov	sp, r7
 8004cac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cb0:	51eb851f 	.word	0x51eb851f

08004cb4 <cs_Low>:
/**
  * @brief  cs_Low Activa la línea CS (Chip Select) llevándola a nivel bajo.
  * @note   Utilizado para iniciar una comunicación SPI con la tarjeta SD.
  */
void cs_Low(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004cbe:	4802      	ldr	r0, [pc, #8]	@ (8004cc8 <cs_Low+0x14>)
 8004cc0:	f7fd f81e 	bl	8001d00 <HAL_GPIO_WritePin>
}
 8004cc4:	bf00      	nop
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40020400 	.word	0x40020400

08004ccc <cs_High>:
/**
  * @brief  cs_High Desactiva la línea CS (Chip Select) llevándola a nivel alto.
  * @note   Utilizado para finalizar una comunicación SPI con la tarjeta SD.
  */
void cs_High(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004cd6:	4802      	ldr	r0, [pc, #8]	@ (8004ce0 <cs_High+0x14>)
 8004cd8:	f7fd f812 	bl	8001d00 <HAL_GPIO_WritePin>
}
 8004cdc:	bf00      	nop
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40020400 	.word	0x40020400

08004ce4 <sd_Delay>:
/**
  * @brief  Ejecuta delay en milisegundos.
  * @param  ms: Milisegundos.
  */
void sd_Delay(uint32_t ms)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7fc fd51 	bl	8001794 <HAL_Delay>
}
 8004cf2:	bf00      	nop
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <sd_TransmitReceive>:
  * @param  dataRx: Puntero al buffer donde se almacenarán los datos recibidos.
  * @param  size: Tamaño del buffer en bytes que se envían y reciben.
  * @retval Código de error de tipo sd_err_t
  */
sd_err_t sd_TransmitReceive(const uint8_t *dataTx, uint8_t *dataRx, uint16_t size)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af02      	add	r7, sp, #8
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	4613      	mov	r3, r2
 8004d08:	80fb      	strh	r3, [r7, #6]
	return (sd_err_t)HAL_SPI_TransmitReceive(&hspi2, dataTx, dataRx, size, HAL_MAX_DELAY);
 8004d0a:	88fb      	ldrh	r3, [r7, #6]
 8004d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d10:	9200      	str	r2, [sp, #0]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	68f9      	ldr	r1, [r7, #12]
 8004d16:	4804      	ldr	r0, [pc, #16]	@ (8004d28 <sd_TransmitReceive+0x2c>)
 8004d18:	f7ff f8d4 	bl	8003ec4 <HAL_SPI_TransmitReceive>
 8004d1c:	4603      	mov	r3, r0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	20000174 	.word	0x20000174

08004d2c <sd_Transmit>:
  * @param  dataTx: Puntero al buffer de datos a transmitir.
  * @param  size: Cantidad de bytes a enviar.
  * @retval Código de error de tipo sd_err_t
  */
sd_err_t sd_Transmit(const uint8_t *dataTx, uint16_t size)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	807b      	strh	r3, [r7, #2]
	return (sd_err_t)HAL_SPI_Transmit(&hspi2, dataTx, size, HAL_MAX_DELAY);
 8004d38:	887a      	ldrh	r2, [r7, #2]
 8004d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	4803      	ldr	r0, [pc, #12]	@ (8004d50 <sd_Transmit+0x24>)
 8004d42:	f7fe fe62 	bl	8003a0a <HAL_SPI_Transmit>
 8004d46:	4603      	mov	r3, r0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	20000174 	.word	0x20000174

08004d54 <sd_Receive>:
  * @param  dataRx: Puntero al buffer donde se almacenarán los datos recibidos.
  * @param  size: Cantidad de bytes a recibir.
  * @retval Código de error de tipo sd_err_t
  */
sd_err_t sd_Receive(uint8_t *dataRx, uint16_t size)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	807b      	strh	r3, [r7, #2]
	return (sd_err_t)HAL_SPI_Receive(&hspi2, dataRx, size, HAL_MAX_DELAY);
 8004d60:	887a      	ldrh	r2, [r7, #2]
 8004d62:	f04f 33ff 	mov.w	r3, #4294967295
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	4803      	ldr	r0, [pc, #12]	@ (8004d78 <sd_Receive+0x24>)
 8004d6a:	f7fe ff92 	bl	8003c92 <HAL_SPI_Receive>
 8004d6e:	4603      	mov	r3, r0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	20000174 	.word	0x20000174

08004d7c <SD_init>:
  * @note   Realiza el procedimiento CMD0 -> CMD8 -> ACMD41.
  * @retval SD_OK: si la inicialización fue exitosa
  * 		SD_ERROR: caso contrario.
  */
sd_err_t SD_init()
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
	send_dummy_clocks();
 8004d80:	f000 f8ec 	bl	8004f5c <send_dummy_clocks>

	if(send_CMD0() != SD_OK) return SD_ERROR;
 8004d84:	f000 f96e 	bl	8005064 <send_CMD0>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <SD_init+0x16>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e010      	b.n	8004db4 <SD_init+0x38>

	sd_dummy();
 8004d92:	f000 f8d3 	bl	8004f3c <sd_dummy>

	if(send_CMD8() != SD_OK) return SD_ERROR;
 8004d96:	f000 f989 	bl	80050ac <send_CMD8>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <SD_init+0x28>
 8004da0:	2301      	movs	r3, #1
 8004da2:	e007      	b.n	8004db4 <SD_init+0x38>

	sd_dummy();
 8004da4:	f000 f8ca 	bl	8004f3c <sd_dummy>

	send_ACMD41(false);
 8004da8:	2000      	movs	r0, #0
 8004daa:	f000 f9cf 	bl	800514c <send_ACMD41>

	sd_dummy();
 8004dae:	f000 f8c5 	bl	8004f3c <sd_dummy>

	return SD_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <SD_read>:
  * @param  buffer: Puntero al buffer de destino.
  * @retval SD_OK: si la lectura fue exitosa.
  * 		SD_ERROR: caso contrario.
  */
sd_err_t SD_read(uint32_t block_addr, uint8_t *buffer)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
	uint8_t token;
	uint8_t crc;

	sd_dummy();
 8004dc2:	f000 f8bb 	bl	8004f3c <sd_dummy>
	sd_dummy();
 8004dc6:	f000 f8b9 	bl	8004f3c <sd_dummy>
	sd_dummy();
 8004dca:	f000 f8b7 	bl	8004f3c <sd_dummy>

	if (sd_send_cmd(CMD17, block_addr, 0x01, true) != 0x00)
 8004dce:	2301      	movs	r3, #1
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	2051      	movs	r0, #81	@ 0x51
 8004dd6:	f000 f8f7 	bl	8004fc8 <sd_send_cmd>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <SD_read+0x2c>
	{
		return SD_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e034      	b.n	8004e4e <SD_read+0x96>
	}

	cs_Low();
 8004de4:	f7ff ff66 	bl	8004cb4 <cs_Low>
	for (int i = 0; i < 10000; i++) {
 8004de8:	2300      	movs	r3, #0
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	e00c      	b.n	8004e08 <SD_read+0x50>
		sd_TransmitReceive(&dummy, &token, 1);
 8004dee:	f107 030b 	add.w	r3, r7, #11
 8004df2:	2201      	movs	r2, #1
 8004df4:	4619      	mov	r1, r3
 8004df6:	4818      	ldr	r0, [pc, #96]	@ (8004e58 <SD_read+0xa0>)
 8004df8:	f7ff ff80 	bl	8004cfc <sd_TransmitReceive>
		if (token == 0xFE) break;
 8004dfc:	7afb      	ldrb	r3, [r7, #11]
 8004dfe:	2bfe      	cmp	r3, #254	@ 0xfe
 8004e00:	d008      	beq.n	8004e14 <SD_read+0x5c>
	for (int i = 0; i < 10000; i++) {
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3301      	adds	r3, #1
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	dded      	ble.n	8004dee <SD_read+0x36>
 8004e12:	e000      	b.n	8004e16 <SD_read+0x5e>
		if (token == 0xFE) break;
 8004e14:	bf00      	nop
	}

	sd_Receive(buffer, SD_BLOCK_SIZE);
 8004e16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004e1a:	6838      	ldr	r0, [r7, #0]
 8004e1c:	f7ff ff9a 	bl	8004d54 <sd_Receive>
	// discard CRC
	sd_Receive(&crc, 1);
 8004e20:	f107 030a 	add.w	r3, r7, #10
 8004e24:	2101      	movs	r1, #1
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff ff94 	bl	8004d54 <sd_Receive>
	sd_Receive(&crc, 1);
 8004e2c:	f107 030a 	add.w	r3, r7, #10
 8004e30:	2101      	movs	r1, #1
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff ff8e 	bl	8004d54 <sd_Receive>
	cs_High();
 8004e38:	f7ff ff48 	bl	8004ccc <cs_High>

	waitBusy();
 8004e3c:	f000 f8ac 	bl	8004f98 <waitBusy>

	sd_dummy();
 8004e40:	f000 f87c 	bl	8004f3c <sd_dummy>
	sd_dummy();
 8004e44:	f000 f87a 	bl	8004f3c <sd_dummy>
	sd_dummy();
 8004e48:	f000 f878 	bl	8004f3c <sd_dummy>

	return SD_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	080069ec 	.word	0x080069ec

08004e5c <SD_write>:
  * @param  buffer: Puntero al buffer de origen que contiene los 512 bytes a escribir.
  * @retval SD_OK: si la escritura fue aceptada y completada.
  *			SD_ERROR: si la respuesta fue negativa o si el token fue rechazado.
  */
sd_err_t SD_write(uint32_t block_addr, const uint8_t *buffer)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
	waitBusy();
 8004e66:	f000 f897 	bl	8004f98 <waitBusy>

	send_ACMD41(true);
 8004e6a:	2001      	movs	r0, #1
 8004e6c:	f000 f96e 	bl	800514c <send_ACMD41>

	sd_dummy();
 8004e70:	f000 f864 	bl	8004f3c <sd_dummy>
	sd_dummy();
 8004e74:	f000 f862 	bl	8004f3c <sd_dummy>

	cs_Low();
 8004e78:	f7ff ff1c 	bl	8004cb4 <cs_Low>
	uint8_t ret = sd_send_cmd(CMD24, block_addr, 0x01, false);
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	2201      	movs	r2, #1
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	2058      	movs	r0, #88	@ 0x58
 8004e84:	f000 f8a0 	bl	8004fc8 <sd_send_cmd>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	73fb      	strb	r3, [r7, #15]
	if (ret != 0x00) {
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <SD_write+0x3e>
		cs_High();
 8004e92:	f7ff ff1b 	bl	8004ccc <cs_High>
		return SD_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e026      	b.n	8004ee8 <SD_write+0x8c>
	}

	sd_Transmit(&start_token, 1);
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	4814      	ldr	r0, [pc, #80]	@ (8004ef0 <SD_write+0x94>)
 8004e9e:	f7ff ff45 	bl	8004d2c <sd_Transmit>
	sd_Transmit((uint8_t *)buffer, SD_BLOCK_SIZE);
 8004ea2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004ea6:	6838      	ldr	r0, [r7, #0]
 8004ea8:	f7ff ff40 	bl	8004d2c <sd_Transmit>
	uint8_t crc[2] = {0xFF, 0xFF};
 8004eac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004eb0:	81bb      	strh	r3, [r7, #12]
	sd_Transmit(crc, 2);
 8004eb2:	f107 030c 	add.w	r3, r7, #12
 8004eb6:	2102      	movs	r1, #2
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff ff37 	bl	8004d2c <sd_Transmit>

	uint8_t resp;
	sd_TransmitReceive(&dummy, &resp, 1);
 8004ebe:	f107 030b 	add.w	r3, r7, #11
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	480b      	ldr	r0, [pc, #44]	@ (8004ef4 <SD_write+0x98>)
 8004ec8:	f7ff ff18 	bl	8004cfc <sd_TransmitReceive>
	if ((resp & 0x1F) != 0x05) {
 8004ecc:	7afb      	ldrb	r3, [r7, #11]
 8004ece:	f003 031f 	and.w	r3, r3, #31
 8004ed2:	2b05      	cmp	r3, #5
 8004ed4:	d003      	beq.n	8004ede <SD_write+0x82>
		cs_High();
 8004ed6:	f7ff fef9 	bl	8004ccc <cs_High>
		return SD_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e004      	b.n	8004ee8 <SD_write+0x8c>
	}

	cs_High();
 8004ede:	f7ff fef5 	bl	8004ccc <cs_High>

	waitBusy();
 8004ee2:	f000 f859 	bl	8004f98 <waitBusy>

	return SD_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	080069ed 	.word	0x080069ed
 8004ef4:	080069ec 	.word	0x080069ec

08004ef8 <SD_erase>:
  * @param  block_addr: Dirección del bloque a sobrescribir.
  * @retval SD_OK: si la operación fue exitosa
  * 		SD_ERROR: caso contrario.
  */
sd_err_t SD_erase(uint32_t block_addr)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f04:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004f08:	6018      	str	r0, [r3, #0]
    uint8_t buffer[SD_BLOCK_SIZE];
    memset(buffer, 0xFF, sizeof(buffer));
 8004f0a:	f107 0308 	add.w	r3, r7, #8
 8004f0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f12:	21ff      	movs	r1, #255	@ 0xff
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 fc2e 	bl	8005776 <memset>

    return SD_write(block_addr, buffer);
 8004f1a:	f107 0208 	add.w	r2, r7, #8
 8004f1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f22:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004f26:	4611      	mov	r1, r2
 8004f28:	6818      	ldr	r0, [r3, #0]
 8004f2a:	f7ff ff97 	bl	8004e5c <SD_write>
 8004f2e:	4603      	mov	r3, r0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <sd_dummy>:
  * @note   Necesario luego de completar un comando. Genera 8 ciclos de clock dummy
  * 		para que la tarjeta SD pueda completar procesos internos. Mantiene la linea
  * 		SPI activa.
  */
static void sd_dummy()
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
	cs_High();
 8004f40:	f7ff fec4 	bl	8004ccc <cs_High>
	sd_Transmit(&dummy, 1);
 8004f44:	2101      	movs	r1, #1
 8004f46:	4804      	ldr	r0, [pc, #16]	@ (8004f58 <sd_dummy+0x1c>)
 8004f48:	f7ff fef0 	bl	8004d2c <sd_Transmit>
	sd_Delay(1);
 8004f4c:	2001      	movs	r0, #1
 8004f4e:	f7ff fec9 	bl	8004ce4 <sd_Delay>
}
 8004f52:	bf00      	nop
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	080069ec 	.word	0x080069ec

08004f5c <send_dummy_clocks>:
  * @brief  Envía 80 ciclos de reloj (10 bytes dummy) con CS alto.
  * @note   Requerido por el estándar de inicialización de tarjetas SD en modo SPI.
  * 		Permite salir a la SD de modo reset y prepararse para recibir comandos
  */
static void send_dummy_clocks()
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
	cs_High();
 8004f62:	f7ff feb3 	bl	8004ccc <cs_High>
	sd_Delay(10);
 8004f66:	200a      	movs	r0, #10
 8004f68:	f7ff febc 	bl	8004ce4 <sd_Delay>
	for (int i = 0; i < 10; i++) {
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	607b      	str	r3, [r7, #4]
 8004f70:	e008      	b.n	8004f84 <send_dummy_clocks+0x28>
		cs_High();
 8004f72:	f7ff feab 	bl	8004ccc <cs_High>
		sd_Transmit(&dummy, 1);
 8004f76:	2101      	movs	r1, #1
 8004f78:	4806      	ldr	r0, [pc, #24]	@ (8004f94 <send_dummy_clocks+0x38>)
 8004f7a:	f7ff fed7 	bl	8004d2c <sd_Transmit>
	for (int i = 0; i < 10; i++) {
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3301      	adds	r3, #1
 8004f82:	607b      	str	r3, [r7, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b09      	cmp	r3, #9
 8004f88:	ddf3      	ble.n	8004f72 <send_dummy_clocks+0x16>
	}
}
 8004f8a:	bf00      	nop
 8004f8c:	bf00      	nop
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	080069ec 	.word	0x080069ec

08004f98 <waitBusy>:
/**
  * @brief  Espera hasta que la SD card se libere.
  * @note   Envía dummy hasta recibir una respuesta distinta de 0x00.
  */
static void waitBusy()
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
	uint8_t resp;
	do {
		cs_High();
 8004f9e:	f7ff fe95 	bl	8004ccc <cs_High>
		sd_TransmitReceive(&dummy, &resp, 1);
 8004fa2:	1dfb      	adds	r3, r7, #7
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	4806      	ldr	r0, [pc, #24]	@ (8004fc4 <waitBusy+0x2c>)
 8004faa:	f7ff fea7 	bl	8004cfc <sd_TransmitReceive>
		sd_Delay(1);
 8004fae:	2001      	movs	r0, #1
 8004fb0:	f7ff fe98 	bl	8004ce4 <sd_Delay>
	} while (resp == 0x00);
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0f1      	beq.n	8004f9e <waitBusy+0x6>
}
 8004fba:	bf00      	nop
 8004fbc:	bf00      	nop
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	080069ec 	.word	0x080069ec

08004fc8 <sd_send_cmd>:
  * @param  arg: Argumento de 32 bits del comando.
  * @param  crc: CRC del comando (obligatorio solo para algunos comandos).
  * @retval Respuesta R1 del comando (byte de estado).
  */
static uint8_t sd_send_cmd(uint8_t cmd, uint32_t arg, uint8_t crc, bool cs)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6039      	str	r1, [r7, #0]
 8004fd0:	4611      	mov	r1, r2
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	71fb      	strb	r3, [r7, #7]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	71bb      	strb	r3, [r7, #6]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	717b      	strb	r3, [r7, #5]
    uint8_t buf[6];
    uint8_t resp = 0xFF;
 8004fe0:	23ff      	movs	r3, #255	@ 0xff
 8004fe2:	72fb      	strb	r3, [r7, #11]

    buf[0] = cmd;
 8004fe4:	79fb      	ldrb	r3, [r7, #7]
 8004fe6:	733b      	strb	r3, [r7, #12]
    buf[1] = (arg >> 24) & 0xFF;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	0e1b      	lsrs	r3, r3, #24
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	737b      	strb	r3, [r7, #13]
    buf[2] = (arg >> 16) & 0xFF;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	0c1b      	lsrs	r3, r3, #16
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	73bb      	strb	r3, [r7, #14]
    buf[3] = (arg >> 8) & 0xFF;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	0a1b      	lsrs	r3, r3, #8
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	73fb      	strb	r3, [r7, #15]
    buf[4] = arg & 0xFF;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	b2db      	uxtb	r3, r3
 8005004:	743b      	strb	r3, [r7, #16]
    buf[5] = crc;
 8005006:	79bb      	ldrb	r3, [r7, #6]
 8005008:	747b      	strb	r3, [r7, #17]

    cs_Low();
 800500a:	f7ff fe53 	bl	8004cb4 <cs_Low>

    if(sd_Transmit(buf, 6) == SD_OK) // envia comando
 800500e:	f107 030c 	add.w	r3, r7, #12
 8005012:	2106      	movs	r1, #6
 8005014:	4618      	mov	r0, r3
 8005016:	f7ff fe89 	bl	8004d2c <sd_Transmit>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d11a      	bne.n	8005056 <sd_send_cmd+0x8e>
    {
		for (int i = 0; i < 10; i++) {
 8005020:	2300      	movs	r3, #0
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	e00d      	b.n	8005042 <sd_send_cmd+0x7a>
			sd_TransmitReceive(&dummy, &resp, 1); // espera respuesta
 8005026:	f107 030b 	add.w	r3, r7, #11
 800502a:	2201      	movs	r2, #1
 800502c:	4619      	mov	r1, r3
 800502e:	480c      	ldr	r0, [pc, #48]	@ (8005060 <sd_send_cmd+0x98>)
 8005030:	f7ff fe64 	bl	8004cfc <sd_TransmitReceive>
			if ((resp & 0x80) == 0) break;
 8005034:	7afb      	ldrb	r3, [r7, #11]
 8005036:	b25b      	sxtb	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	da06      	bge.n	800504a <sd_send_cmd+0x82>
		for (int i = 0; i < 10; i++) {
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	3301      	adds	r3, #1
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2b09      	cmp	r3, #9
 8005046:	ddee      	ble.n	8005026 <sd_send_cmd+0x5e>
 8005048:	e000      	b.n	800504c <sd_send_cmd+0x84>
			if ((resp & 0x80) == 0) break;
 800504a:	bf00      	nop
		}
		if(cs) cs_High();
 800504c:	797b      	ldrb	r3, [r7, #5]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <sd_send_cmd+0x8e>
 8005052:	f7ff fe3b 	bl	8004ccc <cs_High>
    }

    return resp;
 8005056:	7afb      	ldrb	r3, [r7, #11]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	080069ec 	.word	0x080069ec

08005064 <send_CMD0>:
  * 	  	tras varios intentos la SD card podria estar defectuosa o no conectada.
  * @retval SD_OK: la tarjeta respondió correctamente
  * 		SD_ERROR: caso contrario.
  */
static sd_err_t send_CMD0()
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
	uint8_t tries = 10;
 800506a:	230a      	movs	r3, #10
 800506c:	70fb      	strb	r3, [r7, #3]

	for (int i = 0; i < tries; i++) {
 800506e:	2300      	movs	r3, #0
 8005070:	607b      	str	r3, [r7, #4]
 8005072:	e012      	b.n	800509a <send_CMD0+0x36>
		uint8_t resp = sd_send_cmd(CMD0, 0, 0x95, true);
 8005074:	2301      	movs	r3, #1
 8005076:	2295      	movs	r2, #149	@ 0x95
 8005078:	2100      	movs	r1, #0
 800507a:	2040      	movs	r0, #64	@ 0x40
 800507c:	f7ff ffa4 	bl	8004fc8 <sd_send_cmd>
 8005080:	4603      	mov	r3, r0
 8005082:	70bb      	strb	r3, [r7, #2]
		if (resp == 0x01) return SD_OK;
 8005084:	78bb      	ldrb	r3, [r7, #2]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <send_CMD0+0x2a>
 800508a:	2300      	movs	r3, #0
 800508c:	e00a      	b.n	80050a4 <send_CMD0+0x40>
		sd_Delay(10);
 800508e:	200a      	movs	r0, #10
 8005090:	f7ff fe28 	bl	8004ce4 <sd_Delay>
	for (int i = 0; i < tries; i++) {
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3301      	adds	r3, #1
 8005098:	607b      	str	r3, [r7, #4]
 800509a:	78fb      	ldrb	r3, [r7, #3]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	429a      	cmp	r2, r3
 80050a0:	dbe8      	blt.n	8005074 <send_CMD0+0x10>
	}
	return SD_ERROR;
 80050a2:	2301      	movs	r3, #1
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <send_CMD8>:
  *           - Byte 3: Código de eco (0xAA), debe coincidir con el enviado.
  * @retval SD_OK: si se recibe una respuesta válida R1 = 0x01 y el patrón se lee correctamente.
  *         SD_ERROR: caso contrario
  */
static sd_err_t send_CMD8()
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
	uint8_t r7[4];
	uint8_t resp = sd_send_cmd(CMD8, 0x1AA, 0x87, true);
 80050b2:	2301      	movs	r3, #1
 80050b4:	2287      	movs	r2, #135	@ 0x87
 80050b6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80050ba:	2048      	movs	r0, #72	@ 0x48
 80050bc:	f7ff ff84 	bl	8004fc8 <sd_send_cmd>
 80050c0:	4603      	mov	r3, r0
 80050c2:	747b      	strb	r3, [r7, #17]
	cs_Low();
 80050c4:	f7ff fdf6 	bl	8004cb4 <cs_Low>
	if(resp == 0x01)
 80050c8:	7c7b      	ldrb	r3, [r7, #17]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d136      	bne.n	800513c <send_CMD8+0x90>
	{
		for (int i = 0; i < 4; i++) {
 80050ce:	2300      	movs	r3, #0
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	e01d      	b.n	8005110 <send_CMD8+0x64>
		    uint8_t b = 0xFF;
 80050d4:	23ff      	movs	r3, #255	@ 0xff
 80050d6:	71fb      	strb	r3, [r7, #7]
		    uint16_t timeout = 1000;
 80050d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80050dc:	827b      	strh	r3, [r7, #18]
		    while (b == 0xFF && timeout--) {
 80050de:	e005      	b.n	80050ec <send_CMD8+0x40>
		        sd_TransmitReceive(&dummy, &b, 1);
 80050e0:	1dfb      	adds	r3, r7, #7
 80050e2:	2201      	movs	r2, #1
 80050e4:	4619      	mov	r1, r3
 80050e6:	4818      	ldr	r0, [pc, #96]	@ (8005148 <send_CMD8+0x9c>)
 80050e8:	f7ff fe08 	bl	8004cfc <sd_TransmitReceive>
		    while (b == 0xFF && timeout--) {
 80050ec:	79fb      	ldrb	r3, [r7, #7]
 80050ee:	2bff      	cmp	r3, #255	@ 0xff
 80050f0:	d104      	bne.n	80050fc <send_CMD8+0x50>
 80050f2:	8a7b      	ldrh	r3, [r7, #18]
 80050f4:	1e5a      	subs	r2, r3, #1
 80050f6:	827a      	strh	r2, [r7, #18]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1f1      	bne.n	80050e0 <send_CMD8+0x34>
		    }
		    r7[i] = b;
 80050fc:	79f9      	ldrb	r1, [r7, #7]
 80050fe:	f107 0208 	add.w	r2, r7, #8
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	4413      	add	r3, r2
 8005106:	460a      	mov	r2, r1
 8005108:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 4; i++) {
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	3301      	adds	r3, #1
 800510e:	617b      	str	r3, [r7, #20]
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2b03      	cmp	r3, #3
 8005114:	ddde      	ble.n	80050d4 <send_CMD8+0x28>
		}

		cs_High();
 8005116:	f7ff fdd9 	bl	8004ccc <cs_High>

		uint16_t echo = (r7[2] << 8) | r7[3];
 800511a:	7abb      	ldrb	r3, [r7, #10]
 800511c:	b21b      	sxth	r3, r3
 800511e:	021b      	lsls	r3, r3, #8
 8005120:	b21a      	sxth	r2, r3
 8005122:	7afb      	ldrb	r3, [r7, #11]
 8005124:	b21b      	sxth	r3, r3
 8005126:	4313      	orrs	r3, r2
 8005128:	b21b      	sxth	r3, r3
 800512a:	81fb      	strh	r3, [r7, #14]
		if (echo != 0x1AA) return SD_ERROR;
 800512c:	89fb      	ldrh	r3, [r7, #14]
 800512e:	f5b3 7fd5 	cmp.w	r3, #426	@ 0x1aa
 8005132:	d001      	beq.n	8005138 <send_CMD8+0x8c>
 8005134:	2301      	movs	r3, #1
 8005136:	e002      	b.n	800513e <send_CMD8+0x92>

		return SD_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	e000      	b.n	800513e <send_CMD8+0x92>
	}
	else
	{
		return SD_ERROR;
 800513c:	2301      	movs	r3, #1
	}
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	080069ec 	.word	0x080069ec

0800514c <send_ACMD41>:
  *         Este comando debe repetirse hasta que la respuesta R1 sea 0x00 (indica card lista).
  * @param  force: Si es true, fuerza solo un intento sin bucle de espera (modo "rápido").
  * @retval SD_OK si la tarjeta fue inicializada correctamente, SD_TIMEOUT si se excedieron los intentos.
  */
static sd_err_t send_ACMD41(bool force)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	4603      	mov	r3, r0
 8005154:	71fb      	strb	r3, [r7, #7]
	uint8_t resp = 0xFF;
 8005156:	23ff      	movs	r3, #255	@ 0xff
 8005158:	737b      	strb	r3, [r7, #13]
	uint16_t tries = 10000;
 800515a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800515e:	81fb      	strh	r3, [r7, #14]
	do
	{
		sd_send_cmd(CMD55, 0, 0x01, true); // no es necesario argumento
 8005160:	2301      	movs	r3, #1
 8005162:	2201      	movs	r2, #1
 8005164:	2100      	movs	r1, #0
 8005166:	2077      	movs	r0, #119	@ 0x77
 8005168:	f7ff ff2e 	bl	8004fc8 <sd_send_cmd>

		resp = sd_send_cmd(ACMD41, 0x40000000, 0x01, true); // 0x40000000 -> bit HCS (Host Capacity Support) indica soporte a SDHC/SDXC.
 800516c:	2301      	movs	r3, #1
 800516e:	2201      	movs	r2, #1
 8005170:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005174:	2069      	movs	r0, #105	@ 0x69
 8005176:	f7ff ff27 	bl	8004fc8 <sd_send_cmd>
 800517a:	4603      	mov	r3, r0
 800517c:	737b      	strb	r3, [r7, #13]

		sd_dummy();
 800517e:	f7ff fedd 	bl	8004f3c <sd_dummy>

		tries--;
 8005182:	89fb      	ldrh	r3, [r7, #14]
 8005184:	3b01      	subs	r3, #1
 8005186:	81fb      	strh	r3, [r7, #14]
		if(tries <= 0) {
 8005188:	89fb      	ldrh	r3, [r7, #14]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <send_ACMD41+0x46>
			return SD_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e008      	b.n	80051a4 <send_ACMD41+0x58>
		}

		if(force) break;
 8005192:	79fb      	ldrb	r3, [r7, #7]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d103      	bne.n	80051a0 <send_ACMD41+0x54>
	} while (resp != 0x00);
 8005198:	7b7b      	ldrb	r3, [r7, #13]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1e0      	bne.n	8005160 <send_ACMD41+0x14>
 800519e:	e000      	b.n	80051a2 <send_ACMD41+0x56>
		if(force) break;
 80051a0:	bf00      	nop

	return SD_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <sht30_write_command>:
  * @param  data Puntero al búfer donde se almacenarán los datos leídos.
  * @param  len Cantidad de bytes a leer.
  * @retval Código de error de tipo sht30_err_t
  */
sht30_err_t sht30_write_command(uint16_t cmd)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	4603      	mov	r3, r0
 80051b4:	80fb      	strh	r3, [r7, #6]
	uint8_t data[2] = { cmd >> 8, cmd & 0xFF }; // descompone en 2 bytes
 80051b6:	88fb      	ldrh	r3, [r7, #6]
 80051b8:	0a1b      	lsrs	r3, r3, #8
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	733b      	strb	r3, [r7, #12]
 80051c0:	88fb      	ldrh	r3, [r7, #6]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	737b      	strb	r3, [r7, #13]
	return (sht30_err_t)HAL_I2C_Master_Transmit(&hi2c1, SHT30_I2C_ADDR, data, 2, HAL_MAX_DELAY);
 80051c6:	f107 020c 	add.w	r2, r7, #12
 80051ca:	f04f 33ff 	mov.w	r3, #4294967295
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	2302      	movs	r3, #2
 80051d2:	2188      	movs	r1, #136	@ 0x88
 80051d4:	4803      	ldr	r0, [pc, #12]	@ (80051e4 <sht30_write_command+0x38>)
 80051d6:	f7fc fef1 	bl	8001fbc <HAL_I2C_Master_Transmit>
 80051da:	4603      	mov	r3, r0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	20000120 	.word	0x20000120

080051e8 <sht30_read>:
  * @brief  Lee datos desde el sensor SHT30 por I2C.
  * @param  cmd: Comando de 16 bits a enviar al sensor.
  * @retval Código de error de tipo sht30_err_t
  */
sht30_err_t sht30_read(uint8_t *data, uint16_t len)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af02      	add	r7, sp, #8
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	460b      	mov	r3, r1
 80051f2:	807b      	strh	r3, [r7, #2]
    return (sht30_err_t)HAL_I2C_Master_Receive(&hi2c1, SHT30_I2C_ADDR, data, len, HAL_MAX_DELAY);
 80051f4:	887b      	ldrh	r3, [r7, #2]
 80051f6:	f04f 32ff 	mov.w	r2, #4294967295
 80051fa:	9200      	str	r2, [sp, #0]
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	2188      	movs	r1, #136	@ 0x88
 8005200:	4803      	ldr	r0, [pc, #12]	@ (8005210 <sht30_read+0x28>)
 8005202:	f7fc ffd9 	bl	80021b8 <HAL_I2C_Master_Receive>
 8005206:	4603      	mov	r3, r0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	20000120 	.word	0x20000120

08005214 <sht30_delay>:
/**
  * @brief  Ejecuta delay en milisegundos.
  * @param  ms: Milisegundos.
  */
void sht30_delay(uint32_t ms)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7fc fab9 	bl	8001794 <HAL_Delay>
}
 8005222:	bf00      	nop
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <SHT30_init>:
  * @param  clock_stretching: Indica si se habilita o no el clock stretching.
  * @param  repeatability: Nivel de repetibilidad de la medición (baja, media o alta).
  * @retval sht30_err_t (SHT30_OK si la operación fue exitosa)
  */
sht30_err_t SHT30_init(bool clock_stretching, sht30_repeatability_t repeatability)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b082      	sub	sp, #8
 800522e:	af00      	add	r7, sp, #0
 8005230:	4603      	mov	r3, r0
 8005232:	460a      	mov	r2, r1
 8005234:	71fb      	strb	r3, [r7, #7]
 8005236:	4613      	mov	r3, r2
 8005238:	71bb      	strb	r3, [r7, #6]
	SHT30_config(clock_stretching, repeatability);
 800523a:	79ba      	ldrb	r2, [r7, #6]
 800523c:	79fb      	ldrb	r3, [r7, #7]
 800523e:	4611      	mov	r1, r2
 8005240:	4618      	mov	r0, r3
 8005242:	f000 f807 	bl	8005254 <SHT30_config>
	return SHT30_softReset();
 8005246:	f000 f817 	bl	8005278 <SHT30_softReset>
 800524a:	4603      	mov	r3, r0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <SHT30_config>:
  * @brief  Configura el comando de medición en modo single shot para el SHT30.
  * @param  clock_stretching: Si es true, se habilita el clock stretching durante la conversión.
  * @param  repeatability: Nivel de repetibilidad de la medición (baja, media o alta).
  */
void SHT30_config(bool clock_stretching, sht30_repeatability_t repeatability)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	4603      	mov	r3, r0
 800525c:	460a      	mov	r2, r1
 800525e:	71fb      	strb	r3, [r7, #7]
 8005260:	4613      	mov	r3, r2
 8005262:	71bb      	strb	r3, [r7, #6]
	build_SingleShotCommand(clock_stretching, repeatability);
 8005264:	79ba      	ldrb	r2, [r7, #6]
 8005266:	79fb      	ldrb	r3, [r7, #7]
 8005268:	4611      	mov	r1, r2
 800526a:	4618      	mov	r0, r3
 800526c:	f000 f892 	bl	8005394 <build_SingleShotCommand>
}
 8005270:	bf00      	nop
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <SHT30_softReset>:
/**
  * @brief  Reinicio por software del sensor SHT30.
  * @retval sht30_err_t (SHT30_OK si la operación fue exitosa)
  */
sht30_err_t SHT30_softReset(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
    return sht30_write_command(0x30A2); // comando para soft reset
 800527c:	f243 00a2 	movw	r0, #12450	@ 0x30a2
 8005280:	f7ff ff94 	bl	80051ac <sht30_write_command>
 8005284:	4603      	mov	r3, r0
}
 8005286:	4618      	mov	r0, r3
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <SHT30_readTemperatureAndHumidity>:
  * @retval SHT30_OK si la medición fue exitosa y los CRCs son válidos.
  * 		SHT30_CRC_FAIL si alguna validación CRC falla.
  * 		Otro código de error de tipo sht30_err_t si hubo fallo de comunicación.
  */
sht30_err_t SHT30_readTemperatureAndHumidity(float *temperature, float *humidity)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
	sht30_err_t err;
	err = sht30_write_command(SINGLE_SHOT_CMD);
 8005296:	4b39      	ldr	r3, [pc, #228]	@ (800537c <SHT30_readTemperatureAndHumidity+0xf0>)
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff ff86 	bl	80051ac <sht30_write_command>
 80052a0:	4603      	mov	r3, r0
 80052a2:	75fb      	strb	r3, [r7, #23]
	if(err != SHT30_OK) return err;
 80052a4:	7dfb      	ldrb	r3, [r7, #23]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <SHT30_readTemperatureAndHumidity+0x22>
 80052aa:	7dfb      	ldrb	r3, [r7, #23]
 80052ac:	e061      	b.n	8005372 <SHT30_readTemperatureAndHumidity+0xe6>

	sht30_delay(SINGLE_SHOT_MEASUREMENT_DELAY_MS);
 80052ae:	4b34      	ldr	r3, [pc, #208]	@ (8005380 <SHT30_readTemperatureAndHumidity+0xf4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff ffae 	bl	8005214 <sht30_delay>

	uint8_t data[6];
	err = sht30_read(data, 6);
 80052b8:	f107 030c 	add.w	r3, r7, #12
 80052bc:	2106      	movs	r1, #6
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff ff92 	bl	80051e8 <sht30_read>
 80052c4:	4603      	mov	r3, r0
 80052c6:	75fb      	strb	r3, [r7, #23]
	if (err != SHT30_OK) return err;
 80052c8:	7dfb      	ldrb	r3, [r7, #23]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <SHT30_readTemperatureAndHumidity+0x46>
 80052ce:	7dfb      	ldrb	r3, [r7, #23]
 80052d0:	e04f      	b.n	8005372 <SHT30_readTemperatureAndHumidity+0xe6>

	if (SHT30_CRC8(data, 2) != data[2] || SHT30_CRC8(&data[3], 2) != data[5]) return SHT30_CRC_FAIL;
 80052d2:	f107 030c 	add.w	r3, r7, #12
 80052d6:	2102      	movs	r1, #2
 80052d8:	4618      	mov	r0, r3
 80052da:	f000 f8bb 	bl	8005454 <SHT30_CRC8>
 80052de:	4603      	mov	r3, r0
 80052e0:	461a      	mov	r2, r3
 80052e2:	7bbb      	ldrb	r3, [r7, #14]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d10b      	bne.n	8005300 <SHT30_readTemperatureAndHumidity+0x74>
 80052e8:	f107 030c 	add.w	r3, r7, #12
 80052ec:	3303      	adds	r3, #3
 80052ee:	2102      	movs	r1, #2
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 f8af 	bl	8005454 <SHT30_CRC8>
 80052f6:	4603      	mov	r3, r0
 80052f8:	461a      	mov	r2, r3
 80052fa:	7c7b      	ldrb	r3, [r7, #17]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d001      	beq.n	8005304 <SHT30_readTemperatureAndHumidity+0x78>
 8005300:	2304      	movs	r3, #4
 8005302:	e036      	b.n	8005372 <SHT30_readTemperatureAndHumidity+0xe6>

	uint16_t raw_temp = (data[0] << 8) | data[1];
 8005304:	7b3b      	ldrb	r3, [r7, #12]
 8005306:	b21b      	sxth	r3, r3
 8005308:	021b      	lsls	r3, r3, #8
 800530a:	b21a      	sxth	r2, r3
 800530c:	7b7b      	ldrb	r3, [r7, #13]
 800530e:	b21b      	sxth	r3, r3
 8005310:	4313      	orrs	r3, r2
 8005312:	b21b      	sxth	r3, r3
 8005314:	82bb      	strh	r3, [r7, #20]
	uint16_t raw_hum  = (data[3] << 8) | data[4];
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	b21b      	sxth	r3, r3
 800531a:	021b      	lsls	r3, r3, #8
 800531c:	b21a      	sxth	r2, r3
 800531e:	7c3b      	ldrb	r3, [r7, #16]
 8005320:	b21b      	sxth	r3, r3
 8005322:	4313      	orrs	r3, r2
 8005324:	b21b      	sxth	r3, r3
 8005326:	827b      	strh	r3, [r7, #18]

	*temperature = -45 + 175 * ((float)raw_temp / 65535.0f);
 8005328:	8abb      	ldrh	r3, [r7, #20]
 800532a:	ee07 3a90 	vmov	s15, r3
 800532e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005332:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8005384 <SHT30_readTemperatureAndHumidity+0xf8>
 8005336:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800533a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8005388 <SHT30_readTemperatureAndHumidity+0xfc>
 800533e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005342:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800538c <SHT30_readTemperatureAndHumidity+0x100>
 8005346:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100 * ((float)raw_hum / 65535.0f);
 8005350:	8a7b      	ldrh	r3, [r7, #18]
 8005352:	ee07 3a90 	vmov	s15, r3
 8005356:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800535a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8005384 <SHT30_readTemperatureAndHumidity+0xf8>
 800535e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005362:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8005390 <SHT30_readTemperatureAndHumidity+0x104>
 8005366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	edc3 7a00 	vstr	s15, [r3]

	return SHT30_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	2000000a 	.word	0x2000000a
 8005380:	2000000c 	.word	0x2000000c
 8005384:	477fff00 	.word	0x477fff00
 8005388:	432f0000 	.word	0x432f0000
 800538c:	42340000 	.word	0x42340000
 8005390:	42c80000 	.word	0x42c80000

08005394 <build_SingleShotCommand>:
  * @brief  Función para construir el comando de medición para modo "single shot".
  * @param  clock_stretching: Si es true, se habilita clock stretching (SCL bloqueado durante conversión).
  * @param  repeatability: Nivel de precisión/repetibilidad deseado (alta, media o baja).
  */
static void build_SingleShotCommand(bool clock_stretching, sht30_repeatability_t repeatability)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	4603      	mov	r3, r0
 800539c:	460a      	mov	r2, r1
 800539e:	71fb      	strb	r3, [r7, #7]
 80053a0:	4613      	mov	r3, r2
 80053a2:	71bb      	strb	r3, [r7, #6]
    if (clock_stretching) {
 80053a4:	79fb      	ldrb	r3, [r7, #7]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d021      	beq.n	80053ee <build_SingleShotCommand+0x5a>
        switch (repeatability) {
 80053aa:	79bb      	ldrb	r3, [r7, #6]
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d016      	beq.n	80053de <build_SingleShotCommand+0x4a>
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	dc3e      	bgt.n	8005432 <build_SingleShotCommand+0x9e>
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <build_SingleShotCommand+0x2a>
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d008      	beq.n	80053ce <build_SingleShotCommand+0x3a>
 80053bc:	e039      	b.n	8005432 <build_SingleShotCommand+0x9e>
            case SHT30_REPEATABILITY_HIGH:
            	SINGLE_SHOT_MEASUREMENT_DELAY_MS = 15;
 80053be:	4b23      	ldr	r3, [pc, #140]	@ (800544c <build_SingleShotCommand+0xb8>)
 80053c0:	220f      	movs	r2, #15
 80053c2:	601a      	str	r2, [r3, #0]
            	SINGLE_SHOT_CMD = 0x2C06;
 80053c4:	4b22      	ldr	r3, [pc, #136]	@ (8005450 <build_SingleShotCommand+0xbc>)
 80053c6:	f642 4206 	movw	r2, #11270	@ 0x2c06
 80053ca:	801a      	strh	r2, [r3, #0]
            	return;
 80053cc:	e039      	b.n	8005442 <build_SingleShotCommand+0xae>

            case SHT30_REPEATABILITY_MEDIUM:
            	SINGLE_SHOT_MEASUREMENT_DELAY_MS = 6;
 80053ce:	4b1f      	ldr	r3, [pc, #124]	@ (800544c <build_SingleShotCommand+0xb8>)
 80053d0:	2206      	movs	r2, #6
 80053d2:	601a      	str	r2, [r3, #0]
            	SINGLE_SHOT_CMD = 0x2C0D;
 80053d4:	4b1e      	ldr	r3, [pc, #120]	@ (8005450 <build_SingleShotCommand+0xbc>)
 80053d6:	f642 420d 	movw	r2, #11277	@ 0x2c0d
 80053da:	801a      	strh	r2, [r3, #0]
            	return;
 80053dc:	e031      	b.n	8005442 <build_SingleShotCommand+0xae>

            case SHT30_REPEATABILITY_LOW:
            	SINGLE_SHOT_MEASUREMENT_DELAY_MS = 4;
 80053de:	4b1b      	ldr	r3, [pc, #108]	@ (800544c <build_SingleShotCommand+0xb8>)
 80053e0:	2204      	movs	r2, #4
 80053e2:	601a      	str	r2, [r3, #0]
            	SINGLE_SHOT_CMD = 0x2C10;
 80053e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005450 <build_SingleShotCommand+0xbc>)
 80053e6:	f642 4210 	movw	r2, #11280	@ 0x2c10
 80053ea:	801a      	strh	r2, [r3, #0]
            	return;
 80053ec:	e029      	b.n	8005442 <build_SingleShotCommand+0xae>
        }
    } else {
        switch (repeatability) {
 80053ee:	79bb      	ldrb	r3, [r7, #6]
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d016      	beq.n	8005422 <build_SingleShotCommand+0x8e>
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	dc1c      	bgt.n	8005432 <build_SingleShotCommand+0x9e>
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <build_SingleShotCommand+0x6e>
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d008      	beq.n	8005412 <build_SingleShotCommand+0x7e>
 8005400:	e017      	b.n	8005432 <build_SingleShotCommand+0x9e>
            case SHT30_REPEATABILITY_HIGH:
            	SINGLE_SHOT_MEASUREMENT_DELAY_MS = 15;
 8005402:	4b12      	ldr	r3, [pc, #72]	@ (800544c <build_SingleShotCommand+0xb8>)
 8005404:	220f      	movs	r2, #15
 8005406:	601a      	str	r2, [r3, #0]
            	SINGLE_SHOT_CMD = 0x2400;
 8005408:	4b11      	ldr	r3, [pc, #68]	@ (8005450 <build_SingleShotCommand+0xbc>)
 800540a:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
 800540e:	801a      	strh	r2, [r3, #0]
            	return;
 8005410:	e017      	b.n	8005442 <build_SingleShotCommand+0xae>

            case SHT30_REPEATABILITY_MEDIUM:
            	SINGLE_SHOT_MEASUREMENT_DELAY_MS = 6;
 8005412:	4b0e      	ldr	r3, [pc, #56]	@ (800544c <build_SingleShotCommand+0xb8>)
 8005414:	2206      	movs	r2, #6
 8005416:	601a      	str	r2, [r3, #0]
            	SINGLE_SHOT_CMD = 0x240B;
 8005418:	4b0d      	ldr	r3, [pc, #52]	@ (8005450 <build_SingleShotCommand+0xbc>)
 800541a:	f242 420b 	movw	r2, #9227	@ 0x240b
 800541e:	801a      	strh	r2, [r3, #0]
            	return;
 8005420:	e00f      	b.n	8005442 <build_SingleShotCommand+0xae>

            case SHT30_REPEATABILITY_LOW:
            	SINGLE_SHOT_MEASUREMENT_DELAY_MS = 4;
 8005422:	4b0a      	ldr	r3, [pc, #40]	@ (800544c <build_SingleShotCommand+0xb8>)
 8005424:	2204      	movs	r2, #4
 8005426:	601a      	str	r2, [r3, #0]
            	SINGLE_SHOT_CMD = 0x2416;
 8005428:	4b09      	ldr	r3, [pc, #36]	@ (8005450 <build_SingleShotCommand+0xbc>)
 800542a:	f242 4216 	movw	r2, #9238	@ 0x2416
 800542e:	801a      	strh	r2, [r3, #0]
            	return;
 8005430:	e007      	b.n	8005442 <build_SingleShotCommand+0xae>
        }
    }

    SINGLE_SHOT_MEASUREMENT_DELAY_MS = 15;
 8005432:	4b06      	ldr	r3, [pc, #24]	@ (800544c <build_SingleShotCommand+0xb8>)
 8005434:	220f      	movs	r2, #15
 8005436:	601a      	str	r2, [r3, #0]
	SINGLE_SHOT_CMD = 0x2C06;
 8005438:	4b05      	ldr	r3, [pc, #20]	@ (8005450 <build_SingleShotCommand+0xbc>)
 800543a:	f642 4206 	movw	r2, #11270	@ 0x2c06
 800543e:	801a      	strh	r2, [r3, #0]
    return; // Default fallback
 8005440:	bf00      	nop
}
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	2000000c 	.word	0x2000000c
 8005450:	2000000a 	.word	0x2000000a

08005454 <SHT30_CRC8>:
  * @param  len: Cantidad de bytes a evaluar (usualmente 2).
  * @note	El algoritmo implementado es el definido por Sensirion: 0x31 (x^8 + x^5 + x^4 + 1)
  * @retval uint8_t: Valor de CRC calculado.
  */
static uint8_t SHT30_CRC8(const uint8_t *data, uint8_t len)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	460b      	mov	r3, r1
 800545e:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xFF;
 8005460:	23ff      	movs	r3, #255	@ 0xff
 8005462:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len; i++) {
 8005464:	2300      	movs	r3, #0
 8005466:	73bb      	strb	r3, [r7, #14]
 8005468:	e023      	b.n	80054b2 <SHT30_CRC8+0x5e>
        crc ^= data[i];
 800546a:	7bbb      	ldrb	r3, [r7, #14]
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	4413      	add	r3, r2
 8005470:	781a      	ldrb	r2, [r3, #0]
 8005472:	7bfb      	ldrb	r3, [r7, #15]
 8005474:	4053      	eors	r3, r2
 8005476:	73fb      	strb	r3, [r7, #15]
        for (uint8_t b = 0; b < 8; b++)
 8005478:	2300      	movs	r3, #0
 800547a:	737b      	strb	r3, [r7, #13]
 800547c:	e013      	b.n	80054a6 <SHT30_CRC8+0x52>
            crc = (crc & 0x80) ? (crc << 1) ^ 0x31 : (crc << 1);
 800547e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005482:	2b00      	cmp	r3, #0
 8005484:	da08      	bge.n	8005498 <SHT30_CRC8+0x44>
 8005486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	b25b      	sxtb	r3, r3
 800548e:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8005492:	b25b      	sxtb	r3, r3
 8005494:	b2db      	uxtb	r3, r3
 8005496:	e002      	b.n	800549e <SHT30_CRC8+0x4a>
 8005498:	7bfb      	ldrb	r3, [r7, #15]
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	b2db      	uxtb	r3, r3
 800549e:	73fb      	strb	r3, [r7, #15]
        for (uint8_t b = 0; b < 8; b++)
 80054a0:	7b7b      	ldrb	r3, [r7, #13]
 80054a2:	3301      	adds	r3, #1
 80054a4:	737b      	strb	r3, [r7, #13]
 80054a6:	7b7b      	ldrb	r3, [r7, #13]
 80054a8:	2b07      	cmp	r3, #7
 80054aa:	d9e8      	bls.n	800547e <SHT30_CRC8+0x2a>
    for (uint8_t i = 0; i < len; i++) {
 80054ac:	7bbb      	ldrb	r3, [r7, #14]
 80054ae:	3301      	adds	r3, #1
 80054b0:	73bb      	strb	r3, [r7, #14]
 80054b2:	7bba      	ldrb	r2, [r7, #14]
 80054b4:	78fb      	ldrb	r3, [r7, #3]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d3d7      	bcc.n	800546a <SHT30_CRC8+0x16>
    }
    return crc;
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <__assert_func>:
 80054c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80054ca:	4614      	mov	r4, r2
 80054cc:	461a      	mov	r2, r3
 80054ce:	4b09      	ldr	r3, [pc, #36]	@ (80054f4 <__assert_func+0x2c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4605      	mov	r5, r0
 80054d4:	68d8      	ldr	r0, [r3, #12]
 80054d6:	b14c      	cbz	r4, 80054ec <__assert_func+0x24>
 80054d8:	4b07      	ldr	r3, [pc, #28]	@ (80054f8 <__assert_func+0x30>)
 80054da:	9100      	str	r1, [sp, #0]
 80054dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80054e0:	4906      	ldr	r1, [pc, #24]	@ (80054fc <__assert_func+0x34>)
 80054e2:	462b      	mov	r3, r5
 80054e4:	f000 f8b2 	bl	800564c <fiprintf>
 80054e8:	f000 f9c1 	bl	800586e <abort>
 80054ec:	4b04      	ldr	r3, [pc, #16]	@ (8005500 <__assert_func+0x38>)
 80054ee:	461c      	mov	r4, r3
 80054f0:	e7f3      	b.n	80054da <__assert_func+0x12>
 80054f2:	bf00      	nop
 80054f4:	2000001c 	.word	0x2000001c
 80054f8:	080069ee 	.word	0x080069ee
 80054fc:	080069fb 	.word	0x080069fb
 8005500:	08006a29 	.word	0x08006a29

08005504 <std>:
 8005504:	2300      	movs	r3, #0
 8005506:	b510      	push	{r4, lr}
 8005508:	4604      	mov	r4, r0
 800550a:	e9c0 3300 	strd	r3, r3, [r0]
 800550e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005512:	6083      	str	r3, [r0, #8]
 8005514:	8181      	strh	r1, [r0, #12]
 8005516:	6643      	str	r3, [r0, #100]	@ 0x64
 8005518:	81c2      	strh	r2, [r0, #14]
 800551a:	6183      	str	r3, [r0, #24]
 800551c:	4619      	mov	r1, r3
 800551e:	2208      	movs	r2, #8
 8005520:	305c      	adds	r0, #92	@ 0x5c
 8005522:	f000 f928 	bl	8005776 <memset>
 8005526:	4b0d      	ldr	r3, [pc, #52]	@ (800555c <std+0x58>)
 8005528:	6263      	str	r3, [r4, #36]	@ 0x24
 800552a:	4b0d      	ldr	r3, [pc, #52]	@ (8005560 <std+0x5c>)
 800552c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800552e:	4b0d      	ldr	r3, [pc, #52]	@ (8005564 <std+0x60>)
 8005530:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005532:	4b0d      	ldr	r3, [pc, #52]	@ (8005568 <std+0x64>)
 8005534:	6323      	str	r3, [r4, #48]	@ 0x30
 8005536:	4b0d      	ldr	r3, [pc, #52]	@ (800556c <std+0x68>)
 8005538:	6224      	str	r4, [r4, #32]
 800553a:	429c      	cmp	r4, r3
 800553c:	d006      	beq.n	800554c <std+0x48>
 800553e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005542:	4294      	cmp	r4, r2
 8005544:	d002      	beq.n	800554c <std+0x48>
 8005546:	33d0      	adds	r3, #208	@ 0xd0
 8005548:	429c      	cmp	r4, r3
 800554a:	d105      	bne.n	8005558 <std+0x54>
 800554c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005554:	f000 b988 	b.w	8005868 <__retarget_lock_init_recursive>
 8005558:	bd10      	pop	{r4, pc}
 800555a:	bf00      	nop
 800555c:	080056f1 	.word	0x080056f1
 8005560:	08005713 	.word	0x08005713
 8005564:	0800574b 	.word	0x0800574b
 8005568:	0800576f 	.word	0x0800576f
 800556c:	2000045c 	.word	0x2000045c

08005570 <stdio_exit_handler>:
 8005570:	4a02      	ldr	r2, [pc, #8]	@ (800557c <stdio_exit_handler+0xc>)
 8005572:	4903      	ldr	r1, [pc, #12]	@ (8005580 <stdio_exit_handler+0x10>)
 8005574:	4803      	ldr	r0, [pc, #12]	@ (8005584 <stdio_exit_handler+0x14>)
 8005576:	f000 b87b 	b.w	8005670 <_fwalk_sglue>
 800557a:	bf00      	nop
 800557c:	20000010 	.word	0x20000010
 8005580:	080063c1 	.word	0x080063c1
 8005584:	20000020 	.word	0x20000020

08005588 <cleanup_stdio>:
 8005588:	6841      	ldr	r1, [r0, #4]
 800558a:	4b0c      	ldr	r3, [pc, #48]	@ (80055bc <cleanup_stdio+0x34>)
 800558c:	4299      	cmp	r1, r3
 800558e:	b510      	push	{r4, lr}
 8005590:	4604      	mov	r4, r0
 8005592:	d001      	beq.n	8005598 <cleanup_stdio+0x10>
 8005594:	f000 ff14 	bl	80063c0 <_fflush_r>
 8005598:	68a1      	ldr	r1, [r4, #8]
 800559a:	4b09      	ldr	r3, [pc, #36]	@ (80055c0 <cleanup_stdio+0x38>)
 800559c:	4299      	cmp	r1, r3
 800559e:	d002      	beq.n	80055a6 <cleanup_stdio+0x1e>
 80055a0:	4620      	mov	r0, r4
 80055a2:	f000 ff0d 	bl	80063c0 <_fflush_r>
 80055a6:	68e1      	ldr	r1, [r4, #12]
 80055a8:	4b06      	ldr	r3, [pc, #24]	@ (80055c4 <cleanup_stdio+0x3c>)
 80055aa:	4299      	cmp	r1, r3
 80055ac:	d004      	beq.n	80055b8 <cleanup_stdio+0x30>
 80055ae:	4620      	mov	r0, r4
 80055b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055b4:	f000 bf04 	b.w	80063c0 <_fflush_r>
 80055b8:	bd10      	pop	{r4, pc}
 80055ba:	bf00      	nop
 80055bc:	2000045c 	.word	0x2000045c
 80055c0:	200004c4 	.word	0x200004c4
 80055c4:	2000052c 	.word	0x2000052c

080055c8 <global_stdio_init.part.0>:
 80055c8:	b510      	push	{r4, lr}
 80055ca:	4b0b      	ldr	r3, [pc, #44]	@ (80055f8 <global_stdio_init.part.0+0x30>)
 80055cc:	4c0b      	ldr	r4, [pc, #44]	@ (80055fc <global_stdio_init.part.0+0x34>)
 80055ce:	4a0c      	ldr	r2, [pc, #48]	@ (8005600 <global_stdio_init.part.0+0x38>)
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	4620      	mov	r0, r4
 80055d4:	2200      	movs	r2, #0
 80055d6:	2104      	movs	r1, #4
 80055d8:	f7ff ff94 	bl	8005504 <std>
 80055dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80055e0:	2201      	movs	r2, #1
 80055e2:	2109      	movs	r1, #9
 80055e4:	f7ff ff8e 	bl	8005504 <std>
 80055e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80055ec:	2202      	movs	r2, #2
 80055ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055f2:	2112      	movs	r1, #18
 80055f4:	f7ff bf86 	b.w	8005504 <std>
 80055f8:	20000594 	.word	0x20000594
 80055fc:	2000045c 	.word	0x2000045c
 8005600:	08005571 	.word	0x08005571

08005604 <__sfp_lock_acquire>:
 8005604:	4801      	ldr	r0, [pc, #4]	@ (800560c <__sfp_lock_acquire+0x8>)
 8005606:	f000 b930 	b.w	800586a <__retarget_lock_acquire_recursive>
 800560a:	bf00      	nop
 800560c:	2000059d 	.word	0x2000059d

08005610 <__sfp_lock_release>:
 8005610:	4801      	ldr	r0, [pc, #4]	@ (8005618 <__sfp_lock_release+0x8>)
 8005612:	f000 b92b 	b.w	800586c <__retarget_lock_release_recursive>
 8005616:	bf00      	nop
 8005618:	2000059d 	.word	0x2000059d

0800561c <__sinit>:
 800561c:	b510      	push	{r4, lr}
 800561e:	4604      	mov	r4, r0
 8005620:	f7ff fff0 	bl	8005604 <__sfp_lock_acquire>
 8005624:	6a23      	ldr	r3, [r4, #32]
 8005626:	b11b      	cbz	r3, 8005630 <__sinit+0x14>
 8005628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800562c:	f7ff bff0 	b.w	8005610 <__sfp_lock_release>
 8005630:	4b04      	ldr	r3, [pc, #16]	@ (8005644 <__sinit+0x28>)
 8005632:	6223      	str	r3, [r4, #32]
 8005634:	4b04      	ldr	r3, [pc, #16]	@ (8005648 <__sinit+0x2c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1f5      	bne.n	8005628 <__sinit+0xc>
 800563c:	f7ff ffc4 	bl	80055c8 <global_stdio_init.part.0>
 8005640:	e7f2      	b.n	8005628 <__sinit+0xc>
 8005642:	bf00      	nop
 8005644:	08005589 	.word	0x08005589
 8005648:	20000594 	.word	0x20000594

0800564c <fiprintf>:
 800564c:	b40e      	push	{r1, r2, r3}
 800564e:	b503      	push	{r0, r1, lr}
 8005650:	4601      	mov	r1, r0
 8005652:	ab03      	add	r3, sp, #12
 8005654:	4805      	ldr	r0, [pc, #20]	@ (800566c <fiprintf+0x20>)
 8005656:	f853 2b04 	ldr.w	r2, [r3], #4
 800565a:	6800      	ldr	r0, [r0, #0]
 800565c:	9301      	str	r3, [sp, #4]
 800565e:	f000 fb87 	bl	8005d70 <_vfiprintf_r>
 8005662:	b002      	add	sp, #8
 8005664:	f85d eb04 	ldr.w	lr, [sp], #4
 8005668:	b003      	add	sp, #12
 800566a:	4770      	bx	lr
 800566c:	2000001c 	.word	0x2000001c

08005670 <_fwalk_sglue>:
 8005670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005674:	4607      	mov	r7, r0
 8005676:	4688      	mov	r8, r1
 8005678:	4614      	mov	r4, r2
 800567a:	2600      	movs	r6, #0
 800567c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005680:	f1b9 0901 	subs.w	r9, r9, #1
 8005684:	d505      	bpl.n	8005692 <_fwalk_sglue+0x22>
 8005686:	6824      	ldr	r4, [r4, #0]
 8005688:	2c00      	cmp	r4, #0
 800568a:	d1f7      	bne.n	800567c <_fwalk_sglue+0xc>
 800568c:	4630      	mov	r0, r6
 800568e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005692:	89ab      	ldrh	r3, [r5, #12]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d907      	bls.n	80056a8 <_fwalk_sglue+0x38>
 8005698:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800569c:	3301      	adds	r3, #1
 800569e:	d003      	beq.n	80056a8 <_fwalk_sglue+0x38>
 80056a0:	4629      	mov	r1, r5
 80056a2:	4638      	mov	r0, r7
 80056a4:	47c0      	blx	r8
 80056a6:	4306      	orrs	r6, r0
 80056a8:	3568      	adds	r5, #104	@ 0x68
 80056aa:	e7e9      	b.n	8005680 <_fwalk_sglue+0x10>

080056ac <siprintf>:
 80056ac:	b40e      	push	{r1, r2, r3}
 80056ae:	b510      	push	{r4, lr}
 80056b0:	b09d      	sub	sp, #116	@ 0x74
 80056b2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80056b4:	9002      	str	r0, [sp, #8]
 80056b6:	9006      	str	r0, [sp, #24]
 80056b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80056bc:	480a      	ldr	r0, [pc, #40]	@ (80056e8 <siprintf+0x3c>)
 80056be:	9107      	str	r1, [sp, #28]
 80056c0:	9104      	str	r1, [sp, #16]
 80056c2:	490a      	ldr	r1, [pc, #40]	@ (80056ec <siprintf+0x40>)
 80056c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80056c8:	9105      	str	r1, [sp, #20]
 80056ca:	2400      	movs	r4, #0
 80056cc:	a902      	add	r1, sp, #8
 80056ce:	6800      	ldr	r0, [r0, #0]
 80056d0:	9301      	str	r3, [sp, #4]
 80056d2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80056d4:	f000 fa26 	bl	8005b24 <_svfiprintf_r>
 80056d8:	9b02      	ldr	r3, [sp, #8]
 80056da:	701c      	strb	r4, [r3, #0]
 80056dc:	b01d      	add	sp, #116	@ 0x74
 80056de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056e2:	b003      	add	sp, #12
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	2000001c 	.word	0x2000001c
 80056ec:	ffff0208 	.word	0xffff0208

080056f0 <__sread>:
 80056f0:	b510      	push	{r4, lr}
 80056f2:	460c      	mov	r4, r1
 80056f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056f8:	f000 f868 	bl	80057cc <_read_r>
 80056fc:	2800      	cmp	r0, #0
 80056fe:	bfab      	itete	ge
 8005700:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005702:	89a3      	ldrhlt	r3, [r4, #12]
 8005704:	181b      	addge	r3, r3, r0
 8005706:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800570a:	bfac      	ite	ge
 800570c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800570e:	81a3      	strhlt	r3, [r4, #12]
 8005710:	bd10      	pop	{r4, pc}

08005712 <__swrite>:
 8005712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005716:	461f      	mov	r7, r3
 8005718:	898b      	ldrh	r3, [r1, #12]
 800571a:	05db      	lsls	r3, r3, #23
 800571c:	4605      	mov	r5, r0
 800571e:	460c      	mov	r4, r1
 8005720:	4616      	mov	r6, r2
 8005722:	d505      	bpl.n	8005730 <__swrite+0x1e>
 8005724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005728:	2302      	movs	r3, #2
 800572a:	2200      	movs	r2, #0
 800572c:	f000 f83c 	bl	80057a8 <_lseek_r>
 8005730:	89a3      	ldrh	r3, [r4, #12]
 8005732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005736:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800573a:	81a3      	strh	r3, [r4, #12]
 800573c:	4632      	mov	r2, r6
 800573e:	463b      	mov	r3, r7
 8005740:	4628      	mov	r0, r5
 8005742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005746:	f000 b853 	b.w	80057f0 <_write_r>

0800574a <__sseek>:
 800574a:	b510      	push	{r4, lr}
 800574c:	460c      	mov	r4, r1
 800574e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005752:	f000 f829 	bl	80057a8 <_lseek_r>
 8005756:	1c43      	adds	r3, r0, #1
 8005758:	89a3      	ldrh	r3, [r4, #12]
 800575a:	bf15      	itete	ne
 800575c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800575e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005762:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005766:	81a3      	strheq	r3, [r4, #12]
 8005768:	bf18      	it	ne
 800576a:	81a3      	strhne	r3, [r4, #12]
 800576c:	bd10      	pop	{r4, pc}

0800576e <__sclose>:
 800576e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005772:	f000 b809 	b.w	8005788 <_close_r>

08005776 <memset>:
 8005776:	4402      	add	r2, r0
 8005778:	4603      	mov	r3, r0
 800577a:	4293      	cmp	r3, r2
 800577c:	d100      	bne.n	8005780 <memset+0xa>
 800577e:	4770      	bx	lr
 8005780:	f803 1b01 	strb.w	r1, [r3], #1
 8005784:	e7f9      	b.n	800577a <memset+0x4>
	...

08005788 <_close_r>:
 8005788:	b538      	push	{r3, r4, r5, lr}
 800578a:	4d06      	ldr	r5, [pc, #24]	@ (80057a4 <_close_r+0x1c>)
 800578c:	2300      	movs	r3, #0
 800578e:	4604      	mov	r4, r0
 8005790:	4608      	mov	r0, r1
 8005792:	602b      	str	r3, [r5, #0]
 8005794:	f7fb fee5 	bl	8001562 <_close>
 8005798:	1c43      	adds	r3, r0, #1
 800579a:	d102      	bne.n	80057a2 <_close_r+0x1a>
 800579c:	682b      	ldr	r3, [r5, #0]
 800579e:	b103      	cbz	r3, 80057a2 <_close_r+0x1a>
 80057a0:	6023      	str	r3, [r4, #0]
 80057a2:	bd38      	pop	{r3, r4, r5, pc}
 80057a4:	20000598 	.word	0x20000598

080057a8 <_lseek_r>:
 80057a8:	b538      	push	{r3, r4, r5, lr}
 80057aa:	4d07      	ldr	r5, [pc, #28]	@ (80057c8 <_lseek_r+0x20>)
 80057ac:	4604      	mov	r4, r0
 80057ae:	4608      	mov	r0, r1
 80057b0:	4611      	mov	r1, r2
 80057b2:	2200      	movs	r2, #0
 80057b4:	602a      	str	r2, [r5, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	f7fb fefa 	bl	80015b0 <_lseek>
 80057bc:	1c43      	adds	r3, r0, #1
 80057be:	d102      	bne.n	80057c6 <_lseek_r+0x1e>
 80057c0:	682b      	ldr	r3, [r5, #0]
 80057c2:	b103      	cbz	r3, 80057c6 <_lseek_r+0x1e>
 80057c4:	6023      	str	r3, [r4, #0]
 80057c6:	bd38      	pop	{r3, r4, r5, pc}
 80057c8:	20000598 	.word	0x20000598

080057cc <_read_r>:
 80057cc:	b538      	push	{r3, r4, r5, lr}
 80057ce:	4d07      	ldr	r5, [pc, #28]	@ (80057ec <_read_r+0x20>)
 80057d0:	4604      	mov	r4, r0
 80057d2:	4608      	mov	r0, r1
 80057d4:	4611      	mov	r1, r2
 80057d6:	2200      	movs	r2, #0
 80057d8:	602a      	str	r2, [r5, #0]
 80057da:	461a      	mov	r2, r3
 80057dc:	f7fb fe88 	bl	80014f0 <_read>
 80057e0:	1c43      	adds	r3, r0, #1
 80057e2:	d102      	bne.n	80057ea <_read_r+0x1e>
 80057e4:	682b      	ldr	r3, [r5, #0]
 80057e6:	b103      	cbz	r3, 80057ea <_read_r+0x1e>
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	bd38      	pop	{r3, r4, r5, pc}
 80057ec:	20000598 	.word	0x20000598

080057f0 <_write_r>:
 80057f0:	b538      	push	{r3, r4, r5, lr}
 80057f2:	4d07      	ldr	r5, [pc, #28]	@ (8005810 <_write_r+0x20>)
 80057f4:	4604      	mov	r4, r0
 80057f6:	4608      	mov	r0, r1
 80057f8:	4611      	mov	r1, r2
 80057fa:	2200      	movs	r2, #0
 80057fc:	602a      	str	r2, [r5, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	f7fb fe93 	bl	800152a <_write>
 8005804:	1c43      	adds	r3, r0, #1
 8005806:	d102      	bne.n	800580e <_write_r+0x1e>
 8005808:	682b      	ldr	r3, [r5, #0]
 800580a:	b103      	cbz	r3, 800580e <_write_r+0x1e>
 800580c:	6023      	str	r3, [r4, #0]
 800580e:	bd38      	pop	{r3, r4, r5, pc}
 8005810:	20000598 	.word	0x20000598

08005814 <__errno>:
 8005814:	4b01      	ldr	r3, [pc, #4]	@ (800581c <__errno+0x8>)
 8005816:	6818      	ldr	r0, [r3, #0]
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	2000001c 	.word	0x2000001c

08005820 <__libc_init_array>:
 8005820:	b570      	push	{r4, r5, r6, lr}
 8005822:	4d0d      	ldr	r5, [pc, #52]	@ (8005858 <__libc_init_array+0x38>)
 8005824:	4c0d      	ldr	r4, [pc, #52]	@ (800585c <__libc_init_array+0x3c>)
 8005826:	1b64      	subs	r4, r4, r5
 8005828:	10a4      	asrs	r4, r4, #2
 800582a:	2600      	movs	r6, #0
 800582c:	42a6      	cmp	r6, r4
 800582e:	d109      	bne.n	8005844 <__libc_init_array+0x24>
 8005830:	4d0b      	ldr	r5, [pc, #44]	@ (8005860 <__libc_init_array+0x40>)
 8005832:	4c0c      	ldr	r4, [pc, #48]	@ (8005864 <__libc_init_array+0x44>)
 8005834:	f000 ffb6 	bl	80067a4 <_init>
 8005838:	1b64      	subs	r4, r4, r5
 800583a:	10a4      	asrs	r4, r4, #2
 800583c:	2600      	movs	r6, #0
 800583e:	42a6      	cmp	r6, r4
 8005840:	d105      	bne.n	800584e <__libc_init_array+0x2e>
 8005842:	bd70      	pop	{r4, r5, r6, pc}
 8005844:	f855 3b04 	ldr.w	r3, [r5], #4
 8005848:	4798      	blx	r3
 800584a:	3601      	adds	r6, #1
 800584c:	e7ee      	b.n	800582c <__libc_init_array+0xc>
 800584e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005852:	4798      	blx	r3
 8005854:	3601      	adds	r6, #1
 8005856:	e7f2      	b.n	800583e <__libc_init_array+0x1e>
 8005858:	08006a68 	.word	0x08006a68
 800585c:	08006a68 	.word	0x08006a68
 8005860:	08006a68 	.word	0x08006a68
 8005864:	08006a6c 	.word	0x08006a6c

08005868 <__retarget_lock_init_recursive>:
 8005868:	4770      	bx	lr

0800586a <__retarget_lock_acquire_recursive>:
 800586a:	4770      	bx	lr

0800586c <__retarget_lock_release_recursive>:
 800586c:	4770      	bx	lr

0800586e <abort>:
 800586e:	b508      	push	{r3, lr}
 8005870:	2006      	movs	r0, #6
 8005872:	f000 fea3 	bl	80065bc <raise>
 8005876:	2001      	movs	r0, #1
 8005878:	f7fb fe2f 	bl	80014da <_exit>

0800587c <_free_r>:
 800587c:	b538      	push	{r3, r4, r5, lr}
 800587e:	4605      	mov	r5, r0
 8005880:	2900      	cmp	r1, #0
 8005882:	d041      	beq.n	8005908 <_free_r+0x8c>
 8005884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005888:	1f0c      	subs	r4, r1, #4
 800588a:	2b00      	cmp	r3, #0
 800588c:	bfb8      	it	lt
 800588e:	18e4      	addlt	r4, r4, r3
 8005890:	f000 f8e0 	bl	8005a54 <__malloc_lock>
 8005894:	4a1d      	ldr	r2, [pc, #116]	@ (800590c <_free_r+0x90>)
 8005896:	6813      	ldr	r3, [r2, #0]
 8005898:	b933      	cbnz	r3, 80058a8 <_free_r+0x2c>
 800589a:	6063      	str	r3, [r4, #4]
 800589c:	6014      	str	r4, [r2, #0]
 800589e:	4628      	mov	r0, r5
 80058a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058a4:	f000 b8dc 	b.w	8005a60 <__malloc_unlock>
 80058a8:	42a3      	cmp	r3, r4
 80058aa:	d908      	bls.n	80058be <_free_r+0x42>
 80058ac:	6820      	ldr	r0, [r4, #0]
 80058ae:	1821      	adds	r1, r4, r0
 80058b0:	428b      	cmp	r3, r1
 80058b2:	bf01      	itttt	eq
 80058b4:	6819      	ldreq	r1, [r3, #0]
 80058b6:	685b      	ldreq	r3, [r3, #4]
 80058b8:	1809      	addeq	r1, r1, r0
 80058ba:	6021      	streq	r1, [r4, #0]
 80058bc:	e7ed      	b.n	800589a <_free_r+0x1e>
 80058be:	461a      	mov	r2, r3
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	b10b      	cbz	r3, 80058c8 <_free_r+0x4c>
 80058c4:	42a3      	cmp	r3, r4
 80058c6:	d9fa      	bls.n	80058be <_free_r+0x42>
 80058c8:	6811      	ldr	r1, [r2, #0]
 80058ca:	1850      	adds	r0, r2, r1
 80058cc:	42a0      	cmp	r0, r4
 80058ce:	d10b      	bne.n	80058e8 <_free_r+0x6c>
 80058d0:	6820      	ldr	r0, [r4, #0]
 80058d2:	4401      	add	r1, r0
 80058d4:	1850      	adds	r0, r2, r1
 80058d6:	4283      	cmp	r3, r0
 80058d8:	6011      	str	r1, [r2, #0]
 80058da:	d1e0      	bne.n	800589e <_free_r+0x22>
 80058dc:	6818      	ldr	r0, [r3, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	6053      	str	r3, [r2, #4]
 80058e2:	4408      	add	r0, r1
 80058e4:	6010      	str	r0, [r2, #0]
 80058e6:	e7da      	b.n	800589e <_free_r+0x22>
 80058e8:	d902      	bls.n	80058f0 <_free_r+0x74>
 80058ea:	230c      	movs	r3, #12
 80058ec:	602b      	str	r3, [r5, #0]
 80058ee:	e7d6      	b.n	800589e <_free_r+0x22>
 80058f0:	6820      	ldr	r0, [r4, #0]
 80058f2:	1821      	adds	r1, r4, r0
 80058f4:	428b      	cmp	r3, r1
 80058f6:	bf04      	itt	eq
 80058f8:	6819      	ldreq	r1, [r3, #0]
 80058fa:	685b      	ldreq	r3, [r3, #4]
 80058fc:	6063      	str	r3, [r4, #4]
 80058fe:	bf04      	itt	eq
 8005900:	1809      	addeq	r1, r1, r0
 8005902:	6021      	streq	r1, [r4, #0]
 8005904:	6054      	str	r4, [r2, #4]
 8005906:	e7ca      	b.n	800589e <_free_r+0x22>
 8005908:	bd38      	pop	{r3, r4, r5, pc}
 800590a:	bf00      	nop
 800590c:	200005a4 	.word	0x200005a4

08005910 <sbrk_aligned>:
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	4e0f      	ldr	r6, [pc, #60]	@ (8005950 <sbrk_aligned+0x40>)
 8005914:	460c      	mov	r4, r1
 8005916:	6831      	ldr	r1, [r6, #0]
 8005918:	4605      	mov	r5, r0
 800591a:	b911      	cbnz	r1, 8005922 <sbrk_aligned+0x12>
 800591c:	f000 fe6a 	bl	80065f4 <_sbrk_r>
 8005920:	6030      	str	r0, [r6, #0]
 8005922:	4621      	mov	r1, r4
 8005924:	4628      	mov	r0, r5
 8005926:	f000 fe65 	bl	80065f4 <_sbrk_r>
 800592a:	1c43      	adds	r3, r0, #1
 800592c:	d103      	bne.n	8005936 <sbrk_aligned+0x26>
 800592e:	f04f 34ff 	mov.w	r4, #4294967295
 8005932:	4620      	mov	r0, r4
 8005934:	bd70      	pop	{r4, r5, r6, pc}
 8005936:	1cc4      	adds	r4, r0, #3
 8005938:	f024 0403 	bic.w	r4, r4, #3
 800593c:	42a0      	cmp	r0, r4
 800593e:	d0f8      	beq.n	8005932 <sbrk_aligned+0x22>
 8005940:	1a21      	subs	r1, r4, r0
 8005942:	4628      	mov	r0, r5
 8005944:	f000 fe56 	bl	80065f4 <_sbrk_r>
 8005948:	3001      	adds	r0, #1
 800594a:	d1f2      	bne.n	8005932 <sbrk_aligned+0x22>
 800594c:	e7ef      	b.n	800592e <sbrk_aligned+0x1e>
 800594e:	bf00      	nop
 8005950:	200005a0 	.word	0x200005a0

08005954 <_malloc_r>:
 8005954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005958:	1ccd      	adds	r5, r1, #3
 800595a:	f025 0503 	bic.w	r5, r5, #3
 800595e:	3508      	adds	r5, #8
 8005960:	2d0c      	cmp	r5, #12
 8005962:	bf38      	it	cc
 8005964:	250c      	movcc	r5, #12
 8005966:	2d00      	cmp	r5, #0
 8005968:	4606      	mov	r6, r0
 800596a:	db01      	blt.n	8005970 <_malloc_r+0x1c>
 800596c:	42a9      	cmp	r1, r5
 800596e:	d904      	bls.n	800597a <_malloc_r+0x26>
 8005970:	230c      	movs	r3, #12
 8005972:	6033      	str	r3, [r6, #0]
 8005974:	2000      	movs	r0, #0
 8005976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800597a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a50 <_malloc_r+0xfc>
 800597e:	f000 f869 	bl	8005a54 <__malloc_lock>
 8005982:	f8d8 3000 	ldr.w	r3, [r8]
 8005986:	461c      	mov	r4, r3
 8005988:	bb44      	cbnz	r4, 80059dc <_malloc_r+0x88>
 800598a:	4629      	mov	r1, r5
 800598c:	4630      	mov	r0, r6
 800598e:	f7ff ffbf 	bl	8005910 <sbrk_aligned>
 8005992:	1c43      	adds	r3, r0, #1
 8005994:	4604      	mov	r4, r0
 8005996:	d158      	bne.n	8005a4a <_malloc_r+0xf6>
 8005998:	f8d8 4000 	ldr.w	r4, [r8]
 800599c:	4627      	mov	r7, r4
 800599e:	2f00      	cmp	r7, #0
 80059a0:	d143      	bne.n	8005a2a <_malloc_r+0xd6>
 80059a2:	2c00      	cmp	r4, #0
 80059a4:	d04b      	beq.n	8005a3e <_malloc_r+0xea>
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	4639      	mov	r1, r7
 80059aa:	4630      	mov	r0, r6
 80059ac:	eb04 0903 	add.w	r9, r4, r3
 80059b0:	f000 fe20 	bl	80065f4 <_sbrk_r>
 80059b4:	4581      	cmp	r9, r0
 80059b6:	d142      	bne.n	8005a3e <_malloc_r+0xea>
 80059b8:	6821      	ldr	r1, [r4, #0]
 80059ba:	1a6d      	subs	r5, r5, r1
 80059bc:	4629      	mov	r1, r5
 80059be:	4630      	mov	r0, r6
 80059c0:	f7ff ffa6 	bl	8005910 <sbrk_aligned>
 80059c4:	3001      	adds	r0, #1
 80059c6:	d03a      	beq.n	8005a3e <_malloc_r+0xea>
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	442b      	add	r3, r5
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	f8d8 3000 	ldr.w	r3, [r8]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	bb62      	cbnz	r2, 8005a30 <_malloc_r+0xdc>
 80059d6:	f8c8 7000 	str.w	r7, [r8]
 80059da:	e00f      	b.n	80059fc <_malloc_r+0xa8>
 80059dc:	6822      	ldr	r2, [r4, #0]
 80059de:	1b52      	subs	r2, r2, r5
 80059e0:	d420      	bmi.n	8005a24 <_malloc_r+0xd0>
 80059e2:	2a0b      	cmp	r2, #11
 80059e4:	d917      	bls.n	8005a16 <_malloc_r+0xc2>
 80059e6:	1961      	adds	r1, r4, r5
 80059e8:	42a3      	cmp	r3, r4
 80059ea:	6025      	str	r5, [r4, #0]
 80059ec:	bf18      	it	ne
 80059ee:	6059      	strne	r1, [r3, #4]
 80059f0:	6863      	ldr	r3, [r4, #4]
 80059f2:	bf08      	it	eq
 80059f4:	f8c8 1000 	streq.w	r1, [r8]
 80059f8:	5162      	str	r2, [r4, r5]
 80059fa:	604b      	str	r3, [r1, #4]
 80059fc:	4630      	mov	r0, r6
 80059fe:	f000 f82f 	bl	8005a60 <__malloc_unlock>
 8005a02:	f104 000b 	add.w	r0, r4, #11
 8005a06:	1d23      	adds	r3, r4, #4
 8005a08:	f020 0007 	bic.w	r0, r0, #7
 8005a0c:	1ac2      	subs	r2, r0, r3
 8005a0e:	bf1c      	itt	ne
 8005a10:	1a1b      	subne	r3, r3, r0
 8005a12:	50a3      	strne	r3, [r4, r2]
 8005a14:	e7af      	b.n	8005976 <_malloc_r+0x22>
 8005a16:	6862      	ldr	r2, [r4, #4]
 8005a18:	42a3      	cmp	r3, r4
 8005a1a:	bf0c      	ite	eq
 8005a1c:	f8c8 2000 	streq.w	r2, [r8]
 8005a20:	605a      	strne	r2, [r3, #4]
 8005a22:	e7eb      	b.n	80059fc <_malloc_r+0xa8>
 8005a24:	4623      	mov	r3, r4
 8005a26:	6864      	ldr	r4, [r4, #4]
 8005a28:	e7ae      	b.n	8005988 <_malloc_r+0x34>
 8005a2a:	463c      	mov	r4, r7
 8005a2c:	687f      	ldr	r7, [r7, #4]
 8005a2e:	e7b6      	b.n	800599e <_malloc_r+0x4a>
 8005a30:	461a      	mov	r2, r3
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	42a3      	cmp	r3, r4
 8005a36:	d1fb      	bne.n	8005a30 <_malloc_r+0xdc>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	6053      	str	r3, [r2, #4]
 8005a3c:	e7de      	b.n	80059fc <_malloc_r+0xa8>
 8005a3e:	230c      	movs	r3, #12
 8005a40:	6033      	str	r3, [r6, #0]
 8005a42:	4630      	mov	r0, r6
 8005a44:	f000 f80c 	bl	8005a60 <__malloc_unlock>
 8005a48:	e794      	b.n	8005974 <_malloc_r+0x20>
 8005a4a:	6005      	str	r5, [r0, #0]
 8005a4c:	e7d6      	b.n	80059fc <_malloc_r+0xa8>
 8005a4e:	bf00      	nop
 8005a50:	200005a4 	.word	0x200005a4

08005a54 <__malloc_lock>:
 8005a54:	4801      	ldr	r0, [pc, #4]	@ (8005a5c <__malloc_lock+0x8>)
 8005a56:	f7ff bf08 	b.w	800586a <__retarget_lock_acquire_recursive>
 8005a5a:	bf00      	nop
 8005a5c:	2000059c 	.word	0x2000059c

08005a60 <__malloc_unlock>:
 8005a60:	4801      	ldr	r0, [pc, #4]	@ (8005a68 <__malloc_unlock+0x8>)
 8005a62:	f7ff bf03 	b.w	800586c <__retarget_lock_release_recursive>
 8005a66:	bf00      	nop
 8005a68:	2000059c 	.word	0x2000059c

08005a6c <__ssputs_r>:
 8005a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a70:	688e      	ldr	r6, [r1, #8]
 8005a72:	461f      	mov	r7, r3
 8005a74:	42be      	cmp	r6, r7
 8005a76:	680b      	ldr	r3, [r1, #0]
 8005a78:	4682      	mov	sl, r0
 8005a7a:	460c      	mov	r4, r1
 8005a7c:	4690      	mov	r8, r2
 8005a7e:	d82d      	bhi.n	8005adc <__ssputs_r+0x70>
 8005a80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a88:	d026      	beq.n	8005ad8 <__ssputs_r+0x6c>
 8005a8a:	6965      	ldr	r5, [r4, #20]
 8005a8c:	6909      	ldr	r1, [r1, #16]
 8005a8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a92:	eba3 0901 	sub.w	r9, r3, r1
 8005a96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a9a:	1c7b      	adds	r3, r7, #1
 8005a9c:	444b      	add	r3, r9
 8005a9e:	106d      	asrs	r5, r5, #1
 8005aa0:	429d      	cmp	r5, r3
 8005aa2:	bf38      	it	cc
 8005aa4:	461d      	movcc	r5, r3
 8005aa6:	0553      	lsls	r3, r2, #21
 8005aa8:	d527      	bpl.n	8005afa <__ssputs_r+0x8e>
 8005aaa:	4629      	mov	r1, r5
 8005aac:	f7ff ff52 	bl	8005954 <_malloc_r>
 8005ab0:	4606      	mov	r6, r0
 8005ab2:	b360      	cbz	r0, 8005b0e <__ssputs_r+0xa2>
 8005ab4:	6921      	ldr	r1, [r4, #16]
 8005ab6:	464a      	mov	r2, r9
 8005ab8:	f000 fdac 	bl	8006614 <memcpy>
 8005abc:	89a3      	ldrh	r3, [r4, #12]
 8005abe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ac6:	81a3      	strh	r3, [r4, #12]
 8005ac8:	6126      	str	r6, [r4, #16]
 8005aca:	6165      	str	r5, [r4, #20]
 8005acc:	444e      	add	r6, r9
 8005ace:	eba5 0509 	sub.w	r5, r5, r9
 8005ad2:	6026      	str	r6, [r4, #0]
 8005ad4:	60a5      	str	r5, [r4, #8]
 8005ad6:	463e      	mov	r6, r7
 8005ad8:	42be      	cmp	r6, r7
 8005ada:	d900      	bls.n	8005ade <__ssputs_r+0x72>
 8005adc:	463e      	mov	r6, r7
 8005ade:	6820      	ldr	r0, [r4, #0]
 8005ae0:	4632      	mov	r2, r6
 8005ae2:	4641      	mov	r1, r8
 8005ae4:	f000 fd28 	bl	8006538 <memmove>
 8005ae8:	68a3      	ldr	r3, [r4, #8]
 8005aea:	1b9b      	subs	r3, r3, r6
 8005aec:	60a3      	str	r3, [r4, #8]
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	4433      	add	r3, r6
 8005af2:	6023      	str	r3, [r4, #0]
 8005af4:	2000      	movs	r0, #0
 8005af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005afa:	462a      	mov	r2, r5
 8005afc:	f000 fd98 	bl	8006630 <_realloc_r>
 8005b00:	4606      	mov	r6, r0
 8005b02:	2800      	cmp	r0, #0
 8005b04:	d1e0      	bne.n	8005ac8 <__ssputs_r+0x5c>
 8005b06:	6921      	ldr	r1, [r4, #16]
 8005b08:	4650      	mov	r0, sl
 8005b0a:	f7ff feb7 	bl	800587c <_free_r>
 8005b0e:	230c      	movs	r3, #12
 8005b10:	f8ca 3000 	str.w	r3, [sl]
 8005b14:	89a3      	ldrh	r3, [r4, #12]
 8005b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b1a:	81a3      	strh	r3, [r4, #12]
 8005b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b20:	e7e9      	b.n	8005af6 <__ssputs_r+0x8a>
	...

08005b24 <_svfiprintf_r>:
 8005b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b28:	4698      	mov	r8, r3
 8005b2a:	898b      	ldrh	r3, [r1, #12]
 8005b2c:	061b      	lsls	r3, r3, #24
 8005b2e:	b09d      	sub	sp, #116	@ 0x74
 8005b30:	4607      	mov	r7, r0
 8005b32:	460d      	mov	r5, r1
 8005b34:	4614      	mov	r4, r2
 8005b36:	d510      	bpl.n	8005b5a <_svfiprintf_r+0x36>
 8005b38:	690b      	ldr	r3, [r1, #16]
 8005b3a:	b973      	cbnz	r3, 8005b5a <_svfiprintf_r+0x36>
 8005b3c:	2140      	movs	r1, #64	@ 0x40
 8005b3e:	f7ff ff09 	bl	8005954 <_malloc_r>
 8005b42:	6028      	str	r0, [r5, #0]
 8005b44:	6128      	str	r0, [r5, #16]
 8005b46:	b930      	cbnz	r0, 8005b56 <_svfiprintf_r+0x32>
 8005b48:	230c      	movs	r3, #12
 8005b4a:	603b      	str	r3, [r7, #0]
 8005b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b50:	b01d      	add	sp, #116	@ 0x74
 8005b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b56:	2340      	movs	r3, #64	@ 0x40
 8005b58:	616b      	str	r3, [r5, #20]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b5e:	2320      	movs	r3, #32
 8005b60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b64:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b68:	2330      	movs	r3, #48	@ 0x30
 8005b6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005d08 <_svfiprintf_r+0x1e4>
 8005b6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b72:	f04f 0901 	mov.w	r9, #1
 8005b76:	4623      	mov	r3, r4
 8005b78:	469a      	mov	sl, r3
 8005b7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b7e:	b10a      	cbz	r2, 8005b84 <_svfiprintf_r+0x60>
 8005b80:	2a25      	cmp	r2, #37	@ 0x25
 8005b82:	d1f9      	bne.n	8005b78 <_svfiprintf_r+0x54>
 8005b84:	ebba 0b04 	subs.w	fp, sl, r4
 8005b88:	d00b      	beq.n	8005ba2 <_svfiprintf_r+0x7e>
 8005b8a:	465b      	mov	r3, fp
 8005b8c:	4622      	mov	r2, r4
 8005b8e:	4629      	mov	r1, r5
 8005b90:	4638      	mov	r0, r7
 8005b92:	f7ff ff6b 	bl	8005a6c <__ssputs_r>
 8005b96:	3001      	adds	r0, #1
 8005b98:	f000 80a7 	beq.w	8005cea <_svfiprintf_r+0x1c6>
 8005b9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b9e:	445a      	add	r2, fp
 8005ba0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 809f 	beq.w	8005cea <_svfiprintf_r+0x1c6>
 8005bac:	2300      	movs	r3, #0
 8005bae:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bb6:	f10a 0a01 	add.w	sl, sl, #1
 8005bba:	9304      	str	r3, [sp, #16]
 8005bbc:	9307      	str	r3, [sp, #28]
 8005bbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005bc2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bc4:	4654      	mov	r4, sl
 8005bc6:	2205      	movs	r2, #5
 8005bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bcc:	484e      	ldr	r0, [pc, #312]	@ (8005d08 <_svfiprintf_r+0x1e4>)
 8005bce:	f7fa fb27 	bl	8000220 <memchr>
 8005bd2:	9a04      	ldr	r2, [sp, #16]
 8005bd4:	b9d8      	cbnz	r0, 8005c0e <_svfiprintf_r+0xea>
 8005bd6:	06d0      	lsls	r0, r2, #27
 8005bd8:	bf44      	itt	mi
 8005bda:	2320      	movmi	r3, #32
 8005bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005be0:	0711      	lsls	r1, r2, #28
 8005be2:	bf44      	itt	mi
 8005be4:	232b      	movmi	r3, #43	@ 0x2b
 8005be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bea:	f89a 3000 	ldrb.w	r3, [sl]
 8005bee:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bf0:	d015      	beq.n	8005c1e <_svfiprintf_r+0xfa>
 8005bf2:	9a07      	ldr	r2, [sp, #28]
 8005bf4:	4654      	mov	r4, sl
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	f04f 0c0a 	mov.w	ip, #10
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c02:	3b30      	subs	r3, #48	@ 0x30
 8005c04:	2b09      	cmp	r3, #9
 8005c06:	d94b      	bls.n	8005ca0 <_svfiprintf_r+0x17c>
 8005c08:	b1b0      	cbz	r0, 8005c38 <_svfiprintf_r+0x114>
 8005c0a:	9207      	str	r2, [sp, #28]
 8005c0c:	e014      	b.n	8005c38 <_svfiprintf_r+0x114>
 8005c0e:	eba0 0308 	sub.w	r3, r0, r8
 8005c12:	fa09 f303 	lsl.w	r3, r9, r3
 8005c16:	4313      	orrs	r3, r2
 8005c18:	9304      	str	r3, [sp, #16]
 8005c1a:	46a2      	mov	sl, r4
 8005c1c:	e7d2      	b.n	8005bc4 <_svfiprintf_r+0xa0>
 8005c1e:	9b03      	ldr	r3, [sp, #12]
 8005c20:	1d19      	adds	r1, r3, #4
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	9103      	str	r1, [sp, #12]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	bfbb      	ittet	lt
 8005c2a:	425b      	neglt	r3, r3
 8005c2c:	f042 0202 	orrlt.w	r2, r2, #2
 8005c30:	9307      	strge	r3, [sp, #28]
 8005c32:	9307      	strlt	r3, [sp, #28]
 8005c34:	bfb8      	it	lt
 8005c36:	9204      	strlt	r2, [sp, #16]
 8005c38:	7823      	ldrb	r3, [r4, #0]
 8005c3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c3c:	d10a      	bne.n	8005c54 <_svfiprintf_r+0x130>
 8005c3e:	7863      	ldrb	r3, [r4, #1]
 8005c40:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c42:	d132      	bne.n	8005caa <_svfiprintf_r+0x186>
 8005c44:	9b03      	ldr	r3, [sp, #12]
 8005c46:	1d1a      	adds	r2, r3, #4
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	9203      	str	r2, [sp, #12]
 8005c4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c50:	3402      	adds	r4, #2
 8005c52:	9305      	str	r3, [sp, #20]
 8005c54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005d18 <_svfiprintf_r+0x1f4>
 8005c58:	7821      	ldrb	r1, [r4, #0]
 8005c5a:	2203      	movs	r2, #3
 8005c5c:	4650      	mov	r0, sl
 8005c5e:	f7fa fadf 	bl	8000220 <memchr>
 8005c62:	b138      	cbz	r0, 8005c74 <_svfiprintf_r+0x150>
 8005c64:	9b04      	ldr	r3, [sp, #16]
 8005c66:	eba0 000a 	sub.w	r0, r0, sl
 8005c6a:	2240      	movs	r2, #64	@ 0x40
 8005c6c:	4082      	lsls	r2, r0
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	3401      	adds	r4, #1
 8005c72:	9304      	str	r3, [sp, #16]
 8005c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c78:	4824      	ldr	r0, [pc, #144]	@ (8005d0c <_svfiprintf_r+0x1e8>)
 8005c7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c7e:	2206      	movs	r2, #6
 8005c80:	f7fa face 	bl	8000220 <memchr>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	d036      	beq.n	8005cf6 <_svfiprintf_r+0x1d2>
 8005c88:	4b21      	ldr	r3, [pc, #132]	@ (8005d10 <_svfiprintf_r+0x1ec>)
 8005c8a:	bb1b      	cbnz	r3, 8005cd4 <_svfiprintf_r+0x1b0>
 8005c8c:	9b03      	ldr	r3, [sp, #12]
 8005c8e:	3307      	adds	r3, #7
 8005c90:	f023 0307 	bic.w	r3, r3, #7
 8005c94:	3308      	adds	r3, #8
 8005c96:	9303      	str	r3, [sp, #12]
 8005c98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c9a:	4433      	add	r3, r6
 8005c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c9e:	e76a      	b.n	8005b76 <_svfiprintf_r+0x52>
 8005ca0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ca4:	460c      	mov	r4, r1
 8005ca6:	2001      	movs	r0, #1
 8005ca8:	e7a8      	b.n	8005bfc <_svfiprintf_r+0xd8>
 8005caa:	2300      	movs	r3, #0
 8005cac:	3401      	adds	r4, #1
 8005cae:	9305      	str	r3, [sp, #20]
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	f04f 0c0a 	mov.w	ip, #10
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cbc:	3a30      	subs	r2, #48	@ 0x30
 8005cbe:	2a09      	cmp	r2, #9
 8005cc0:	d903      	bls.n	8005cca <_svfiprintf_r+0x1a6>
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0c6      	beq.n	8005c54 <_svfiprintf_r+0x130>
 8005cc6:	9105      	str	r1, [sp, #20]
 8005cc8:	e7c4      	b.n	8005c54 <_svfiprintf_r+0x130>
 8005cca:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cce:	4604      	mov	r4, r0
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e7f0      	b.n	8005cb6 <_svfiprintf_r+0x192>
 8005cd4:	ab03      	add	r3, sp, #12
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	462a      	mov	r2, r5
 8005cda:	4b0e      	ldr	r3, [pc, #56]	@ (8005d14 <_svfiprintf_r+0x1f0>)
 8005cdc:	a904      	add	r1, sp, #16
 8005cde:	4638      	mov	r0, r7
 8005ce0:	f3af 8000 	nop.w
 8005ce4:	1c42      	adds	r2, r0, #1
 8005ce6:	4606      	mov	r6, r0
 8005ce8:	d1d6      	bne.n	8005c98 <_svfiprintf_r+0x174>
 8005cea:	89ab      	ldrh	r3, [r5, #12]
 8005cec:	065b      	lsls	r3, r3, #25
 8005cee:	f53f af2d 	bmi.w	8005b4c <_svfiprintf_r+0x28>
 8005cf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cf4:	e72c      	b.n	8005b50 <_svfiprintf_r+0x2c>
 8005cf6:	ab03      	add	r3, sp, #12
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	462a      	mov	r2, r5
 8005cfc:	4b05      	ldr	r3, [pc, #20]	@ (8005d14 <_svfiprintf_r+0x1f0>)
 8005cfe:	a904      	add	r1, sp, #16
 8005d00:	4638      	mov	r0, r7
 8005d02:	f000 f9bb 	bl	800607c <_printf_i>
 8005d06:	e7ed      	b.n	8005ce4 <_svfiprintf_r+0x1c0>
 8005d08:	08006a2a 	.word	0x08006a2a
 8005d0c:	08006a34 	.word	0x08006a34
 8005d10:	00000000 	.word	0x00000000
 8005d14:	08005a6d 	.word	0x08005a6d
 8005d18:	08006a30 	.word	0x08006a30

08005d1c <__sfputc_r>:
 8005d1c:	6893      	ldr	r3, [r2, #8]
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	b410      	push	{r4}
 8005d24:	6093      	str	r3, [r2, #8]
 8005d26:	da08      	bge.n	8005d3a <__sfputc_r+0x1e>
 8005d28:	6994      	ldr	r4, [r2, #24]
 8005d2a:	42a3      	cmp	r3, r4
 8005d2c:	db01      	blt.n	8005d32 <__sfputc_r+0x16>
 8005d2e:	290a      	cmp	r1, #10
 8005d30:	d103      	bne.n	8005d3a <__sfputc_r+0x1e>
 8005d32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d36:	f000 bb6b 	b.w	8006410 <__swbuf_r>
 8005d3a:	6813      	ldr	r3, [r2, #0]
 8005d3c:	1c58      	adds	r0, r3, #1
 8005d3e:	6010      	str	r0, [r2, #0]
 8005d40:	7019      	strb	r1, [r3, #0]
 8005d42:	4608      	mov	r0, r1
 8005d44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <__sfputs_r>:
 8005d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4c:	4606      	mov	r6, r0
 8005d4e:	460f      	mov	r7, r1
 8005d50:	4614      	mov	r4, r2
 8005d52:	18d5      	adds	r5, r2, r3
 8005d54:	42ac      	cmp	r4, r5
 8005d56:	d101      	bne.n	8005d5c <__sfputs_r+0x12>
 8005d58:	2000      	movs	r0, #0
 8005d5a:	e007      	b.n	8005d6c <__sfputs_r+0x22>
 8005d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d60:	463a      	mov	r2, r7
 8005d62:	4630      	mov	r0, r6
 8005d64:	f7ff ffda 	bl	8005d1c <__sfputc_r>
 8005d68:	1c43      	adds	r3, r0, #1
 8005d6a:	d1f3      	bne.n	8005d54 <__sfputs_r+0xa>
 8005d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d70 <_vfiprintf_r>:
 8005d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d74:	460d      	mov	r5, r1
 8005d76:	b09d      	sub	sp, #116	@ 0x74
 8005d78:	4614      	mov	r4, r2
 8005d7a:	4698      	mov	r8, r3
 8005d7c:	4606      	mov	r6, r0
 8005d7e:	b118      	cbz	r0, 8005d88 <_vfiprintf_r+0x18>
 8005d80:	6a03      	ldr	r3, [r0, #32]
 8005d82:	b90b      	cbnz	r3, 8005d88 <_vfiprintf_r+0x18>
 8005d84:	f7ff fc4a 	bl	800561c <__sinit>
 8005d88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d8a:	07d9      	lsls	r1, r3, #31
 8005d8c:	d405      	bmi.n	8005d9a <_vfiprintf_r+0x2a>
 8005d8e:	89ab      	ldrh	r3, [r5, #12]
 8005d90:	059a      	lsls	r2, r3, #22
 8005d92:	d402      	bmi.n	8005d9a <_vfiprintf_r+0x2a>
 8005d94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d96:	f7ff fd68 	bl	800586a <__retarget_lock_acquire_recursive>
 8005d9a:	89ab      	ldrh	r3, [r5, #12]
 8005d9c:	071b      	lsls	r3, r3, #28
 8005d9e:	d501      	bpl.n	8005da4 <_vfiprintf_r+0x34>
 8005da0:	692b      	ldr	r3, [r5, #16]
 8005da2:	b99b      	cbnz	r3, 8005dcc <_vfiprintf_r+0x5c>
 8005da4:	4629      	mov	r1, r5
 8005da6:	4630      	mov	r0, r6
 8005da8:	f000 fb70 	bl	800648c <__swsetup_r>
 8005dac:	b170      	cbz	r0, 8005dcc <_vfiprintf_r+0x5c>
 8005dae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005db0:	07dc      	lsls	r4, r3, #31
 8005db2:	d504      	bpl.n	8005dbe <_vfiprintf_r+0x4e>
 8005db4:	f04f 30ff 	mov.w	r0, #4294967295
 8005db8:	b01d      	add	sp, #116	@ 0x74
 8005dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dbe:	89ab      	ldrh	r3, [r5, #12]
 8005dc0:	0598      	lsls	r0, r3, #22
 8005dc2:	d4f7      	bmi.n	8005db4 <_vfiprintf_r+0x44>
 8005dc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dc6:	f7ff fd51 	bl	800586c <__retarget_lock_release_recursive>
 8005dca:	e7f3      	b.n	8005db4 <_vfiprintf_r+0x44>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dd0:	2320      	movs	r3, #32
 8005dd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005dd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dda:	2330      	movs	r3, #48	@ 0x30
 8005ddc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005f8c <_vfiprintf_r+0x21c>
 8005de0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005de4:	f04f 0901 	mov.w	r9, #1
 8005de8:	4623      	mov	r3, r4
 8005dea:	469a      	mov	sl, r3
 8005dec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005df0:	b10a      	cbz	r2, 8005df6 <_vfiprintf_r+0x86>
 8005df2:	2a25      	cmp	r2, #37	@ 0x25
 8005df4:	d1f9      	bne.n	8005dea <_vfiprintf_r+0x7a>
 8005df6:	ebba 0b04 	subs.w	fp, sl, r4
 8005dfa:	d00b      	beq.n	8005e14 <_vfiprintf_r+0xa4>
 8005dfc:	465b      	mov	r3, fp
 8005dfe:	4622      	mov	r2, r4
 8005e00:	4629      	mov	r1, r5
 8005e02:	4630      	mov	r0, r6
 8005e04:	f7ff ffa1 	bl	8005d4a <__sfputs_r>
 8005e08:	3001      	adds	r0, #1
 8005e0a:	f000 80a7 	beq.w	8005f5c <_vfiprintf_r+0x1ec>
 8005e0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e10:	445a      	add	r2, fp
 8005e12:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e14:	f89a 3000 	ldrb.w	r3, [sl]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 809f 	beq.w	8005f5c <_vfiprintf_r+0x1ec>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	f04f 32ff 	mov.w	r2, #4294967295
 8005e24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e28:	f10a 0a01 	add.w	sl, sl, #1
 8005e2c:	9304      	str	r3, [sp, #16]
 8005e2e:	9307      	str	r3, [sp, #28]
 8005e30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e34:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e36:	4654      	mov	r4, sl
 8005e38:	2205      	movs	r2, #5
 8005e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e3e:	4853      	ldr	r0, [pc, #332]	@ (8005f8c <_vfiprintf_r+0x21c>)
 8005e40:	f7fa f9ee 	bl	8000220 <memchr>
 8005e44:	9a04      	ldr	r2, [sp, #16]
 8005e46:	b9d8      	cbnz	r0, 8005e80 <_vfiprintf_r+0x110>
 8005e48:	06d1      	lsls	r1, r2, #27
 8005e4a:	bf44      	itt	mi
 8005e4c:	2320      	movmi	r3, #32
 8005e4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e52:	0713      	lsls	r3, r2, #28
 8005e54:	bf44      	itt	mi
 8005e56:	232b      	movmi	r3, #43	@ 0x2b
 8005e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e5c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e60:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e62:	d015      	beq.n	8005e90 <_vfiprintf_r+0x120>
 8005e64:	9a07      	ldr	r2, [sp, #28]
 8005e66:	4654      	mov	r4, sl
 8005e68:	2000      	movs	r0, #0
 8005e6a:	f04f 0c0a 	mov.w	ip, #10
 8005e6e:	4621      	mov	r1, r4
 8005e70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e74:	3b30      	subs	r3, #48	@ 0x30
 8005e76:	2b09      	cmp	r3, #9
 8005e78:	d94b      	bls.n	8005f12 <_vfiprintf_r+0x1a2>
 8005e7a:	b1b0      	cbz	r0, 8005eaa <_vfiprintf_r+0x13a>
 8005e7c:	9207      	str	r2, [sp, #28]
 8005e7e:	e014      	b.n	8005eaa <_vfiprintf_r+0x13a>
 8005e80:	eba0 0308 	sub.w	r3, r0, r8
 8005e84:	fa09 f303 	lsl.w	r3, r9, r3
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	9304      	str	r3, [sp, #16]
 8005e8c:	46a2      	mov	sl, r4
 8005e8e:	e7d2      	b.n	8005e36 <_vfiprintf_r+0xc6>
 8005e90:	9b03      	ldr	r3, [sp, #12]
 8005e92:	1d19      	adds	r1, r3, #4
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	9103      	str	r1, [sp, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	bfbb      	ittet	lt
 8005e9c:	425b      	neglt	r3, r3
 8005e9e:	f042 0202 	orrlt.w	r2, r2, #2
 8005ea2:	9307      	strge	r3, [sp, #28]
 8005ea4:	9307      	strlt	r3, [sp, #28]
 8005ea6:	bfb8      	it	lt
 8005ea8:	9204      	strlt	r2, [sp, #16]
 8005eaa:	7823      	ldrb	r3, [r4, #0]
 8005eac:	2b2e      	cmp	r3, #46	@ 0x2e
 8005eae:	d10a      	bne.n	8005ec6 <_vfiprintf_r+0x156>
 8005eb0:	7863      	ldrb	r3, [r4, #1]
 8005eb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005eb4:	d132      	bne.n	8005f1c <_vfiprintf_r+0x1ac>
 8005eb6:	9b03      	ldr	r3, [sp, #12]
 8005eb8:	1d1a      	adds	r2, r3, #4
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	9203      	str	r2, [sp, #12]
 8005ebe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ec2:	3402      	adds	r4, #2
 8005ec4:	9305      	str	r3, [sp, #20]
 8005ec6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005f9c <_vfiprintf_r+0x22c>
 8005eca:	7821      	ldrb	r1, [r4, #0]
 8005ecc:	2203      	movs	r2, #3
 8005ece:	4650      	mov	r0, sl
 8005ed0:	f7fa f9a6 	bl	8000220 <memchr>
 8005ed4:	b138      	cbz	r0, 8005ee6 <_vfiprintf_r+0x176>
 8005ed6:	9b04      	ldr	r3, [sp, #16]
 8005ed8:	eba0 000a 	sub.w	r0, r0, sl
 8005edc:	2240      	movs	r2, #64	@ 0x40
 8005ede:	4082      	lsls	r2, r0
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	3401      	adds	r4, #1
 8005ee4:	9304      	str	r3, [sp, #16]
 8005ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eea:	4829      	ldr	r0, [pc, #164]	@ (8005f90 <_vfiprintf_r+0x220>)
 8005eec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ef0:	2206      	movs	r2, #6
 8005ef2:	f7fa f995 	bl	8000220 <memchr>
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	d03f      	beq.n	8005f7a <_vfiprintf_r+0x20a>
 8005efa:	4b26      	ldr	r3, [pc, #152]	@ (8005f94 <_vfiprintf_r+0x224>)
 8005efc:	bb1b      	cbnz	r3, 8005f46 <_vfiprintf_r+0x1d6>
 8005efe:	9b03      	ldr	r3, [sp, #12]
 8005f00:	3307      	adds	r3, #7
 8005f02:	f023 0307 	bic.w	r3, r3, #7
 8005f06:	3308      	adds	r3, #8
 8005f08:	9303      	str	r3, [sp, #12]
 8005f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f0c:	443b      	add	r3, r7
 8005f0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f10:	e76a      	b.n	8005de8 <_vfiprintf_r+0x78>
 8005f12:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f16:	460c      	mov	r4, r1
 8005f18:	2001      	movs	r0, #1
 8005f1a:	e7a8      	b.n	8005e6e <_vfiprintf_r+0xfe>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	3401      	adds	r4, #1
 8005f20:	9305      	str	r3, [sp, #20]
 8005f22:	4619      	mov	r1, r3
 8005f24:	f04f 0c0a 	mov.w	ip, #10
 8005f28:	4620      	mov	r0, r4
 8005f2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f2e:	3a30      	subs	r2, #48	@ 0x30
 8005f30:	2a09      	cmp	r2, #9
 8005f32:	d903      	bls.n	8005f3c <_vfiprintf_r+0x1cc>
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d0c6      	beq.n	8005ec6 <_vfiprintf_r+0x156>
 8005f38:	9105      	str	r1, [sp, #20]
 8005f3a:	e7c4      	b.n	8005ec6 <_vfiprintf_r+0x156>
 8005f3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f40:	4604      	mov	r4, r0
 8005f42:	2301      	movs	r3, #1
 8005f44:	e7f0      	b.n	8005f28 <_vfiprintf_r+0x1b8>
 8005f46:	ab03      	add	r3, sp, #12
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	462a      	mov	r2, r5
 8005f4c:	4b12      	ldr	r3, [pc, #72]	@ (8005f98 <_vfiprintf_r+0x228>)
 8005f4e:	a904      	add	r1, sp, #16
 8005f50:	4630      	mov	r0, r6
 8005f52:	f3af 8000 	nop.w
 8005f56:	4607      	mov	r7, r0
 8005f58:	1c78      	adds	r0, r7, #1
 8005f5a:	d1d6      	bne.n	8005f0a <_vfiprintf_r+0x19a>
 8005f5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f5e:	07d9      	lsls	r1, r3, #31
 8005f60:	d405      	bmi.n	8005f6e <_vfiprintf_r+0x1fe>
 8005f62:	89ab      	ldrh	r3, [r5, #12]
 8005f64:	059a      	lsls	r2, r3, #22
 8005f66:	d402      	bmi.n	8005f6e <_vfiprintf_r+0x1fe>
 8005f68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f6a:	f7ff fc7f 	bl	800586c <__retarget_lock_release_recursive>
 8005f6e:	89ab      	ldrh	r3, [r5, #12]
 8005f70:	065b      	lsls	r3, r3, #25
 8005f72:	f53f af1f 	bmi.w	8005db4 <_vfiprintf_r+0x44>
 8005f76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f78:	e71e      	b.n	8005db8 <_vfiprintf_r+0x48>
 8005f7a:	ab03      	add	r3, sp, #12
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	462a      	mov	r2, r5
 8005f80:	4b05      	ldr	r3, [pc, #20]	@ (8005f98 <_vfiprintf_r+0x228>)
 8005f82:	a904      	add	r1, sp, #16
 8005f84:	4630      	mov	r0, r6
 8005f86:	f000 f879 	bl	800607c <_printf_i>
 8005f8a:	e7e4      	b.n	8005f56 <_vfiprintf_r+0x1e6>
 8005f8c:	08006a2a 	.word	0x08006a2a
 8005f90:	08006a34 	.word	0x08006a34
 8005f94:	00000000 	.word	0x00000000
 8005f98:	08005d4b 	.word	0x08005d4b
 8005f9c:	08006a30 	.word	0x08006a30

08005fa0 <_printf_common>:
 8005fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa4:	4616      	mov	r6, r2
 8005fa6:	4698      	mov	r8, r3
 8005fa8:	688a      	ldr	r2, [r1, #8]
 8005faa:	690b      	ldr	r3, [r1, #16]
 8005fac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	bfb8      	it	lt
 8005fb4:	4613      	movlt	r3, r2
 8005fb6:	6033      	str	r3, [r6, #0]
 8005fb8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fbc:	4607      	mov	r7, r0
 8005fbe:	460c      	mov	r4, r1
 8005fc0:	b10a      	cbz	r2, 8005fc6 <_printf_common+0x26>
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	6033      	str	r3, [r6, #0]
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	0699      	lsls	r1, r3, #26
 8005fca:	bf42      	ittt	mi
 8005fcc:	6833      	ldrmi	r3, [r6, #0]
 8005fce:	3302      	addmi	r3, #2
 8005fd0:	6033      	strmi	r3, [r6, #0]
 8005fd2:	6825      	ldr	r5, [r4, #0]
 8005fd4:	f015 0506 	ands.w	r5, r5, #6
 8005fd8:	d106      	bne.n	8005fe8 <_printf_common+0x48>
 8005fda:	f104 0a19 	add.w	sl, r4, #25
 8005fde:	68e3      	ldr	r3, [r4, #12]
 8005fe0:	6832      	ldr	r2, [r6, #0]
 8005fe2:	1a9b      	subs	r3, r3, r2
 8005fe4:	42ab      	cmp	r3, r5
 8005fe6:	dc26      	bgt.n	8006036 <_printf_common+0x96>
 8005fe8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005fec:	6822      	ldr	r2, [r4, #0]
 8005fee:	3b00      	subs	r3, #0
 8005ff0:	bf18      	it	ne
 8005ff2:	2301      	movne	r3, #1
 8005ff4:	0692      	lsls	r2, r2, #26
 8005ff6:	d42b      	bmi.n	8006050 <_printf_common+0xb0>
 8005ff8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ffc:	4641      	mov	r1, r8
 8005ffe:	4638      	mov	r0, r7
 8006000:	47c8      	blx	r9
 8006002:	3001      	adds	r0, #1
 8006004:	d01e      	beq.n	8006044 <_printf_common+0xa4>
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	6922      	ldr	r2, [r4, #16]
 800600a:	f003 0306 	and.w	r3, r3, #6
 800600e:	2b04      	cmp	r3, #4
 8006010:	bf02      	ittt	eq
 8006012:	68e5      	ldreq	r5, [r4, #12]
 8006014:	6833      	ldreq	r3, [r6, #0]
 8006016:	1aed      	subeq	r5, r5, r3
 8006018:	68a3      	ldr	r3, [r4, #8]
 800601a:	bf0c      	ite	eq
 800601c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006020:	2500      	movne	r5, #0
 8006022:	4293      	cmp	r3, r2
 8006024:	bfc4      	itt	gt
 8006026:	1a9b      	subgt	r3, r3, r2
 8006028:	18ed      	addgt	r5, r5, r3
 800602a:	2600      	movs	r6, #0
 800602c:	341a      	adds	r4, #26
 800602e:	42b5      	cmp	r5, r6
 8006030:	d11a      	bne.n	8006068 <_printf_common+0xc8>
 8006032:	2000      	movs	r0, #0
 8006034:	e008      	b.n	8006048 <_printf_common+0xa8>
 8006036:	2301      	movs	r3, #1
 8006038:	4652      	mov	r2, sl
 800603a:	4641      	mov	r1, r8
 800603c:	4638      	mov	r0, r7
 800603e:	47c8      	blx	r9
 8006040:	3001      	adds	r0, #1
 8006042:	d103      	bne.n	800604c <_printf_common+0xac>
 8006044:	f04f 30ff 	mov.w	r0, #4294967295
 8006048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800604c:	3501      	adds	r5, #1
 800604e:	e7c6      	b.n	8005fde <_printf_common+0x3e>
 8006050:	18e1      	adds	r1, r4, r3
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	2030      	movs	r0, #48	@ 0x30
 8006056:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800605a:	4422      	add	r2, r4
 800605c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006060:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006064:	3302      	adds	r3, #2
 8006066:	e7c7      	b.n	8005ff8 <_printf_common+0x58>
 8006068:	2301      	movs	r3, #1
 800606a:	4622      	mov	r2, r4
 800606c:	4641      	mov	r1, r8
 800606e:	4638      	mov	r0, r7
 8006070:	47c8      	blx	r9
 8006072:	3001      	adds	r0, #1
 8006074:	d0e6      	beq.n	8006044 <_printf_common+0xa4>
 8006076:	3601      	adds	r6, #1
 8006078:	e7d9      	b.n	800602e <_printf_common+0x8e>
	...

0800607c <_printf_i>:
 800607c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006080:	7e0f      	ldrb	r7, [r1, #24]
 8006082:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006084:	2f78      	cmp	r7, #120	@ 0x78
 8006086:	4691      	mov	r9, r2
 8006088:	4680      	mov	r8, r0
 800608a:	460c      	mov	r4, r1
 800608c:	469a      	mov	sl, r3
 800608e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006092:	d807      	bhi.n	80060a4 <_printf_i+0x28>
 8006094:	2f62      	cmp	r7, #98	@ 0x62
 8006096:	d80a      	bhi.n	80060ae <_printf_i+0x32>
 8006098:	2f00      	cmp	r7, #0
 800609a:	f000 80d1 	beq.w	8006240 <_printf_i+0x1c4>
 800609e:	2f58      	cmp	r7, #88	@ 0x58
 80060a0:	f000 80b8 	beq.w	8006214 <_printf_i+0x198>
 80060a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060ac:	e03a      	b.n	8006124 <_printf_i+0xa8>
 80060ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060b2:	2b15      	cmp	r3, #21
 80060b4:	d8f6      	bhi.n	80060a4 <_printf_i+0x28>
 80060b6:	a101      	add	r1, pc, #4	@ (adr r1, 80060bc <_printf_i+0x40>)
 80060b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060bc:	08006115 	.word	0x08006115
 80060c0:	08006129 	.word	0x08006129
 80060c4:	080060a5 	.word	0x080060a5
 80060c8:	080060a5 	.word	0x080060a5
 80060cc:	080060a5 	.word	0x080060a5
 80060d0:	080060a5 	.word	0x080060a5
 80060d4:	08006129 	.word	0x08006129
 80060d8:	080060a5 	.word	0x080060a5
 80060dc:	080060a5 	.word	0x080060a5
 80060e0:	080060a5 	.word	0x080060a5
 80060e4:	080060a5 	.word	0x080060a5
 80060e8:	08006227 	.word	0x08006227
 80060ec:	08006153 	.word	0x08006153
 80060f0:	080061e1 	.word	0x080061e1
 80060f4:	080060a5 	.word	0x080060a5
 80060f8:	080060a5 	.word	0x080060a5
 80060fc:	08006249 	.word	0x08006249
 8006100:	080060a5 	.word	0x080060a5
 8006104:	08006153 	.word	0x08006153
 8006108:	080060a5 	.word	0x080060a5
 800610c:	080060a5 	.word	0x080060a5
 8006110:	080061e9 	.word	0x080061e9
 8006114:	6833      	ldr	r3, [r6, #0]
 8006116:	1d1a      	adds	r2, r3, #4
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6032      	str	r2, [r6, #0]
 800611c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006120:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006124:	2301      	movs	r3, #1
 8006126:	e09c      	b.n	8006262 <_printf_i+0x1e6>
 8006128:	6833      	ldr	r3, [r6, #0]
 800612a:	6820      	ldr	r0, [r4, #0]
 800612c:	1d19      	adds	r1, r3, #4
 800612e:	6031      	str	r1, [r6, #0]
 8006130:	0606      	lsls	r6, r0, #24
 8006132:	d501      	bpl.n	8006138 <_printf_i+0xbc>
 8006134:	681d      	ldr	r5, [r3, #0]
 8006136:	e003      	b.n	8006140 <_printf_i+0xc4>
 8006138:	0645      	lsls	r5, r0, #25
 800613a:	d5fb      	bpl.n	8006134 <_printf_i+0xb8>
 800613c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006140:	2d00      	cmp	r5, #0
 8006142:	da03      	bge.n	800614c <_printf_i+0xd0>
 8006144:	232d      	movs	r3, #45	@ 0x2d
 8006146:	426d      	negs	r5, r5
 8006148:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800614c:	4858      	ldr	r0, [pc, #352]	@ (80062b0 <_printf_i+0x234>)
 800614e:	230a      	movs	r3, #10
 8006150:	e011      	b.n	8006176 <_printf_i+0xfa>
 8006152:	6821      	ldr	r1, [r4, #0]
 8006154:	6833      	ldr	r3, [r6, #0]
 8006156:	0608      	lsls	r0, r1, #24
 8006158:	f853 5b04 	ldr.w	r5, [r3], #4
 800615c:	d402      	bmi.n	8006164 <_printf_i+0xe8>
 800615e:	0649      	lsls	r1, r1, #25
 8006160:	bf48      	it	mi
 8006162:	b2ad      	uxthmi	r5, r5
 8006164:	2f6f      	cmp	r7, #111	@ 0x6f
 8006166:	4852      	ldr	r0, [pc, #328]	@ (80062b0 <_printf_i+0x234>)
 8006168:	6033      	str	r3, [r6, #0]
 800616a:	bf14      	ite	ne
 800616c:	230a      	movne	r3, #10
 800616e:	2308      	moveq	r3, #8
 8006170:	2100      	movs	r1, #0
 8006172:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006176:	6866      	ldr	r6, [r4, #4]
 8006178:	60a6      	str	r6, [r4, #8]
 800617a:	2e00      	cmp	r6, #0
 800617c:	db05      	blt.n	800618a <_printf_i+0x10e>
 800617e:	6821      	ldr	r1, [r4, #0]
 8006180:	432e      	orrs	r6, r5
 8006182:	f021 0104 	bic.w	r1, r1, #4
 8006186:	6021      	str	r1, [r4, #0]
 8006188:	d04b      	beq.n	8006222 <_printf_i+0x1a6>
 800618a:	4616      	mov	r6, r2
 800618c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006190:	fb03 5711 	mls	r7, r3, r1, r5
 8006194:	5dc7      	ldrb	r7, [r0, r7]
 8006196:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800619a:	462f      	mov	r7, r5
 800619c:	42bb      	cmp	r3, r7
 800619e:	460d      	mov	r5, r1
 80061a0:	d9f4      	bls.n	800618c <_printf_i+0x110>
 80061a2:	2b08      	cmp	r3, #8
 80061a4:	d10b      	bne.n	80061be <_printf_i+0x142>
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	07df      	lsls	r7, r3, #31
 80061aa:	d508      	bpl.n	80061be <_printf_i+0x142>
 80061ac:	6923      	ldr	r3, [r4, #16]
 80061ae:	6861      	ldr	r1, [r4, #4]
 80061b0:	4299      	cmp	r1, r3
 80061b2:	bfde      	ittt	le
 80061b4:	2330      	movle	r3, #48	@ 0x30
 80061b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061be:	1b92      	subs	r2, r2, r6
 80061c0:	6122      	str	r2, [r4, #16]
 80061c2:	f8cd a000 	str.w	sl, [sp]
 80061c6:	464b      	mov	r3, r9
 80061c8:	aa03      	add	r2, sp, #12
 80061ca:	4621      	mov	r1, r4
 80061cc:	4640      	mov	r0, r8
 80061ce:	f7ff fee7 	bl	8005fa0 <_printf_common>
 80061d2:	3001      	adds	r0, #1
 80061d4:	d14a      	bne.n	800626c <_printf_i+0x1f0>
 80061d6:	f04f 30ff 	mov.w	r0, #4294967295
 80061da:	b004      	add	sp, #16
 80061dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	f043 0320 	orr.w	r3, r3, #32
 80061e6:	6023      	str	r3, [r4, #0]
 80061e8:	4832      	ldr	r0, [pc, #200]	@ (80062b4 <_printf_i+0x238>)
 80061ea:	2778      	movs	r7, #120	@ 0x78
 80061ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061f0:	6823      	ldr	r3, [r4, #0]
 80061f2:	6831      	ldr	r1, [r6, #0]
 80061f4:	061f      	lsls	r7, r3, #24
 80061f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80061fa:	d402      	bmi.n	8006202 <_printf_i+0x186>
 80061fc:	065f      	lsls	r7, r3, #25
 80061fe:	bf48      	it	mi
 8006200:	b2ad      	uxthmi	r5, r5
 8006202:	6031      	str	r1, [r6, #0]
 8006204:	07d9      	lsls	r1, r3, #31
 8006206:	bf44      	itt	mi
 8006208:	f043 0320 	orrmi.w	r3, r3, #32
 800620c:	6023      	strmi	r3, [r4, #0]
 800620e:	b11d      	cbz	r5, 8006218 <_printf_i+0x19c>
 8006210:	2310      	movs	r3, #16
 8006212:	e7ad      	b.n	8006170 <_printf_i+0xf4>
 8006214:	4826      	ldr	r0, [pc, #152]	@ (80062b0 <_printf_i+0x234>)
 8006216:	e7e9      	b.n	80061ec <_printf_i+0x170>
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	f023 0320 	bic.w	r3, r3, #32
 800621e:	6023      	str	r3, [r4, #0]
 8006220:	e7f6      	b.n	8006210 <_printf_i+0x194>
 8006222:	4616      	mov	r6, r2
 8006224:	e7bd      	b.n	80061a2 <_printf_i+0x126>
 8006226:	6833      	ldr	r3, [r6, #0]
 8006228:	6825      	ldr	r5, [r4, #0]
 800622a:	6961      	ldr	r1, [r4, #20]
 800622c:	1d18      	adds	r0, r3, #4
 800622e:	6030      	str	r0, [r6, #0]
 8006230:	062e      	lsls	r6, r5, #24
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	d501      	bpl.n	800623a <_printf_i+0x1be>
 8006236:	6019      	str	r1, [r3, #0]
 8006238:	e002      	b.n	8006240 <_printf_i+0x1c4>
 800623a:	0668      	lsls	r0, r5, #25
 800623c:	d5fb      	bpl.n	8006236 <_printf_i+0x1ba>
 800623e:	8019      	strh	r1, [r3, #0]
 8006240:	2300      	movs	r3, #0
 8006242:	6123      	str	r3, [r4, #16]
 8006244:	4616      	mov	r6, r2
 8006246:	e7bc      	b.n	80061c2 <_printf_i+0x146>
 8006248:	6833      	ldr	r3, [r6, #0]
 800624a:	1d1a      	adds	r2, r3, #4
 800624c:	6032      	str	r2, [r6, #0]
 800624e:	681e      	ldr	r6, [r3, #0]
 8006250:	6862      	ldr	r2, [r4, #4]
 8006252:	2100      	movs	r1, #0
 8006254:	4630      	mov	r0, r6
 8006256:	f7f9 ffe3 	bl	8000220 <memchr>
 800625a:	b108      	cbz	r0, 8006260 <_printf_i+0x1e4>
 800625c:	1b80      	subs	r0, r0, r6
 800625e:	6060      	str	r0, [r4, #4]
 8006260:	6863      	ldr	r3, [r4, #4]
 8006262:	6123      	str	r3, [r4, #16]
 8006264:	2300      	movs	r3, #0
 8006266:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800626a:	e7aa      	b.n	80061c2 <_printf_i+0x146>
 800626c:	6923      	ldr	r3, [r4, #16]
 800626e:	4632      	mov	r2, r6
 8006270:	4649      	mov	r1, r9
 8006272:	4640      	mov	r0, r8
 8006274:	47d0      	blx	sl
 8006276:	3001      	adds	r0, #1
 8006278:	d0ad      	beq.n	80061d6 <_printf_i+0x15a>
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	079b      	lsls	r3, r3, #30
 800627e:	d413      	bmi.n	80062a8 <_printf_i+0x22c>
 8006280:	68e0      	ldr	r0, [r4, #12]
 8006282:	9b03      	ldr	r3, [sp, #12]
 8006284:	4298      	cmp	r0, r3
 8006286:	bfb8      	it	lt
 8006288:	4618      	movlt	r0, r3
 800628a:	e7a6      	b.n	80061da <_printf_i+0x15e>
 800628c:	2301      	movs	r3, #1
 800628e:	4632      	mov	r2, r6
 8006290:	4649      	mov	r1, r9
 8006292:	4640      	mov	r0, r8
 8006294:	47d0      	blx	sl
 8006296:	3001      	adds	r0, #1
 8006298:	d09d      	beq.n	80061d6 <_printf_i+0x15a>
 800629a:	3501      	adds	r5, #1
 800629c:	68e3      	ldr	r3, [r4, #12]
 800629e:	9903      	ldr	r1, [sp, #12]
 80062a0:	1a5b      	subs	r3, r3, r1
 80062a2:	42ab      	cmp	r3, r5
 80062a4:	dcf2      	bgt.n	800628c <_printf_i+0x210>
 80062a6:	e7eb      	b.n	8006280 <_printf_i+0x204>
 80062a8:	2500      	movs	r5, #0
 80062aa:	f104 0619 	add.w	r6, r4, #25
 80062ae:	e7f5      	b.n	800629c <_printf_i+0x220>
 80062b0:	08006a3b 	.word	0x08006a3b
 80062b4:	08006a4c 	.word	0x08006a4c

080062b8 <__sflush_r>:
 80062b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062c0:	0716      	lsls	r6, r2, #28
 80062c2:	4605      	mov	r5, r0
 80062c4:	460c      	mov	r4, r1
 80062c6:	d454      	bmi.n	8006372 <__sflush_r+0xba>
 80062c8:	684b      	ldr	r3, [r1, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	dc02      	bgt.n	80062d4 <__sflush_r+0x1c>
 80062ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	dd48      	ble.n	8006366 <__sflush_r+0xae>
 80062d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062d6:	2e00      	cmp	r6, #0
 80062d8:	d045      	beq.n	8006366 <__sflush_r+0xae>
 80062da:	2300      	movs	r3, #0
 80062dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80062e0:	682f      	ldr	r7, [r5, #0]
 80062e2:	6a21      	ldr	r1, [r4, #32]
 80062e4:	602b      	str	r3, [r5, #0]
 80062e6:	d030      	beq.n	800634a <__sflush_r+0x92>
 80062e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80062ea:	89a3      	ldrh	r3, [r4, #12]
 80062ec:	0759      	lsls	r1, r3, #29
 80062ee:	d505      	bpl.n	80062fc <__sflush_r+0x44>
 80062f0:	6863      	ldr	r3, [r4, #4]
 80062f2:	1ad2      	subs	r2, r2, r3
 80062f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80062f6:	b10b      	cbz	r3, 80062fc <__sflush_r+0x44>
 80062f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80062fa:	1ad2      	subs	r2, r2, r3
 80062fc:	2300      	movs	r3, #0
 80062fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006300:	6a21      	ldr	r1, [r4, #32]
 8006302:	4628      	mov	r0, r5
 8006304:	47b0      	blx	r6
 8006306:	1c43      	adds	r3, r0, #1
 8006308:	89a3      	ldrh	r3, [r4, #12]
 800630a:	d106      	bne.n	800631a <__sflush_r+0x62>
 800630c:	6829      	ldr	r1, [r5, #0]
 800630e:	291d      	cmp	r1, #29
 8006310:	d82b      	bhi.n	800636a <__sflush_r+0xb2>
 8006312:	4a2a      	ldr	r2, [pc, #168]	@ (80063bc <__sflush_r+0x104>)
 8006314:	40ca      	lsrs	r2, r1
 8006316:	07d6      	lsls	r6, r2, #31
 8006318:	d527      	bpl.n	800636a <__sflush_r+0xb2>
 800631a:	2200      	movs	r2, #0
 800631c:	6062      	str	r2, [r4, #4]
 800631e:	04d9      	lsls	r1, r3, #19
 8006320:	6922      	ldr	r2, [r4, #16]
 8006322:	6022      	str	r2, [r4, #0]
 8006324:	d504      	bpl.n	8006330 <__sflush_r+0x78>
 8006326:	1c42      	adds	r2, r0, #1
 8006328:	d101      	bne.n	800632e <__sflush_r+0x76>
 800632a:	682b      	ldr	r3, [r5, #0]
 800632c:	b903      	cbnz	r3, 8006330 <__sflush_r+0x78>
 800632e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006330:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006332:	602f      	str	r7, [r5, #0]
 8006334:	b1b9      	cbz	r1, 8006366 <__sflush_r+0xae>
 8006336:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800633a:	4299      	cmp	r1, r3
 800633c:	d002      	beq.n	8006344 <__sflush_r+0x8c>
 800633e:	4628      	mov	r0, r5
 8006340:	f7ff fa9c 	bl	800587c <_free_r>
 8006344:	2300      	movs	r3, #0
 8006346:	6363      	str	r3, [r4, #52]	@ 0x34
 8006348:	e00d      	b.n	8006366 <__sflush_r+0xae>
 800634a:	2301      	movs	r3, #1
 800634c:	4628      	mov	r0, r5
 800634e:	47b0      	blx	r6
 8006350:	4602      	mov	r2, r0
 8006352:	1c50      	adds	r0, r2, #1
 8006354:	d1c9      	bne.n	80062ea <__sflush_r+0x32>
 8006356:	682b      	ldr	r3, [r5, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d0c6      	beq.n	80062ea <__sflush_r+0x32>
 800635c:	2b1d      	cmp	r3, #29
 800635e:	d001      	beq.n	8006364 <__sflush_r+0xac>
 8006360:	2b16      	cmp	r3, #22
 8006362:	d11e      	bne.n	80063a2 <__sflush_r+0xea>
 8006364:	602f      	str	r7, [r5, #0]
 8006366:	2000      	movs	r0, #0
 8006368:	e022      	b.n	80063b0 <__sflush_r+0xf8>
 800636a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800636e:	b21b      	sxth	r3, r3
 8006370:	e01b      	b.n	80063aa <__sflush_r+0xf2>
 8006372:	690f      	ldr	r7, [r1, #16]
 8006374:	2f00      	cmp	r7, #0
 8006376:	d0f6      	beq.n	8006366 <__sflush_r+0xae>
 8006378:	0793      	lsls	r3, r2, #30
 800637a:	680e      	ldr	r6, [r1, #0]
 800637c:	bf08      	it	eq
 800637e:	694b      	ldreq	r3, [r1, #20]
 8006380:	600f      	str	r7, [r1, #0]
 8006382:	bf18      	it	ne
 8006384:	2300      	movne	r3, #0
 8006386:	eba6 0807 	sub.w	r8, r6, r7
 800638a:	608b      	str	r3, [r1, #8]
 800638c:	f1b8 0f00 	cmp.w	r8, #0
 8006390:	dde9      	ble.n	8006366 <__sflush_r+0xae>
 8006392:	6a21      	ldr	r1, [r4, #32]
 8006394:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006396:	4643      	mov	r3, r8
 8006398:	463a      	mov	r2, r7
 800639a:	4628      	mov	r0, r5
 800639c:	47b0      	blx	r6
 800639e:	2800      	cmp	r0, #0
 80063a0:	dc08      	bgt.n	80063b4 <__sflush_r+0xfc>
 80063a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063aa:	81a3      	strh	r3, [r4, #12]
 80063ac:	f04f 30ff 	mov.w	r0, #4294967295
 80063b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063b4:	4407      	add	r7, r0
 80063b6:	eba8 0800 	sub.w	r8, r8, r0
 80063ba:	e7e7      	b.n	800638c <__sflush_r+0xd4>
 80063bc:	20400001 	.word	0x20400001

080063c0 <_fflush_r>:
 80063c0:	b538      	push	{r3, r4, r5, lr}
 80063c2:	690b      	ldr	r3, [r1, #16]
 80063c4:	4605      	mov	r5, r0
 80063c6:	460c      	mov	r4, r1
 80063c8:	b913      	cbnz	r3, 80063d0 <_fflush_r+0x10>
 80063ca:	2500      	movs	r5, #0
 80063cc:	4628      	mov	r0, r5
 80063ce:	bd38      	pop	{r3, r4, r5, pc}
 80063d0:	b118      	cbz	r0, 80063da <_fflush_r+0x1a>
 80063d2:	6a03      	ldr	r3, [r0, #32]
 80063d4:	b90b      	cbnz	r3, 80063da <_fflush_r+0x1a>
 80063d6:	f7ff f921 	bl	800561c <__sinit>
 80063da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d0f3      	beq.n	80063ca <_fflush_r+0xa>
 80063e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80063e4:	07d0      	lsls	r0, r2, #31
 80063e6:	d404      	bmi.n	80063f2 <_fflush_r+0x32>
 80063e8:	0599      	lsls	r1, r3, #22
 80063ea:	d402      	bmi.n	80063f2 <_fflush_r+0x32>
 80063ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063ee:	f7ff fa3c 	bl	800586a <__retarget_lock_acquire_recursive>
 80063f2:	4628      	mov	r0, r5
 80063f4:	4621      	mov	r1, r4
 80063f6:	f7ff ff5f 	bl	80062b8 <__sflush_r>
 80063fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063fc:	07da      	lsls	r2, r3, #31
 80063fe:	4605      	mov	r5, r0
 8006400:	d4e4      	bmi.n	80063cc <_fflush_r+0xc>
 8006402:	89a3      	ldrh	r3, [r4, #12]
 8006404:	059b      	lsls	r3, r3, #22
 8006406:	d4e1      	bmi.n	80063cc <_fflush_r+0xc>
 8006408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800640a:	f7ff fa2f 	bl	800586c <__retarget_lock_release_recursive>
 800640e:	e7dd      	b.n	80063cc <_fflush_r+0xc>

08006410 <__swbuf_r>:
 8006410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006412:	460e      	mov	r6, r1
 8006414:	4614      	mov	r4, r2
 8006416:	4605      	mov	r5, r0
 8006418:	b118      	cbz	r0, 8006422 <__swbuf_r+0x12>
 800641a:	6a03      	ldr	r3, [r0, #32]
 800641c:	b90b      	cbnz	r3, 8006422 <__swbuf_r+0x12>
 800641e:	f7ff f8fd 	bl	800561c <__sinit>
 8006422:	69a3      	ldr	r3, [r4, #24]
 8006424:	60a3      	str	r3, [r4, #8]
 8006426:	89a3      	ldrh	r3, [r4, #12]
 8006428:	071a      	lsls	r2, r3, #28
 800642a:	d501      	bpl.n	8006430 <__swbuf_r+0x20>
 800642c:	6923      	ldr	r3, [r4, #16]
 800642e:	b943      	cbnz	r3, 8006442 <__swbuf_r+0x32>
 8006430:	4621      	mov	r1, r4
 8006432:	4628      	mov	r0, r5
 8006434:	f000 f82a 	bl	800648c <__swsetup_r>
 8006438:	b118      	cbz	r0, 8006442 <__swbuf_r+0x32>
 800643a:	f04f 37ff 	mov.w	r7, #4294967295
 800643e:	4638      	mov	r0, r7
 8006440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	6922      	ldr	r2, [r4, #16]
 8006446:	1a98      	subs	r0, r3, r2
 8006448:	6963      	ldr	r3, [r4, #20]
 800644a:	b2f6      	uxtb	r6, r6
 800644c:	4283      	cmp	r3, r0
 800644e:	4637      	mov	r7, r6
 8006450:	dc05      	bgt.n	800645e <__swbuf_r+0x4e>
 8006452:	4621      	mov	r1, r4
 8006454:	4628      	mov	r0, r5
 8006456:	f7ff ffb3 	bl	80063c0 <_fflush_r>
 800645a:	2800      	cmp	r0, #0
 800645c:	d1ed      	bne.n	800643a <__swbuf_r+0x2a>
 800645e:	68a3      	ldr	r3, [r4, #8]
 8006460:	3b01      	subs	r3, #1
 8006462:	60a3      	str	r3, [r4, #8]
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	6022      	str	r2, [r4, #0]
 800646a:	701e      	strb	r6, [r3, #0]
 800646c:	6962      	ldr	r2, [r4, #20]
 800646e:	1c43      	adds	r3, r0, #1
 8006470:	429a      	cmp	r2, r3
 8006472:	d004      	beq.n	800647e <__swbuf_r+0x6e>
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	07db      	lsls	r3, r3, #31
 8006478:	d5e1      	bpl.n	800643e <__swbuf_r+0x2e>
 800647a:	2e0a      	cmp	r6, #10
 800647c:	d1df      	bne.n	800643e <__swbuf_r+0x2e>
 800647e:	4621      	mov	r1, r4
 8006480:	4628      	mov	r0, r5
 8006482:	f7ff ff9d 	bl	80063c0 <_fflush_r>
 8006486:	2800      	cmp	r0, #0
 8006488:	d0d9      	beq.n	800643e <__swbuf_r+0x2e>
 800648a:	e7d6      	b.n	800643a <__swbuf_r+0x2a>

0800648c <__swsetup_r>:
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	4b29      	ldr	r3, [pc, #164]	@ (8006534 <__swsetup_r+0xa8>)
 8006490:	4605      	mov	r5, r0
 8006492:	6818      	ldr	r0, [r3, #0]
 8006494:	460c      	mov	r4, r1
 8006496:	b118      	cbz	r0, 80064a0 <__swsetup_r+0x14>
 8006498:	6a03      	ldr	r3, [r0, #32]
 800649a:	b90b      	cbnz	r3, 80064a0 <__swsetup_r+0x14>
 800649c:	f7ff f8be 	bl	800561c <__sinit>
 80064a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064a4:	0719      	lsls	r1, r3, #28
 80064a6:	d422      	bmi.n	80064ee <__swsetup_r+0x62>
 80064a8:	06da      	lsls	r2, r3, #27
 80064aa:	d407      	bmi.n	80064bc <__swsetup_r+0x30>
 80064ac:	2209      	movs	r2, #9
 80064ae:	602a      	str	r2, [r5, #0]
 80064b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064b4:	81a3      	strh	r3, [r4, #12]
 80064b6:	f04f 30ff 	mov.w	r0, #4294967295
 80064ba:	e033      	b.n	8006524 <__swsetup_r+0x98>
 80064bc:	0758      	lsls	r0, r3, #29
 80064be:	d512      	bpl.n	80064e6 <__swsetup_r+0x5a>
 80064c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064c2:	b141      	cbz	r1, 80064d6 <__swsetup_r+0x4a>
 80064c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064c8:	4299      	cmp	r1, r3
 80064ca:	d002      	beq.n	80064d2 <__swsetup_r+0x46>
 80064cc:	4628      	mov	r0, r5
 80064ce:	f7ff f9d5 	bl	800587c <_free_r>
 80064d2:	2300      	movs	r3, #0
 80064d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80064d6:	89a3      	ldrh	r3, [r4, #12]
 80064d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80064dc:	81a3      	strh	r3, [r4, #12]
 80064de:	2300      	movs	r3, #0
 80064e0:	6063      	str	r3, [r4, #4]
 80064e2:	6923      	ldr	r3, [r4, #16]
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	89a3      	ldrh	r3, [r4, #12]
 80064e8:	f043 0308 	orr.w	r3, r3, #8
 80064ec:	81a3      	strh	r3, [r4, #12]
 80064ee:	6923      	ldr	r3, [r4, #16]
 80064f0:	b94b      	cbnz	r3, 8006506 <__swsetup_r+0x7a>
 80064f2:	89a3      	ldrh	r3, [r4, #12]
 80064f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80064f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064fc:	d003      	beq.n	8006506 <__swsetup_r+0x7a>
 80064fe:	4621      	mov	r1, r4
 8006500:	4628      	mov	r0, r5
 8006502:	f000 f8e9 	bl	80066d8 <__smakebuf_r>
 8006506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800650a:	f013 0201 	ands.w	r2, r3, #1
 800650e:	d00a      	beq.n	8006526 <__swsetup_r+0x9a>
 8006510:	2200      	movs	r2, #0
 8006512:	60a2      	str	r2, [r4, #8]
 8006514:	6962      	ldr	r2, [r4, #20]
 8006516:	4252      	negs	r2, r2
 8006518:	61a2      	str	r2, [r4, #24]
 800651a:	6922      	ldr	r2, [r4, #16]
 800651c:	b942      	cbnz	r2, 8006530 <__swsetup_r+0xa4>
 800651e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006522:	d1c5      	bne.n	80064b0 <__swsetup_r+0x24>
 8006524:	bd38      	pop	{r3, r4, r5, pc}
 8006526:	0799      	lsls	r1, r3, #30
 8006528:	bf58      	it	pl
 800652a:	6962      	ldrpl	r2, [r4, #20]
 800652c:	60a2      	str	r2, [r4, #8]
 800652e:	e7f4      	b.n	800651a <__swsetup_r+0x8e>
 8006530:	2000      	movs	r0, #0
 8006532:	e7f7      	b.n	8006524 <__swsetup_r+0x98>
 8006534:	2000001c 	.word	0x2000001c

08006538 <memmove>:
 8006538:	4288      	cmp	r0, r1
 800653a:	b510      	push	{r4, lr}
 800653c:	eb01 0402 	add.w	r4, r1, r2
 8006540:	d902      	bls.n	8006548 <memmove+0x10>
 8006542:	4284      	cmp	r4, r0
 8006544:	4623      	mov	r3, r4
 8006546:	d807      	bhi.n	8006558 <memmove+0x20>
 8006548:	1e43      	subs	r3, r0, #1
 800654a:	42a1      	cmp	r1, r4
 800654c:	d008      	beq.n	8006560 <memmove+0x28>
 800654e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006552:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006556:	e7f8      	b.n	800654a <memmove+0x12>
 8006558:	4402      	add	r2, r0
 800655a:	4601      	mov	r1, r0
 800655c:	428a      	cmp	r2, r1
 800655e:	d100      	bne.n	8006562 <memmove+0x2a>
 8006560:	bd10      	pop	{r4, pc}
 8006562:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006566:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800656a:	e7f7      	b.n	800655c <memmove+0x24>

0800656c <_raise_r>:
 800656c:	291f      	cmp	r1, #31
 800656e:	b538      	push	{r3, r4, r5, lr}
 8006570:	4605      	mov	r5, r0
 8006572:	460c      	mov	r4, r1
 8006574:	d904      	bls.n	8006580 <_raise_r+0x14>
 8006576:	2316      	movs	r3, #22
 8006578:	6003      	str	r3, [r0, #0]
 800657a:	f04f 30ff 	mov.w	r0, #4294967295
 800657e:	bd38      	pop	{r3, r4, r5, pc}
 8006580:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006582:	b112      	cbz	r2, 800658a <_raise_r+0x1e>
 8006584:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006588:	b94b      	cbnz	r3, 800659e <_raise_r+0x32>
 800658a:	4628      	mov	r0, r5
 800658c:	f000 f830 	bl	80065f0 <_getpid_r>
 8006590:	4622      	mov	r2, r4
 8006592:	4601      	mov	r1, r0
 8006594:	4628      	mov	r0, r5
 8006596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800659a:	f000 b817 	b.w	80065cc <_kill_r>
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d00a      	beq.n	80065b8 <_raise_r+0x4c>
 80065a2:	1c59      	adds	r1, r3, #1
 80065a4:	d103      	bne.n	80065ae <_raise_r+0x42>
 80065a6:	2316      	movs	r3, #22
 80065a8:	6003      	str	r3, [r0, #0]
 80065aa:	2001      	movs	r0, #1
 80065ac:	e7e7      	b.n	800657e <_raise_r+0x12>
 80065ae:	2100      	movs	r1, #0
 80065b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80065b4:	4620      	mov	r0, r4
 80065b6:	4798      	blx	r3
 80065b8:	2000      	movs	r0, #0
 80065ba:	e7e0      	b.n	800657e <_raise_r+0x12>

080065bc <raise>:
 80065bc:	4b02      	ldr	r3, [pc, #8]	@ (80065c8 <raise+0xc>)
 80065be:	4601      	mov	r1, r0
 80065c0:	6818      	ldr	r0, [r3, #0]
 80065c2:	f7ff bfd3 	b.w	800656c <_raise_r>
 80065c6:	bf00      	nop
 80065c8:	2000001c 	.word	0x2000001c

080065cc <_kill_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	4d07      	ldr	r5, [pc, #28]	@ (80065ec <_kill_r+0x20>)
 80065d0:	2300      	movs	r3, #0
 80065d2:	4604      	mov	r4, r0
 80065d4:	4608      	mov	r0, r1
 80065d6:	4611      	mov	r1, r2
 80065d8:	602b      	str	r3, [r5, #0]
 80065da:	f7fa ff6e 	bl	80014ba <_kill>
 80065de:	1c43      	adds	r3, r0, #1
 80065e0:	d102      	bne.n	80065e8 <_kill_r+0x1c>
 80065e2:	682b      	ldr	r3, [r5, #0]
 80065e4:	b103      	cbz	r3, 80065e8 <_kill_r+0x1c>
 80065e6:	6023      	str	r3, [r4, #0]
 80065e8:	bd38      	pop	{r3, r4, r5, pc}
 80065ea:	bf00      	nop
 80065ec:	20000598 	.word	0x20000598

080065f0 <_getpid_r>:
 80065f0:	f7fa bf5b 	b.w	80014aa <_getpid>

080065f4 <_sbrk_r>:
 80065f4:	b538      	push	{r3, r4, r5, lr}
 80065f6:	4d06      	ldr	r5, [pc, #24]	@ (8006610 <_sbrk_r+0x1c>)
 80065f8:	2300      	movs	r3, #0
 80065fa:	4604      	mov	r4, r0
 80065fc:	4608      	mov	r0, r1
 80065fe:	602b      	str	r3, [r5, #0]
 8006600:	f7fa ffe4 	bl	80015cc <_sbrk>
 8006604:	1c43      	adds	r3, r0, #1
 8006606:	d102      	bne.n	800660e <_sbrk_r+0x1a>
 8006608:	682b      	ldr	r3, [r5, #0]
 800660a:	b103      	cbz	r3, 800660e <_sbrk_r+0x1a>
 800660c:	6023      	str	r3, [r4, #0]
 800660e:	bd38      	pop	{r3, r4, r5, pc}
 8006610:	20000598 	.word	0x20000598

08006614 <memcpy>:
 8006614:	440a      	add	r2, r1
 8006616:	4291      	cmp	r1, r2
 8006618:	f100 33ff 	add.w	r3, r0, #4294967295
 800661c:	d100      	bne.n	8006620 <memcpy+0xc>
 800661e:	4770      	bx	lr
 8006620:	b510      	push	{r4, lr}
 8006622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006626:	f803 4f01 	strb.w	r4, [r3, #1]!
 800662a:	4291      	cmp	r1, r2
 800662c:	d1f9      	bne.n	8006622 <memcpy+0xe>
 800662e:	bd10      	pop	{r4, pc}

08006630 <_realloc_r>:
 8006630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006634:	4607      	mov	r7, r0
 8006636:	4614      	mov	r4, r2
 8006638:	460d      	mov	r5, r1
 800663a:	b921      	cbnz	r1, 8006646 <_realloc_r+0x16>
 800663c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006640:	4611      	mov	r1, r2
 8006642:	f7ff b987 	b.w	8005954 <_malloc_r>
 8006646:	b92a      	cbnz	r2, 8006654 <_realloc_r+0x24>
 8006648:	f7ff f918 	bl	800587c <_free_r>
 800664c:	4625      	mov	r5, r4
 800664e:	4628      	mov	r0, r5
 8006650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006654:	f000 f89e 	bl	8006794 <_malloc_usable_size_r>
 8006658:	4284      	cmp	r4, r0
 800665a:	4606      	mov	r6, r0
 800665c:	d802      	bhi.n	8006664 <_realloc_r+0x34>
 800665e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006662:	d8f4      	bhi.n	800664e <_realloc_r+0x1e>
 8006664:	4621      	mov	r1, r4
 8006666:	4638      	mov	r0, r7
 8006668:	f7ff f974 	bl	8005954 <_malloc_r>
 800666c:	4680      	mov	r8, r0
 800666e:	b908      	cbnz	r0, 8006674 <_realloc_r+0x44>
 8006670:	4645      	mov	r5, r8
 8006672:	e7ec      	b.n	800664e <_realloc_r+0x1e>
 8006674:	42b4      	cmp	r4, r6
 8006676:	4622      	mov	r2, r4
 8006678:	4629      	mov	r1, r5
 800667a:	bf28      	it	cs
 800667c:	4632      	movcs	r2, r6
 800667e:	f7ff ffc9 	bl	8006614 <memcpy>
 8006682:	4629      	mov	r1, r5
 8006684:	4638      	mov	r0, r7
 8006686:	f7ff f8f9 	bl	800587c <_free_r>
 800668a:	e7f1      	b.n	8006670 <_realloc_r+0x40>

0800668c <__swhatbuf_r>:
 800668c:	b570      	push	{r4, r5, r6, lr}
 800668e:	460c      	mov	r4, r1
 8006690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006694:	2900      	cmp	r1, #0
 8006696:	b096      	sub	sp, #88	@ 0x58
 8006698:	4615      	mov	r5, r2
 800669a:	461e      	mov	r6, r3
 800669c:	da0d      	bge.n	80066ba <__swhatbuf_r+0x2e>
 800669e:	89a3      	ldrh	r3, [r4, #12]
 80066a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80066a4:	f04f 0100 	mov.w	r1, #0
 80066a8:	bf14      	ite	ne
 80066aa:	2340      	movne	r3, #64	@ 0x40
 80066ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80066b0:	2000      	movs	r0, #0
 80066b2:	6031      	str	r1, [r6, #0]
 80066b4:	602b      	str	r3, [r5, #0]
 80066b6:	b016      	add	sp, #88	@ 0x58
 80066b8:	bd70      	pop	{r4, r5, r6, pc}
 80066ba:	466a      	mov	r2, sp
 80066bc:	f000 f848 	bl	8006750 <_fstat_r>
 80066c0:	2800      	cmp	r0, #0
 80066c2:	dbec      	blt.n	800669e <__swhatbuf_r+0x12>
 80066c4:	9901      	ldr	r1, [sp, #4]
 80066c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80066ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80066ce:	4259      	negs	r1, r3
 80066d0:	4159      	adcs	r1, r3
 80066d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80066d6:	e7eb      	b.n	80066b0 <__swhatbuf_r+0x24>

080066d8 <__smakebuf_r>:
 80066d8:	898b      	ldrh	r3, [r1, #12]
 80066da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066dc:	079d      	lsls	r5, r3, #30
 80066de:	4606      	mov	r6, r0
 80066e0:	460c      	mov	r4, r1
 80066e2:	d507      	bpl.n	80066f4 <__smakebuf_r+0x1c>
 80066e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	6123      	str	r3, [r4, #16]
 80066ec:	2301      	movs	r3, #1
 80066ee:	6163      	str	r3, [r4, #20]
 80066f0:	b003      	add	sp, #12
 80066f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066f4:	ab01      	add	r3, sp, #4
 80066f6:	466a      	mov	r2, sp
 80066f8:	f7ff ffc8 	bl	800668c <__swhatbuf_r>
 80066fc:	9f00      	ldr	r7, [sp, #0]
 80066fe:	4605      	mov	r5, r0
 8006700:	4639      	mov	r1, r7
 8006702:	4630      	mov	r0, r6
 8006704:	f7ff f926 	bl	8005954 <_malloc_r>
 8006708:	b948      	cbnz	r0, 800671e <__smakebuf_r+0x46>
 800670a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800670e:	059a      	lsls	r2, r3, #22
 8006710:	d4ee      	bmi.n	80066f0 <__smakebuf_r+0x18>
 8006712:	f023 0303 	bic.w	r3, r3, #3
 8006716:	f043 0302 	orr.w	r3, r3, #2
 800671a:	81a3      	strh	r3, [r4, #12]
 800671c:	e7e2      	b.n	80066e4 <__smakebuf_r+0xc>
 800671e:	89a3      	ldrh	r3, [r4, #12]
 8006720:	6020      	str	r0, [r4, #0]
 8006722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006726:	81a3      	strh	r3, [r4, #12]
 8006728:	9b01      	ldr	r3, [sp, #4]
 800672a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800672e:	b15b      	cbz	r3, 8006748 <__smakebuf_r+0x70>
 8006730:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006734:	4630      	mov	r0, r6
 8006736:	f000 f81d 	bl	8006774 <_isatty_r>
 800673a:	b128      	cbz	r0, 8006748 <__smakebuf_r+0x70>
 800673c:	89a3      	ldrh	r3, [r4, #12]
 800673e:	f023 0303 	bic.w	r3, r3, #3
 8006742:	f043 0301 	orr.w	r3, r3, #1
 8006746:	81a3      	strh	r3, [r4, #12]
 8006748:	89a3      	ldrh	r3, [r4, #12]
 800674a:	431d      	orrs	r5, r3
 800674c:	81a5      	strh	r5, [r4, #12]
 800674e:	e7cf      	b.n	80066f0 <__smakebuf_r+0x18>

08006750 <_fstat_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4d07      	ldr	r5, [pc, #28]	@ (8006770 <_fstat_r+0x20>)
 8006754:	2300      	movs	r3, #0
 8006756:	4604      	mov	r4, r0
 8006758:	4608      	mov	r0, r1
 800675a:	4611      	mov	r1, r2
 800675c:	602b      	str	r3, [r5, #0]
 800675e:	f7fa ff0c 	bl	800157a <_fstat>
 8006762:	1c43      	adds	r3, r0, #1
 8006764:	d102      	bne.n	800676c <_fstat_r+0x1c>
 8006766:	682b      	ldr	r3, [r5, #0]
 8006768:	b103      	cbz	r3, 800676c <_fstat_r+0x1c>
 800676a:	6023      	str	r3, [r4, #0]
 800676c:	bd38      	pop	{r3, r4, r5, pc}
 800676e:	bf00      	nop
 8006770:	20000598 	.word	0x20000598

08006774 <_isatty_r>:
 8006774:	b538      	push	{r3, r4, r5, lr}
 8006776:	4d06      	ldr	r5, [pc, #24]	@ (8006790 <_isatty_r+0x1c>)
 8006778:	2300      	movs	r3, #0
 800677a:	4604      	mov	r4, r0
 800677c:	4608      	mov	r0, r1
 800677e:	602b      	str	r3, [r5, #0]
 8006780:	f7fa ff0b 	bl	800159a <_isatty>
 8006784:	1c43      	adds	r3, r0, #1
 8006786:	d102      	bne.n	800678e <_isatty_r+0x1a>
 8006788:	682b      	ldr	r3, [r5, #0]
 800678a:	b103      	cbz	r3, 800678e <_isatty_r+0x1a>
 800678c:	6023      	str	r3, [r4, #0]
 800678e:	bd38      	pop	{r3, r4, r5, pc}
 8006790:	20000598 	.word	0x20000598

08006794 <_malloc_usable_size_r>:
 8006794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006798:	1f18      	subs	r0, r3, #4
 800679a:	2b00      	cmp	r3, #0
 800679c:	bfbc      	itt	lt
 800679e:	580b      	ldrlt	r3, [r1, r0]
 80067a0:	18c0      	addlt	r0, r0, r3
 80067a2:	4770      	bx	lr

080067a4 <_init>:
 80067a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a6:	bf00      	nop
 80067a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067aa:	bc08      	pop	{r3}
 80067ac:	469e      	mov	lr, r3
 80067ae:	4770      	bx	lr

080067b0 <_fini>:
 80067b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b2:	bf00      	nop
 80067b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067b6:	bc08      	pop	{r3}
 80067b8:	469e      	mov	lr, r3
 80067ba:	4770      	bx	lr
